This is METAFONT, Version 2.71828182 (preloaded base=mf 2023.10.16)  16 NOV 2023 13:15
**roman.mf
(roman.mf
>> ligs-1
! Unknown relation will be considered false.
<to be read again> 
                   :
l.6 if ligs>1:
               font_coding_scheme:="TeX text";
? Q
OK, entering batchmode...
>> ligs
! Unknown relation will be considered false.
<to be read again> 
                   :
l.8 else: font_coding_scheme:=if ligs=0:
                                         "TeX typewriter text"
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> font_setup
! Isolated expression.
<to be read again> 
                   ;
l.12 mode_setup; font_setup;
                            
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

 (romanu.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter A"
l.12 cmchar "The letter A"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter A"
l.12 cmchar "The letter A"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.13 beginchar("A",13u#,cap_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.13 beginchar("A",13u#,cap_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.14 adjust_fit(
                cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.14 adjust_fit(
                cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.17 left_stem=min(cap_hair if hefty:
                                      -3stem_corr fi,right_stem);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -cap_hair+right_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(right_stem)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.17 ..._hair if hefty: -3stem_corr fi,right_stem)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.20 alpha=diag_ratio(
                      2,left_stem,y2-y1,x4r-x1l-apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha
>> left_stem
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.21 penpos1(alpha*left_stem,
                             0); penpos2(alpha*left_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> left_stem
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.21 ...pha*left_stem,0); penpos2(alpha*left_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> right_stem
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.22 penpos3(alpha*right_stem,
                              0); penpos4(alpha*right_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> right_stem
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.22 ...a*right_stem,0); penpos4(alpha*right_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4752
>> (x2-x1l-0.5left_stem,y2)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.23 z0=whatever[z1r,z2r]
                         =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4686
>> (x2-x1l-0.5left_stem,-y2)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.23 z0=whatever[z1r,z2r]=whatever[z3l,z4l]
                                           ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> cap_notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.24 if y0<h-cap_notch_cut:
                            y0:=h-cap_notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -x1l-right_stem
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.28 else: fill z0--
                    diag_end(0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.28 else: fill z0--diag_end(
                             0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.28 else: fill z0--diag_end(
                             0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.28 else: fill z0--diag_end(
                             0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> (-2x1l-left_stem-right_stem,0)
! Not implemented: angle(unknown pair).
<to be read again> 
                   )
l.30 penpos5(whatever,angle(z2-z1))
                                   ; z5=whatever[z1,z2];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> (-2x1l-left_stem-right_stem,0)
! Improper transformation argument.
<to be read again> 
                   ;
penpos->...y(SUFFIX2)l)=((EXPR3),0)rotated(EXPR4);
                                                  x(SUFFIX2)=0.5(x(SUFFIX2)l...
l.30 penpos5(whatever,angle(z2-z1))
                                   ; z5=whatever[z1,z2];
The expression shown above has the wrong type,
so I can't transform anything using it.
Proceed, and I'll omit the transformation.

>> %CAPSULE4961
>> (-2x1l-left_stem-right_stem,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.30 ...whatever,angle(z2-z1)); z5=whatever[z1,z2]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-x5l-x5r-right_stem,0)
! Not implemented: angle(unknown pair).
<to be read again> 
                   )
l.31 penpos6(whatever,angle(z3-z4))
                                   ; z6=whatever[z3,z4]; y6=y5;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> (-x5l-x5r-right_stem,0)
! Improper transformation argument.
<to be read again> 
                   ;
penpos->...y(SUFFIX2)l)=((EXPR3),0)rotated(EXPR4);
                                                  x(SUFFIX2)=0.5(x(SUFFIX2)l...
l.31 penpos6(whatever,angle(z3-z4))
                                   ; z6=whatever[z3,z4]; y6=y5;
The expression shown above has the wrong type,
so I can't transform anything using it.
Proceed, and I'll omit the transformation.

>> %CAPSULE4551
>> (x5l+x5r+right_stem,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.31 ...whatever,angle(z3-z4)); z6=whatever[z3,z4]
                                                  ; y6=y5;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

! Redundant equation.
<to be read again> 
                   ;
l.31 ...,angle(z3-z4)); z6=whatever[z3,z4]; y6=y5;
                                                  
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.32 if hefty:
               y5r else: y5 fi =5/12y0;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Redundant equation.
<to be read again> 
                   ;
l.32 if hefty: y5r else: y5 fi =5/12y0;
                                       
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

! Redundant equation.
<to be read again> 
                   ;
l.33 y5r-y5l=y6r-y6l=cap_band;
                               penstroke z5e--z6e; % bar line
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> x5l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> path_(SUFFIX0):=z5(SUFFIX0)--
                                      z6(SUFFIX0); ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.33 y5r-y5l=y6r-y6l=cap_band; penstroke z5e--z6e;
                                                   % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -x6r+x5l+x5r+left_stem+right_stem
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> path_(SUFFIX0):=z5(SUFFIX0)--z6(SUFFIX0);
                                                   ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.33 y5r-y5l=y6r-y6l=cap_band; penstroke z5e--z6e;
                                                   % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x5r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> path_(SUFFIX0):=z5(SUFFIX0)--
                                      z6(SUFFIX0); ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.33 y5r-y5l=y6r-y6l=cap_band; penstroke z5e--z6e;
                                                   % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x6r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> path_(SUFFIX0):=z5(SUFFIX0)--z6(SUFFIX0);
                                                   ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.33 y5r-y5l=y6r-y6l=cap_band; penstroke z5e--z6e;
                                                   % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.34 if serifs:
                numeric inner_jut; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [65]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter B"
l.42 cmchar "The letter B"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter B"
l.42 cmchar "The letter B"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 12.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.43 beginchar("B",12.5u#,cap_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.43 beginchar("B",12.5u#,cap_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.75cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.44 italcorr .75cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant-0.5u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.44 italcorr .75cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.45 adjust_fit(
                cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.45 adjust_fit(
                cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2cap_stem-2right_stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.47 left_stem=cap_stem-hround 2stem_corr;
                                           middle_weight=.6vair+.5;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.48 pickup tiny.nib;
                      pos1(left_stem,0); pos2(left_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.48 pickup tiny.nib;
                      pos1(left_stem,0); pos2(left_stem,0);
This error message was generated by an `errmessage'
command, so I can't give any explicit help.
Pretend that you're Miss Marple: Examine all clues,
and deduce the truth by inspired guesses.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.48 pickup tiny.nib; pos1(
                           left_stem,0); pos2(left_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.48 pickup tiny.nib; pos1(
                           left_stem,0); pos2(left_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.48 pickup tiny.nib; pos1(left_stem,0); pos2(
                                              left_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.48 pickup tiny.nib; pos1(left_stem,0); pos2(
                                              left_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5left_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.49 lft x1l=lft x2l=hround max(2u,3u-.5left_stem)
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4352+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.49 ...x1l=lft x2l=hround max(2u,3u-.5left_stem);
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.50 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.50 filldraw stroke z1e--
                          z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.50 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.50 filldraw stroke z1e--
                          z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.50 filldraw stroke z1e--
                          z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.75x1l+0.875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.59 x5r=hround(w-1.5u);
                         x10r=hround(w-u);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5x1l+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.59 x5r=hround(w-1.5u); x10r=hround(w-u);
                                          
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.60 if serifs:
                right_curve=cap_curve-stem_corr; x4=.5[x1,w-1.5u];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   ..
l.64 fill stroke z3e..
                      super_arc.e(4,5) & super_arc.e(5,6)..z7e;  % upper lobe
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   ..
l.64 fill stroke z3e..
                      super_arc.e(4,5) & super_arc.e(5,6)..z7e;  % upper lobe
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.64 fill stroke z3e..
                      super_arc.e(4,5) & super_arc.e(5,6)..z7e;  % upper lobe
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z8e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   ..
l.65 fill stroke z8e..
                      super_arc.e(9,10) & super_arc.e(10,11)..z12e;  % lower...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   ..
l.65 fill stroke z8e..
                      super_arc.e(9,10) & super_arc.e(10,11)..z12e;  % lower...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.65 fill stroke z8e..
                      super_arc.e(9,10) & super_arc.e(10,11)..z12e;  % lower...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.66 if serifs:
                nodish_serif(1,2,a,1/3,cap_jut,b,1/3,.5cap_jut);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.68 math_fit(
              0,.5ic#); penlabels(1,2,3,4,5,6,7,8,9,10,11,12); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.68 math_fit(
              0,.5ic#); penlabels(1,2,3,4,5,6,7,8,9,10,11,12); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [66]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter C"
l.70 cmchar "The letter C"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter C"
l.70 cmchar "The letter C"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.71 if serifs:
                beginchar("C",13u#,cap_height#,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 11.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.89 else: beginchar("C",11.5u#,cap_height#,0)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.89 else: beginchar("C",11.5u#,cap_height#,0)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.90  italcorr cap_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant-0.5u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.90  italcorr cap_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.91  adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.91  adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.92  pickup fine.nib;
                       pos1(1.2flare,80); pos2(slab,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.92  pickup fine.nib;
                       pos1(1.2flare,80); pos2(slab,90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.92  pickup fine.nib; pos1(
                            1.2flare,80); pos2(slab,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.92  pickup fine.nib; pos1(
                            1.2flare,80); pos2(slab,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.92  pickup fine.nib; pos1(1.2flare,80); pos2(
                                               slab,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.92  pickup fine.nib; pos1(1.2flare,80); pos2(
                                               slab,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.93  pos3(
           cap_curve,180); pos4(slab,270); pos5(flare,275);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.93  pos3(
           cap_curve,180); pos4(slab,270); pos5(flare,275);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.93  pos3(cap_curve,180); pos4(
                                slab,270); pos5(flare,275);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.93  pos3(cap_curve,180); pos4(
                                slab,270); pos5(flare,275);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.93  pos3(cap_curve,180); pos4(slab,270); pos5(
                                                flare,275);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.93  pos3(cap_curve,180); pos4(slab,270); pos5(
                                                flare,275);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -1.1u+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.94  rt x1r=hround(w-1.1u);
                             x2=x4=.5w+1.25u;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.8x2-0.5cap_curve
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.95  lft x3r=hround max(u,2u-.5cap_curve)
                                          ; rt x5r=hround(w-.9u);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.8x2+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.95  lft x3r=hround max(u,2u-.5cap_curve);
                                            rt x5r=hround(w-.9u);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.72x2+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.95 ...x(u,2u-.5cap_curve); rt x5r=hround(w-.9u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.97 ...; bot y5r=vround .08h-oo; y5l:=good.y y5l;
                                                   x5l:=good.x x5l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.97 ....08h-oo; y5l:=good.y y5l; x5l:=good.x x5l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.rterm.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.98  filldraw stroke rterm.e(
                              2,1,right,.9,4) & super_arc.e(2,3)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.rterm.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.98  filldraw stroke rterm.e(
                              2,1,right,.9,4) & super_arc.e(2,3)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.rterm.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.98  filldraw stroke rterm.e(
                              2,1,right,.9,4) & super_arc.e(2,3)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.98  filldraw stroke rterm.e(
                              2,1,right,.9,4) & super_arc.e(2,3)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.98  filldraw stroke rterm.e(
                              2,1,right,.9,4) & super_arc.e(2,3)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.100 math_fit(
               -.3cap_height#*slant-.5u#,.5ic#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.100 math_fit(
               -.3cap_height#*slant-.5u#,.5ic#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [67]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter D"
l.103 cmchar "The letter D"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter D"
l.103 cmchar "The letter D"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.104 beginchar("D",13.5u#,cap_height#,0)
                                         ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.104 beginchar("D",13.5u#,cap_height#,0)
                                         ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.105 italcorr .7cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant-0.5u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.105 italcorr .7cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.106 adjust_fit(
                 cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.106 adjust_fit(
                 cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.107 pickup tiny.nib;
                       pos1(cap_stem',0); pos2(cap_stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.107 pickup tiny.nib;
                       pos1(cap_stem',0); pos2(cap_stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.107 pickup tiny.nib; pos1(
                            cap_stem',0); pos2(cap_stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.107 pickup tiny.nib; pos1(
                            cap_stem',0); pos2(cap_stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.107 pickup tiny.nib; pos1(cap_stem',0); pos2(
                                               cap_stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.107 pickup tiny.nib; pos1(cap_stem',0); pos2(
                                               cap_stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5cap_stem'+0.5u_
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.108 ...x1l=lft x2l=hround max(2u,3u-.5cap_stem')
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5885+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.108 ...1l=lft x2l=hround max(2u,3u-.5cap_stem');
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5x1l+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.114 z7r=bot z2; x4=x6=.5w+.25u; x5r=hround(w-u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   ..
l.116 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   ..
l.116 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.116 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.117 if serifs:
                 nodish_serif(1,2,a,1/3,cap_jut,b,1/3,.5cap_jut);  % upper s...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.119 math_fit(
               0,ic#-.5u#); penlabels(1,2,3,4,5,6,7); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 math_fit(
               0,ic#-.5u#); penlabels(1,2,3,4,5,6,7); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [68]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter E"
l.121 cmchar "The letter E"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter E"
l.121 cmchar "The letter E"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -width_adj#+12u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.122 beginchar("E",12u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.122 beginchar("E",12u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.123 italcorr cap_height#*slant-
                                 beak_jut#-.5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -beak_jut#+slant-0.5u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.123 italcorr cap_height#*slant-beak_jut#-.5u#;
                                                
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.124 adjust_fit(
                 cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.124 adjust_fit(
                 cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.125 h:=vround(h-stem_corr);
                             
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.126 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.126 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.126 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.126 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.126 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.126 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5cap_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.127 lft x1l=lft x2l=hround max(2u,3u-.5cap_stem)
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5477+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.127 ...x1l=lft x2l=hround max(2u,3u-.5cap_stem);
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.128 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.128 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.128 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.128 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.128 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.129 pickup crisp.nib;
                        pos3(slab,90); pos4(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.129 pickup crisp.nib;
                        pos3(slab,90); pos4(hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.129 pickup crisp.nib; pos3(
                             slab,90); pos4(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.129 pickup crisp.nib; pos3(
                             slab,90); pos4(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.129 pickup crisp.nib; pos3(slab,90); pos4(
                                            hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.129 pickup crisp.nib; pos3(slab,90); pos4(
                                            hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5x1l+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.130 top y3r=h; x3=x1; rt x4r=hround(w-u);
                                            y4=good.y(y3l-beak)-eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -beak+y3l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.130 ... rt x4r=hround(w-u); y4=good.y(y3l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.131 arm(
          3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.131 arm(
          3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.132 pos5(
           cap_bar,-90); pos6(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.132 pos5(
           cap_bar,-90); pos6(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.132 pos5(cap_bar,-90); pos6(
                              hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.132 pos5(cap_bar,-90); pos6(
                              hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5cap_bar-0.17334cap_curve+0.17334right_curve+0.76001
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.133 top y5l=vround(.52[y2,y1]+.5cap_bar);
                                            x5=x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.134 pos0(
           cap_bar,90); pos7(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.134 pos0(
           cap_bar,90); pos7(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.134 pos0(cap_bar,90); pos7(
                             hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.134 pos0(cap_bar,90); pos7(
                             hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.136 if serifs:
                 rt x6r=hround(w-4.4u+.5hair); y6=good.y(y5l+.6beak)+eps;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.75x1l+0.875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.138 else: rt x6r=hround(w-1.5u);
                                   y6=y5l+eps; rt x9r=hround(w-.75u); fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.375x1l+0.6875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.138 ...1.5u); y6=y5l+eps; rt x9r=hround(w-.75u);
                                                   fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.139 arm(
          5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm ...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.139 arm(
          5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm ...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.139 arm(5,6,f,beak_darkness,0); arm(
                                      0,7,g,beak_darkness,0);  % middle arm ...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.139 arm(5,6,f,beak_darkness,0); arm(
                                      0,7,g,beak_darkness,0);  % middle arm ...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.140 pos8(
           slab if not serifs:+2stem_corr fi,-90); pos9(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.140 pos8(
           slab if not serifs:+2stem_corr fi,-90); pos9(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.140 ... if not serifs:+2stem_corr fi,-90); pos9(
                                                  hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.140 ... if not serifs:+2stem_corr fi,-90); pos9(
                                                  hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y8l+1.16667y3l-1.16667y4+1.08276
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.141 bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+
                                               eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.142 arm(
          8,9,h,beak_darkness,1.5beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.142 arm(
          8,9,h,beak_darkness,1.5beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.143 if serifs:
                 nodish_serif(1,2,a,1/3,cap_jut,b,1/3,.5cap_jut);  % upper s...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.145 math_fit(
               0,.5ic#); penlabels(0,1,2,3,4,5,6,7,8,9); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.145 math_fit(
               0,.5ic#); penlabels(0,1,2,3,4,5,6,7,8,9); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(linearform)> ...ule((0,(EXPR0)),(w,(EXPR0)));
                                                   ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
The expression shown above has the wrong type to be output.

 [69]
>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...; penlabels(0,1,2,3,4,5,6,7,8,9); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter F"
l.147 cmchar "The letter F"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter F"
l.147 cmchar "The letter F"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -width_adj#+11.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.148 ...char("F",11.5u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.148 ...char("F",11.5u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.149 italcorr cap_height#*slant-
                                 beak_jut#-.25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -beak_jut#+slant-0.25u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.149 italcorr cap_height#*slant-beak_jut#-.25u#;
                                                 
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.150 adjust_fit(
                 cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.150 adjust_fit(
                 cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.151 h:=vround(h-stem_corr);
                             
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.152 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.152 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.152 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.152 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.152 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.152 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5cap_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.153 lft x1l=lft x2l=hround max(2u,3u-.5cap_stem)
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5780+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.153 ...x1l=lft x2l=hround max(2u,3u-.5cap_stem);
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.155 pickup crisp.nib;
                        pos3(slab,90); pos4(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.155 pickup crisp.nib;
                        pos3(slab,90); pos4(hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.155 pickup crisp.nib; pos3(
                             slab,90); pos4(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.155 pickup crisp.nib; pos3(
                             slab,90); pos4(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.155 pickup crisp.nib; pos3(slab,90); pos4(
                                            hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.155 pickup crisp.nib; pos3(slab,90); pos4(
                                            hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.375x1l+0.6875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.156 top y3r=h; x3=x1; rt x4r=hround(w-.75u);
                                               y4=good.y(y3l-beak)-eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y3l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.156 ... x4r=hround(w-.75u); y4=good.y(y3l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.157 arm(
          3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.157 arm(
          3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.158 pos5(
           cap_bar,-90); pos6(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.158 pos5(
           cap_bar,-90); pos6(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.158 pos5(cap_bar,-90); pos6(
                              hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.158 pos5(cap_bar,-90); pos6(
                              hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5cap_bar-0.16667cap_curve+0.16667right_curve+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.159 top y5l=vround(.5[y2,y1]+.5cap_bar);
                                           x5=x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.160 pos0(
           cap_bar,90); pos7(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.160 pos0(
           cap_bar,90); pos7(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.160 pos0(cap_bar,90); pos7(
                             hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.160 pos0(cap_bar,90); pos7(
                             hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.162 if serifs:
                 rt x6r=hround(w-4u+.5hair); y6=good.y(y5l+.6beak)+eps;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.75x1l+0.875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.163 else: rt x6r=hround(w-1.5u);
                                   y6=y5l+eps; fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.164 arm(
          5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm ...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 arm(
          5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm ...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.164 arm(5,6,f,beak_darkness,0); arm(
                                      0,7,g,beak_darkness,0);  % middle arm ...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 arm(5,6,f,beak_darkness,0); arm(
                                      0,7,g,beak_darkness,0);  % middle arm ...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.165 if serifs:
                 nodish_serif(1,2,a,1/3,cap_jut,b,1/3,.5cap_jut);  % upper s...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.167 math_fit(
               0,ic#-2.5u#); penlabels(0,1,2,3,4,5,6,7); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.167 math_fit(
               0,ic#-2.5u#); penlabels(0,1,2,3,4,5,6,7); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(linearform)> ...ule((0,(EXPR0)),(w,(EXPR0)));
                                                   ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> -0.33333cap_curve+0.33333right_curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
The expression shown above has the wrong type to be output.

 [70]
>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.33333cap_curve+0.33333right_curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.167 ...5u#); penlabels(0,1,2,3,4,5,6,7); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter G"
l.169 cmchar "The letter G"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter G"
l.169 cmchar "The letter G"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.170 if serifs:
                 beginchar("G",14u#,cap_height#,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 12u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.197 else: beginchar("G",12u#,cap_height#,0)
                                             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.197 else: beginchar("G",12u#,cap_height#,0)
                                             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.198  italcorr cap_height#*slant-
                                  .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant-0.5u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.198  italcorr cap_height#*slant-.5u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.199  adjust_fit(
                  0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.199  adjust_fit(
                  0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.200  pickup fine.nib;
                        pos1(1.2flare,80); pos2(slab,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.200  pickup fine.nib;
                        pos1(1.2flare,80); pos2(slab,90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.200  pickup fine.nib; pos1(
                             1.2flare,80); pos2(slab,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.200  pickup fine.nib; pos1(
                             1.2flare,80); pos2(slab,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.200  pickup fine.nib; pos1(1.2flare,80); pos2(
                                                slab,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.200  pickup fine.nib; pos1(1.2flare,80); pos2(
                                                slab,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.201  pos3(
            cap_curve,180); pos4(slab,270); pos5(flare,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.201  pos3(
            cap_curve,180); pos4(slab,270); pos5(flare,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.201  pos3(cap_curve,180); pos4(
                                 slab,270); pos5(flare,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.201  pos3(cap_curve,180); pos4(
                                 slab,270); pos5(flare,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.201  pos3(cap_curve,180); pos4(slab,270); pos5(
                                                 flare,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.201  pos3(cap_curve,180); pos4(slab,270); pos5(
                                                 flare,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -1.35u+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.202  rt x1r=hround(w-1.35u);
                               x2=x4=.5w+u;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.74074x1r-0.5cap_curve+0.37036
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.203  lft x3r=hround max(u,2u-.5cap_curve)
                                           ; rt x5l=hround(w-1.2u);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.74074x1r+0.87036
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.203  lft x3r=hround max(u,2u-.5cap_curve);
                                             rt x5l=hround(w-1.2u);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.88889x1r+0.05557
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.203 ...u,2u-.5cap_curve); rt x5l=hround(w-1.2u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.rterm.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.206  filldraw stroke rterm.e(
                               2,1,right,.9,4)&super_arc.e(2,3)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.rterm.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.206  filldraw stroke rterm.e(
                               2,1,right,.9,4)&super_arc.e(2,3)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.rterm.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.206  filldraw stroke rterm.e(
                               2,1,right,.9,4)&super_arc.e(2,3)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.206  filldraw stroke rterm.e(
                               2,1,right,.9,4)&super_arc.e(2,3)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.206  filldraw stroke rterm.e(
                               2,1,right,.9,4)&super_arc.e(2,3)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.208  pos0(
            stem,0); pos7(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.208  pos0(
            stem,0); pos7(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.208  pos0(stem,0); pos7(
                          stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.208  pos0(stem,0); pos7(
                          stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.35x_height+0.65bar_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.209 ...top y0=1+vround .35[bar_height,x_height];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z0e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.210  filldraw stroke z0e--
                            z7e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z0e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.210  filldraw stroke z0e--
                            z7e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z0e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.210  filldraw stroke z0e--
                            z7e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.210  filldraw stroke z0e--
                            z7e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.210  filldraw stroke z0e--
                            z7e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.211  pos8(
            cap_bar,90); pos9(cap_bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.211  pos8(
            cap_bar,90); pos9(cap_bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.211  pos8(cap_bar,90); pos9(
                              cap_bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.211  pos8(cap_bar,90); pos9(
                              cap_bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.74074x1r+0.87036
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.212  z0r=z9r; y8=y9; lft x8=hround x4;
                                        
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z8e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.213  filldraw stroke z8e--
                            z9e;  % bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z8e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.213  filldraw stroke z8e--
                            z9e;  % bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z8e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.213  filldraw stroke z8e--
                            z9e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.213  filldraw stroke z8e--
                            z9e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.213  filldraw stroke z8e--
                            z9e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.214  math_fit(
                -.3cap_height#*slant-.5u#,.5ic#); fi
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.214  math_fit(
                -.3cap_height#*slant-.5u#,.5ic#); fi
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [71]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter H"
l.217 cmchar "The letter H"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter H"
l.217 cmchar "The letter H"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> width_adj#+13u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.218 beginchar("H",13u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.218 beginchar("H",13u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.219 italcorr cap_height#*slant-
                                 cap_serif_fit#+cap_jut#-2.5u#+min(.5cap_ste...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5cap_stem#+u#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(u#)> if(EXPR0)<u_:
                       u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.219 ...f_fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5cap_stem#+cap_jut#-cap_serif_fit#+slant-2.5u#
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.219 ..._fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.220 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.220 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.221 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.221 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.221 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.221 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.221 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.221 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.222 pos3(
           cap_stem,0); pos4(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.222 pos3(
           cap_stem,0); pos4(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.222 pos3(cap_stem,0); pos4(
                             cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.222 pos3(cap_stem,0); pos4(
                             cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5cap_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.223 lft x1l=lft x2l=hround max(2u,3u-.5cap_stem)
                                                  ; x3=x4=w-x1;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4763+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.223 ...x1l=lft x2l=hround max(2u,3u-.5cap_stem);
                                                   x3=x4=w-x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.225 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.225 filldraw stroke z1e--
                           z2e; % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.225 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.225 filldraw stroke z1e--
                           z2e; % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.225 filldraw stroke z1e--
                           z2e; % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.226 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.226 filldraw stroke z3e--
                           z4e; % right stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.226 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.226 filldraw stroke z3e--
                           z4e; % right stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.226 filldraw stroke z3e--
                           z4e; % right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.229 fill stroke z5e--
                       z6e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.229 fill stroke z5e--
                       z6e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.229 fill stroke z5e--
                       z6e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.230 if serifs:
                 numeric inner_jut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.237 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.237 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [72]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter I"
l.239 cmchar "The letter I"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter I"
l.239 cmchar "The letter I"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.33333u_+cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.240 beginchar("I",max(6u#,4u#+cap_stem#)
                                          ,cap_height#,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5573
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.240 ..."I",max(6u#,4u#+cap_stem#),cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.240 ..."I",max(6u#,4u#+cap_stem#),cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.241 italcorr cap_height#*slant-
                                 .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.25u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.241 italcorr cap_height#*slant-.25u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.242 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.243 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.243 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.243 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.243 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.243 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.243 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5cap_stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.244 lft x1l=lft x2l=hround(.5w-.5cap_stem);
                                              top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.245 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.245 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.245 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.245 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.245 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.246 if serifs:
                 dish_serif(1,2,a,1/3,1.05cap_jut,b,1/3,1.05cap_jut);  % upp...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.248 math_fit(
               0,.5ic#); penlabels(1,2); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.248 math_fit(
               0,.5ic#); penlabels(1,2); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [73]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter J"
l.250 cmchar "The letter J"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter J"
l.250 cmchar "The letter J"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 9u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.251 beginchar("J",9u#,cap_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.251 beginchar("J",9u#,cap_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.252 italcorr cap_height#*slant-
                                 cap_serif_fit#
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> u#-0.5cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(u#)> if(EXPR0)<u_:
                       u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.253  +.75cap_jut#-2.5u#+min(.5cap_stem#,u#)
                                             ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -2.5u#+0.5cap_stem#+0.75cap_jut#-cap_serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.253  +.75cap_jut#-2.5u#+min(.5cap_stem#,u#);
                                              
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.254 adjust_fit(
                 0,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.254 adjust_fit(
                 0,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.255 pickup tiny.nib;
                       pos1(cap_stem',0); pos2(cap_stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.255 pickup tiny.nib;
                       pos1(cap_stem',0); pos2(cap_stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.255 pickup tiny.nib; pos1(
                            cap_stem',0); pos2(cap_stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255 pickup tiny.nib; pos1(
                            cap_stem',0); pos2(cap_stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.255 pickup tiny.nib; pos1(cap_stem',0); pos2(
                                               cap_stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255 pickup tiny.nib; pos1(cap_stem',0); pos2(
                                               cap_stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -2u+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.256 top y1=h; rt x1r=hround(w-2u);
                                     x2=x1; y2=.21h;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.257 if serifs:
                 pos3(vair,-90); pos4(cap_hair,-180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.263 else: filldraw stroke z1e--
                                 z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.263 else: filldraw stroke z1e--
                                 z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.263 else: filldraw stroke z1e--
                                 z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.263 else: filldraw stroke z1e--
                                 z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.263 else: filldraw stroke z1e--
                                 z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.264  pickup fine.nib;
                        pos3(cap_stem',0); z3=z2;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.264  pickup fine.nib;
                        pos3(cap_stem',0); z3=z2;
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.264  pickup fine.nib; pos3(
                             cap_stem',0); z3=z2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.264  pickup fine.nib; pos3(
                             cap_stem',0); z3=z2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.265  pos4(
            flare,angle(6.5u,-h)); pos5(1.1flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.265  pos4(
            flare,angle(6.5u,-h)); pos5(1.1flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.265  pos4(flare,angle(6.5u,-h)); pos5(
                                        1.1flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.265  pos4(flare,angle(6.5u,-h)); pos5(
                                        1.1flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.375x1r+0.6875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.266 ...=-o; x4r=.5[x5r,x3r]; lft x5r=hround.75u;
                                                   bot y5r=vround.06h-o;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.267  filldraw stroke z3e{
                           down}....term.e(4,5,left,1,4); fi % arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.267  filldraw stroke z3e{
                           down}....term.e(4,5,left,1,4); fi % arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.267  filldraw stroke z3e{
                           down}....term.e(4,5,left,1,4); fi % arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.267  filldraw stroke z3e{
                           down}....term.e(4,5,left,1,4); fi % arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.267  filldraw stroke z3e{
                           down}....term.e(4,5,left,1,4); fi % arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.268 math_fit(
               0,.5ic#-.5u#); penlabels(1,2,3,4,5); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.268 math_fit(
               0,.5ic#-.5u#); penlabels(1,2,3,4,5); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [74]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter K"
l.270 cmchar "The letter K"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter K"
l.270 cmchar "The letter K"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.271 beginchar("K",13.5u#,cap_height#,0)
                                         ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.271 beginchar("K",13.5u#,cap_height#,0)
                                         ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.272 italcorr cap_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.272 italcorr cap_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.273 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.273 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.275 if serifs:
                 right_jut=.6cap_jut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.277 pickup tiny.nib;
                       pos1(fudged.cap_stem,0); pos2(fudged.cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.277 pickup tiny.nib;
                       pos1(fudged.cap_stem,0); pos2(fudged.cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.277 pickup tiny.nib; pos1(
                            fudged.cap_stem,0); pos2(fudged.cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.277 pickup tiny.nib; pos1(
                            fudged.cap_stem,0); pos2(fudged.cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.277 ... tiny.nib; pos1(fudged.cap_stem,0); pos2(
                                                  fudged.cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.277 ... tiny.nib; pos1(fudged.cap_stem,0); pos2(
                                                  fudged.cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5fudged.cap_stem+0.5u_
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.278 ...t x2l=hround max(2u,3u-.5fudged.cap_stem)
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4571+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.278 ... x2l=hround max(2u,3u-.5fudged.cap_stem);
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.279 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.279 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.279 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.279 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.279 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -tiny.breadth+fudged.cap_stem-cap_curve+right_curve
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.280 ...(tiny.breadth,fudged.cap_stem-3stem_corr)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> fudged.hair.if.hefty:
                                -3stem_corr.fi
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.281 ...adth,fudged.hair if hefty:-3stem_corr fi)
                                                  ;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fudged.hair-stem2
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(fudged.hair)> if(EXPR0)>u_:
                                u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.281 ...adth,fudged.hair if hefty:-3stem_corr fi)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> r-0.25x1l-0.4tiny-0.33333cap_curve+0.33333right_curve+0.5cap_hair-0.5apex_co
rr+l+0.8cap_jut+cap_stem+0.62502
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.282 ... rt x3r=hround(r-letter_fit-u-right_jut);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x3r+0.125x1l-0.0625
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.283 ... x6r=hround(r-letter_fit-.75u-right_jut);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.285 alpha1=diag_ratio(
                        1,.5(stem1-tiny),y3-y4,x3r-x4);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha
>> stem2-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.286 penpos3(alpha1*(stem1-tiny),
                                  0); penpos4(whatever,-90);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.287 alpha2=diag_ratio(
                        1,.5(stem2-tiny),y1-y6,x6r-x1);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha
>> stem2-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.288 penpos6(alpha2*(stem2-tiny),
                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE2241
>> (-x4+x3r-0.5stem2+0.5tiny,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
<for(l)> ...UFFIX0)=z3'(SUFFIX0)+whatever*(z3-z4);
                                                  z5(SUFFIX0)=z6'(SUFFIX0)+w...
l.290 ...+whatever*(z1-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE599
>> (0.5x3'l-0.5x3r+0.25stem2-0.125x1l-0.25tiny+0.0625,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   =
<for(l)> ...UFFIX0)=z6'(SUFFIX0)+whatever*(z1-z6)=
                                                  whatever[z3,z4]; ENDFOR
l.290 ...+whatever*(z1-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5276
>> (0.5x3'l-0.5x3r+0.25stem2-0.25tiny,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
<for(l)> ...FIX0)+whatever*(z1-z6)=whatever[z3,z4]
                                                  ; ENDFOR
l.290 ...+whatever*(z1-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4832
>> (-0.5x3'l+0.5x3r-0.25stem2+0.25tiny,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
<for(r)> ...UFFIX0)=z3'(SUFFIX0)+whatever*(z3-z4);
                                                  z5(SUFFIX0)=z6'(SUFFIX0)+w...
l.290 ...+whatever*(z1-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4170
>> (0.5x3'l-0.5x3r+0.25stem2-0.125x1l-0.25tiny+0.0625,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   =
<for(r)> ...UFFIX0)=z6'(SUFFIX0)+whatever*(z1-z6)=
                                                  whatever[z3,z4]; ENDFOR
l.290 ...+whatever*(z1-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4969
>> (0.5x3'l-0.5x3r+0.25stem2-0.25tiny,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
<for(r)> ...FIX0)+whatever*(z1-z6)=whatever[z3,z4]
                                                  ; ENDFOR
l.290 ...+whatever*(z1-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.5x3'l+0.5x3r-0.25stem2+0.25tiny,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   +
l.292 z3'r=z3r+penoffset z3-z4 of currentpen+
                                             whatever*(z3-z4);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (x3r,0)
>> pen
! Not implemented: (unknown pair)+(pen).
<to be read again> 
                   +
l.292 z3'r=z3r+penoffset z3-z4 of currentpen+
                                             whatever*(z3-z4);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4625
>> (-0.5x3'l+0.5x3r-0.25stem2+0.25tiny,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.292 ...set z3-z4 of currentpen+whatever*(z3-z4);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pen
>> (-0.5x3'l+0.5x3r-0.25stem2+0.25tiny,0)
! Not implemented: (pen)+(unknown pair).
<to be read again> 
                   ;
l.292 ...set z3-z4 of currentpen+whatever*(z3-z4);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.33333x3r+0.16667stem2-0.125x1l-0.16667tiny+0.0625,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   +
l.294 z6'r=z6r+penoffset z1-z6 of currentpen+
                                             whatever*(z1-z6);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (x3r+0.125x1l-0.0625,0)
>> pen
! Not implemented: (unknown pair)+(pen).
<to be read again> 
                   +
l.294 z6'r=z6r+penoffset z1-z6 of currentpen+
                                             whatever*(z1-z6);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4922
>> (-0.33333x3r+0.16667stem2-0.125x1l-0.16667tiny+0.0625,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.294 ...set z1-z6 of currentpen+whatever*(z1-z6);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pen
>> (-0.33333x3r+0.16667stem2-0.125x1l-0.16667tiny+0.0625,0)
! Not implemented: (pen)+(unknown pair).
<to be read again> 
                   ;
l.294 ...set z1-z6 of currentpen+whatever*(z1-z6);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0.0625x1l-0.03125,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   +
l.295 z6'l=z6l+penoffset z6-z1 of currentpen+
                                             whatever*(z1-z6);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.5stem2-0.0625x1l+0.5tiny+0.03125,0)
>> pen
! Not implemented: (unknown pair)+(pen).
<to be read again> 
                   +
l.295 z6'l=z6l+penoffset z6-z1 of currentpen+
                                             whatever*(z1-z6);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5589
>> (-0.0625x1l+0.03125,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.295 ...set z6-z1 of currentpen+whatever*(z1-z6);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pen
>> (-0.0625x1l+0.03125,0)
! Not implemented: (pen)+(unknown pair).
<to be read again> 
                   ;
l.295 ...set z6-z1 of currentpen+whatever*(z1-z6);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.125x1l+0.0625
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.296 fill z4r--
                diag_end(4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.296 fill z4r--diag_end(
                         4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.296 fill z4r--diag_end(
                         4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.296 fill z4r--diag_end(
                         4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.125x1l+0.0625
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.297 fill z5l--
                diag_end(5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.297 fill z5l--diag_end(
                         5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.297 fill z5l--diag_end(
                         5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.297 fill z5l--diag_end(
                         5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.298 if serifs:
                 numeric inner_jut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.305 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.305 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [75]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter L"
l.307 cmchar "The letter L"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter L"
l.307 cmchar "The letter L"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 11u#-width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.308 beginchar("L",11u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.308 beginchar("L",11u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.309 adjust_fit(
                 cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.309 adjust_fit(
                 cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.310 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.310 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.310 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.310 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.310 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.310 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5cap_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.311 lft x1l=lft x2l=hround max(2u,3u-.5cap_stem)
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5351+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.311 ...x1l=lft x2l=hround max(2u,3u-.5cap_stem);
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.312 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.312 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.312 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.312 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.312 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.313 pickup crisp.nib;
                        pos3(slab,-90); pos4(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.313 pickup crisp.nib;
                        pos3(slab,-90); pos4(hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.313 pickup crisp.nib; pos3(
                             slab,-90); pos4(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.313 pickup crisp.nib; pos3(
                             slab,-90); pos4(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.313 pickup crisp.nib; pos3(slab,-90); pos4(
                                             hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.313 pickup crisp.nib; pos3(slab,-90); pos4(
                                             hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.375x1l+0.6875
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.314 ...4=y3l+7/6beak+eps; rt x4r=hround(w-.75u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.315 arm(
          3,4,e,1.2beak_darkness,beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.315 arm(
          3,4,e,1.2beak_darkness,beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.316 if serifs:
                 dish_serif(1,2,a,1/3,cap_jut,b,1/3,1.25cap_jut);  % upper s...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.318 math_fit(
               0,u#); penlabels(1,2,3,4); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.318 math_fit(
               0,u#); penlabels(1,2,3,4); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [76]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter M"
l.320 cmchar "The letter M"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter M"
l.320 cmchar "The letter M"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 16u#+width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.321 beginchar("M",16u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.321 beginchar("M",16u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.322 italcorr cap_height#*slant-
                                 cap_serif_fit#+cap_jut#-2.5u#+min(.5cap_ste...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> u#-0.5cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(u#)> if(EXPR0)<u_:
                       u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.322 ...f_fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -2.5u#+0.5cap_stem#+cap_jut#-cap_serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.322 ..._fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.323 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.323 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fudged.hair+0.33333cap_curve-0.33333right_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.325 stem1=hround(fudged.hair+stem_corr);
                                          
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fudged.cap_stem-1.33333cap_curve+1.33333right_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.326 stem2=hround(fudged.cap_stem-4stem_corr);
                                               
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.25stem2+fudged.hair-0.25fudged.cap_stem+0.375
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.327 stem3=hround(fudged.hair-stem_corr);
                                          
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.75stem2+0.25fudged.cap_stem+0.125
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.328 stem4=hround(fudged.cap_stem-3stem_corr);
                                               
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stem2-fudged.hair-0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
l.329 if stem4<stem1:
                      stem4:=stem1; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.330 pickup tiny.nib;
                       pos1(stem1,0); pos2(stem1,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.330 pickup tiny.nib;
                       pos1(stem1,0); pos2(stem1,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.330 pickup tiny.nib; pos1(
                            stem1,0); pos2(stem1,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.330 pickup tiny.nib; pos1(
                            stem1,0); pos2(stem1,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.330 pickup tiny.nib; pos1(stem1,0); pos2(
                                           stem1,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.330 pickup tiny.nib; pos1(stem1,0); pos2(
                                           stem1,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.331 pos3(
           stem4,0); pos4(stem4,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.331 pos3(
           stem4,0); pos4(stem4,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.331 pos3(stem4,0); pos4(
                          stem4,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.331 pos3(stem4,0); pos4(
                          stem4,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_+0.375stem2+0.125fudged.cap_stem+0.0625
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.332 ...x3r; rt x3r=hround min(w-2u,w-3u+.5stem4)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5466+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.332 ...3r; rt x3r=hround min(w-2u,w-3u+.5stem4);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.334 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.334 filldraw stroke z1e--
                           z2e; % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.334 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.334 filldraw stroke z1e--
                           z2e; % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.334 filldraw stroke z1e--
                           z2e; % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.335 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.335 filldraw stroke z3e--
                           z4e; % right stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.335 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.335 filldraw stroke z3e--
                           z4e; % right stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.335 filldraw stroke z3e--
                           z4e; % right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.338 if hefty:
                y6=if monospace: vround 1/3h else: o fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> %CAPSULE5043
>> (0.5x8r-0.5x1-0.125stem2-0.5fudged.hair+0.125fudged.cap_stem-0.1875,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.351 else: y6=0; z0=whatever[z5r,z6r]
                                      =whatever[z7l,z8l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4888
>> (0.5x8r-0.5x1-0.125stem2-0.5fudged.hair+0.125fudged.cap_stem-0.1875,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.351 ...0; z0=whatever[z5r,z6r]=whatever[z7l,z8l]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x1
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.352  fill z5l..
                 {z6-z5}diag_in(5l,6l,1,6r)..diag_out(7l,1,7r,8r){z8-z7}
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.44444x8r-0.44444x1-0.44444fudged.hair+0.11111fudged.cap_stem-0.16666
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   }
l.352  fill z5l..{z6-z5}
                        diag_in(5l,6l,1,6r)..diag_out(7l,1,7r,8r){z8-z7}
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_in
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.352  fill z5l..{z6-z5}diag_in(
                                5l,6l,1,6r)..diag_out(7l,1,7r,8r){z8-z7}
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.352  fill z5l..{z6-z5}diag_in(
                                5l,6l,1,6r)..diag_out(7l,1,7r,8r){z8-z7}
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.352  fill z5l..{z6-z5}diag_in(
                                5l,6l,1,6r)..diag_out(7l,1,7r,8r){z8-z7}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.355 if serifs:
                 serif(1,2,a,1/3,-cap_jut);  % upper left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.359 math_fit(
               0,max(.5ic#-.5u#,0));
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.359 math_fit(
               0,max(.5ic#-.5u#,0));
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [77]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter N"
l.362 cmchar "The letter N"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter N"
l.362 cmchar "The letter N"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#+width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.363 beginchar("N",13u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.363 beginchar("N",13u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.364 italcorr cap_height#*slant-
                                 cap_serif_fit#+cap_jut#-2.5u#+min(.5cap_ste...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> u#-0.5cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(u#)> if(EXPR0)<u_:
                       u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.364 ...f_fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -2.5u#+0.5cap_stem#+cap_jut#-cap_serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.364 ..._fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.365 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.365 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.25stem2+fudged.hair+0.25fudged.cap_stem+0.62502
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.366 ... thin_stem=hround(fudged.hair+stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.367 pickup tiny.nib;
                       pos1(thin_stem,0); pos2(thin_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.367 pickup tiny.nib;
                       pos1(thin_stem,0); pos2(thin_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.367 pickup tiny.nib; pos1(
                            thin_stem,0); pos2(thin_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.367 pickup tiny.nib; pos1(
                            thin_stem,0); pos2(thin_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.367 pickup tiny.nib; pos1(thin_stem,0); pos2(
                                               thin_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.367 pickup tiny.nib; pos1(thin_stem,0); pos2(
                                               thin_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.368 pos3(
           thin_stem,0); pos4(thin_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.368 pos3(
           thin_stem,0); pos4(thin_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.368 pos3(thin_stem,0); pos4(
                              thin_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.368 pos3(thin_stem,0); pos4(
                              thin_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.369 pickup tiny.nib;
                       top y1=top y3=h; bot y2=bot y4=0;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.369 pickup tiny.nib;
                       top y1=top y3=h; bot y2=bot y4=0;
(That was another `errmessage'.)

>> 0.5u_+0.5fudged.cap_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.371 ...r=hround min(w-2u,w-3u+.5fudged.cap_stem)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4456+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.371 ...=hround min(w-2u,w-3u+.5fudged.cap_stem);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372 filldraw stroke z1e--
                           z2e; % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372 filldraw stroke z1e--
                           z2e; % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.372 filldraw stroke z1e--
                           z2e; % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.373 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.373 filldraw stroke z3e--
                           z4e; % right stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.373 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.373 filldraw stroke z3e--
                           z4e; % right stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.373 filldraw stroke z3e--
                           z4e; % right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.374 if hefty:
                penpos5(fudged.cap_stem,0); penpos6(fudged.cap_stem,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.75stem2-0.75fudged.cap_stem-tiny+cap_stem-0.37553
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.386  z7=z6l+(max(eps,cap_stem-3stem_corr-tiny)
                                                ,0) rotated (angle(z5l-z6l)-...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> (-x6r+x1l,-y6l+y5r)
! Not implemented: angle(unknown pair).
<to be read again> 
                   -
l.386 ...em_corr-tiny),0) rotated (angle(z5l-z6l)-
                                                  90);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> (-x6r+x1l,-y6l+y5r)
>> 90
! Not implemented: (unknown pair)-(known numeric).
<to be read again> 
                   )
l.386 ...corr-tiny),0) rotated (angle(z5l-z6l)-90)
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE1652
>> (-x6r+x1l,-y6l+y5r)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.387  z5r=z7+whatever*(z5l-z6l);
                                  z6r=z7+whatever*(z5l-z6l);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE3643
>> (-x6r+x1l,-y6l+y5r)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.387 ...ver*(z5l-z6l); z6r=z7+whatever*(z5l-z6l);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.388  filldraw stroke z5e..
                            z6e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.388  filldraw stroke z5e..
                            z6e; fi  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.388  filldraw stroke z5e..
                            z6e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.388  filldraw stroke z5e..
                            z6e; fi  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.388  filldraw stroke z5e..
                            z6e; fi  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.389 if serifs:
                 if hefty: serif(1,2,a,1/3,-cap_jut); % upper left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.393 math_fit(
               0,max(.5ic#-.5u#,0)); penlabels(1,1',2,3,4,4',5,6,7); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.393 math_fit(
               0,max(.5ic#-.5u#,0)); penlabels(1,1',2,3,4,4',5,6,7); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [78]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter O"
l.395 cmchar "The letter O"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter O"
l.395 cmchar "The letter O"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 14u#-width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.396 beginchar("O",14u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.396 beginchar("O",14u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.397 italcorr .7cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.397 italcorr .7cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.398 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.398 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.5vair_corr+vair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ,
l.399 ...',90); penpos3(vround(vair+1.5vair_corr),
                                                  -90);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.401 if monospace:
                    x2r=hround 1.5u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> u+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.403 else: x2r=hround u;
                          fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path path_.l
>> pulled_super_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_super_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.409 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.410 math_fit(
               -.3cap_height#*slant-.5u#,ic#-.5u#); penlabels(1,2,3,4); endc...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.410 math_fit(
               -.3cap_height#*slant-.5u#,ic#-.5u#); penlabels(1,2,3,4); endc...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [79]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter P"
l.412 cmchar "The letter P"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter P"
l.412 cmchar "The letter P"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 12u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.413 beginchar("P",12u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.413 beginchar("P",12u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.75cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.414 italcorr .75cap_height#*slant-
                                    .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.414 italcorr .75cap_height#*slant-.5u#;
                                         
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.415 adjust_fit(
                 cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.415 adjust_fit(
                 cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.416 pickup tiny.nib;
                       penpos1(cap_stem'-tiny,0); penpos2(cap_stem-tiny,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.416 pickup tiny.nib;
                       penpos1(cap_stem'-tiny,0); penpos2(cap_stem-tiny,0);
(That was another `errmessage'.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.417 pos0(
           cap_stem',0); pos0'(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.417 pos0(
           cap_stem',0); pos0'(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.417 pos0(cap_stem',0); pos0'(
                               cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.417 pos0(cap_stem',0); pos0'(
                               cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5cap_stem'
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.418 lft x1l=hround max(2u,3u-.5cap_stem')
                                           ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5324+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.418 lft x1l=hround max(2u,3u-.5cap_stem');
                                             top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.421 penpos5(cap_curve if hefty:
                                 -3stem_corr fi,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5x1r-0.5tiny+0.5cap_stem'+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.424 ...und .5h; x4=x6=.5w+.75u; x5r=hround(w-u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426 filldraw stroke z1e--
                           z0e--z0'e--z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426 filldraw stroke z1e--
                           z0e--z0'e--z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426 filldraw stroke z1e--
                           z0e--z0'e--z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426 filldraw stroke z1e--
                           z0e--z0'e--z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.426 filldraw stroke z1e--
                           z0e--z0'e--z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   ..
l.427 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   ..
l.427 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.427 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.428 if serifs:
                 nodish_serif(1,0,a,1/3,cap_jut,b,1/3,.5cap_jut);  % upper s...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.430 math_fit(
               0,ic#-2.5u#); penlabels(0,1,2,3,4,5,6,7); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.430 math_fit(
               0,ic#-2.5u#); penlabels(0,1,2,3,4,5,6,7); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [80]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter Q"
l.432 cmchar "The letter Q"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter Q"
l.432 cmchar "The letter Q"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 14u#-width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.433 ...14u#-width_adj#,cap_height#,comma_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.433 ...14u#-width_adj#,cap_height#,comma_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> comma_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.433 ...14u#-width_adj#,cap_height#,comma_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.434 italcorr .7cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.434 italcorr .7cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.435 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.435 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.25stem2+0.25fudged.cap_stem+0.62502
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.436 ...; light_curve=cap_curve-hround stem_corr;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.439 if monospace:
                    x2r=hround 1.5u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> u+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.441 else: x2r=hround u;
                          fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path path_.l
>> pulled_super_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_super_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.446 ...ed_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.447 pickup tiny.nib;
                      
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.447 pickup tiny.nib;
                      
(That was another `errmessage'.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.448 if hefty:
                penpos5(1.2(.5[cap_bar,light_curve]),0); penpos6(1.2light_cu...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos3'
! Isolated expression.
<to be read again> 
                   (
l.452 else: pos3'(
                  vair,270); pos5(vair,180); pos6(vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.452 else: pos3'(
                  vair,270); pos5(vair,180); pos6(vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.452 else: pos3'(vair,270); pos5(
                                  vair,180); pos6(vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.452 else: pos3'(vair,270); pos5(
                                  vair,180); pos6(vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.452 else: pos3'(vair,270); pos5(vair,180); pos6(
                                                  vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.452 else: pos3'(vair,270); pos5(vair,180); pos6(
                                                  vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.453  pos7(
            cap_curve,85); penpos8(eps,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.453  pos7(
            cap_curve,85); penpos8(eps,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5vair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.454  z3'=z3; x6=x3; top y6r=vround(.2h+.5vair);
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -1.25u-0.5vair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.455  lft x5r=hround(.5w-1.25u-.5vair);
                                         y5=.5[y3,y6];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.72x5r+0.36vair-0.35999
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.456 ...=2/3[x6,x8]; y8=0; rt x8=hround(x4r+.1u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.457  filldraw stroke z3'e{
                            left}...z5e{up}...z6e{right}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.457  filldraw stroke z3'e{
                            left}...z5e{up}...z6e{right}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.457  filldraw stroke z3'e{
                            left}...z5e{up}...z6e{right}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.457  filldraw stroke z3'e{
                            left}...z5e{up}...z6e{right}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.457  filldraw stroke z3'e{
                            left}...z5e{up}...z6e{right}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.459 math_fit(
               -.3cap_height#*slant-.5u#,ic#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.459 math_fit(
               -.3cap_height#*slant-.5u#,ic#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [81]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter R"
l.462 cmchar "The letter R"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter R"
l.462 cmchar "The letter R"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.463 beginchar("R",if serifs:
                               12u#+.5max(2u#,cap_curve#)
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 12.5u#-0.5width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.464  else:12.5u#-.5width_adj# fi,cap_height#,0)
                                                 ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.464  else:12.5u#-.5width_adj# fi,cap_height#,0)
                                                 ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.75cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.465 italcorr .75cap_height#*slant-
                                     if serifs: 1.75 else: .5 fi\\ u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.465 italcorr .75cap_height#*slant- if serifs:
                                                1.75 else: .5 fi\\ u#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.465 ...*slant- if serifs: 1.75 else: .5 fi\\ u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.466 adjust_fit(
                 cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.466 adjust_fit(
                 cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.467 pickup tiny.nib;
                       pos1(cap_stem',0); pos2(cap_stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.467 pickup tiny.nib;
                       pos1(cap_stem',0); pos2(cap_stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.467 pickup tiny.nib; pos1(
                            cap_stem',0); pos2(cap_stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.467 pickup tiny.nib; pos1(
                            cap_stem',0); pos2(cap_stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.467 pickup tiny.nib; pos1(cap_stem',0); pos2(
                                               cap_stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.467 pickup tiny.nib; pos1(cap_stem',0); pos2(
                                               cap_stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5u_-0.5cap_stem'
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.468 ...x1l=lft x2l=hround max(2u,3u-.5cap_stem')
                                                  ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4412+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.468 ...1l=lft x2l=hround max(2u,3u-.5cap_stem');
                                                   top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.469 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.469 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.469 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.469 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.469 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.471 penpos5(cap_curve if hefty:
                                 -3stem_corr fi,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5vair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.474 x7=x2; y7l=vround(.5h+.5vair);
                                     x4=x6;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.475 if serifs:
                 x4=.5w-.5u; x5r=hround(w-2.25u);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5x1l+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.476 else: x4=.5w+.5u; x5r=hround(w-u);
                                         fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   ..
l.478 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   ..
l.478 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   ..
l.478 fill stroke z3e..
                       pulled_arc.e(4,5) & pulled_arc.e(5,6)..z7e;  % lobe
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.479 if serifs:
                 pos6'(vair,-90); pos0(cap_stem,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.25x1l+0.625
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.488  x8=x6+.5u; y8=y6; x9r=hround(w-.5u);
                                            y9=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5x1l-0.25stem2+0.25fudged.cap_stem-0.5cap_stem-0.12498
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.489  fill z8l--
                 diag_end(8l,9l,.5,1,9r,8r)--z8r--cycle; fi  % tail
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.489  fill z8l--diag_end(
                          8l,9l,.5,1,9r,8r)--z8r--cycle; fi  % tail
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.489  fill z8l--diag_end(
                          8l,9l,.5,1,9r,8r)--z8r--cycle; fi  % tail
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.489  fill z8l--diag_end(
                          8l,9l,.5,1,9r,8r)--z8r--cycle; fi  % tail
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.490 math_fit(
               0,.75ic#); penlabels(0,1,2,3,4,5,6,7,8,9,10); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.490 math_fit(
               0,.75ic#); penlabels(0,1,2,3,4,5,6,7,8,9,10); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [82]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter S"
l.492 cmchar "The letter S"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter S"
l.492 cmchar "The letter S"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 10u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.493 beginchar("S",10u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.493 beginchar("S",10u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.494 italcorr cap_height#*slant-
                                 u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.494 italcorr cap_height#*slant-u#;
                                    
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.495 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.495 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> (50u,0)
! Not implemented: angle(unknown pair).
<to be read again> 
                   ;
l.496 numeric theta; theta=90-angle(50u,h);
                                            slope:=-h/50u;  % angle at middle
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 90
>> (50u,0)
! Not implemented: (known numeric)-(unknown pair).
<to be read again> 
                   ;
l.496 numeric theta; theta=90-angle(50u,h);
                                            slope:=-h/50u;  % angle at middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> theta
>> (50u,0)
! Equation cannot be performed (numeric=pair).
<to be read again> 
                   ;
l.496 numeric theta; theta=90-angle(50u,h);
                                            slope:=-h/50u;  % angle at middle
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> 0
>> 50u
! Not implemented: (known numeric)/(unknown numeric).
<to be read again> 
                   ;
l.496 ...ta; theta=90-angle(50u,h); slope:=-h/50u;
                                                    % angle at middle
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.497 numeric s_slab; s_slab=if serifs:
                                       slab else:vround .2[slab,cap_stem] fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.8slab+0.2cap_stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.497 ...fs:slab else:vround .2[slab,cap_stem] fi;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> cap_ess-fine.breadth
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(cap_ess)> if(EXPR0)>u_:
                            u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.498 numeric ess'; ess'=max(fine.breadth,cap_ess)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.499 pickup fine.nib;
                       pos2(max(fine.breadth,s_slab-vround vair_corr),-90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.499 pickup fine.nib;
                       pos2(max(fine.breadth,s_slab-vround vair_corr),-90);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.499 pickup fine.nib; pos2(
                            max(fine.breadth,s_slab-vround vair_corr),-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.499 pickup fine.nib; pos2(
                            max(fine.breadth,s_slab-vround vair_corr),-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.500 pos0(
           ess',theta); pos7(s_slab,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.500 pos0(
           ess',theta); pos7(s_slab,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.500 pos0(ess',theta); pos7(
                             s_slab,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.500 pos0(ess',theta); pos7(
                             s_slab,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.501 x2+x7=2x0=w; x7-x2=if serifs:
                                    u else: 0 fi; top y2l=h+o; bot y7r=-o;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.02slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.502 y0=.52h; lft x3l=hround u;
                                 rt x6r=hround(w-u);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.02slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.502 ...2h; lft x3l=hround u; rt x6r=hround(w-u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5ess'+0.40001slab+0.1cap_stem+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
l.503 x3r-x3l=x6r-x6l=hround .5[s_slab,ess']-
                                             fine;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.504 ellipse_set(
                  2l,3l,4l,0l); ellipse_set(2r,3r,4r,0r); y3=y3r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.504 ellipse_set(
                  2l,3l,4l,0l); ellipse_set(2r,3r,4r,0r); y3=y3r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.504 ellipse_set(2l,3l,4l,0l); ellipse_set(
                                            2r,3r,4r,0r); y3=y3r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.504 ellipse_set(2l,3l,4l,0l); ellipse_set(
                                            2r,3r,4r,0r); y3=y3r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.505 ellipse_set(
                  7l,6l,5l,0l); ellipse_set(7r,6r,5r,0r); y6=y6r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.505 ellipse_set(
                  7l,6l,5l,0l); ellipse_set(7r,6r,5r,0r); y6=y6r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.505 ellipse_set(7l,6l,5l,0l); ellipse_set(
                                            7r,6r,5r,0r); y6=y6r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.505 ellipse_set(7l,6l,5l,0l); ellipse_set(
                                            7r,6r,5r,0r); y6=y6r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.506 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.506 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.506 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.506 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.506 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.508 if serifs:
                 pos1(hair,180); pos8(hair,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.523 else: pos1(
                 1.2flare,-100); pos8(1.2flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.523 else: pos1(
                 1.2flare,-100); pos8(1.2flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.523 else: pos1(1.2flare,-100); pos8(
                                      1.2flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.523 else: pos1(1.2flare,-100); pos8(
                                      1.2flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -x1+x1l-0.035slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.524  x1l=good.x(x1l+w-1.75u-rt x1);
                                      lft x8r=hround .8u;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.016slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.524 ...x(x1l+w-1.75u-rt x1); lft x8r=hround .8u;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.526  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.526  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.526  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.526  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.526  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.527  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.527  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.527  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.527  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.527  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.528 math_fit(
               0,.5ic#); penlabels(0,1,1',2,3,4,5,6,7,8,8',9,10); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.528 math_fit(
               0,.5ic#); penlabels(0,1,1',2,3,4,5,6,7,8,8',9,10); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [83]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter T"
l.530 cmchar "The letter T"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter T"
l.530 cmchar "The letter T"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#-width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.531 beginchar("T",13u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.531 beginchar("T",13u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.532 italcorr cap_height#*slant-
                                 beak_jut#-.25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.25u#-beak_jut#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.532 italcorr cap_height#*slant-beak_jut#-.25u#;
                                                 
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.533 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.533 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.534 h:=vround(h-2stem_corr);
                              
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.535 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.535 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.535 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.535 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.535 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.535 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5cap_stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.536 lft x1l=lft x2l=hround(.5w-.5cap_stem);
                                              top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.537 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.537 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.537 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.537 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.537 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.538 pickup crisp.nib;
                        pos3(slab,90); pos4(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.538 pickup crisp.nib;
                        pos3(slab,90); pos4(hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.538 pickup crisp.nib; pos3(
                             slab,90); pos4(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.538 pickup crisp.nib; pos3(
                             slab,90); pos4(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.538 pickup crisp.nib; pos3(slab,90); pos4(
                                            hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.538 pickup crisp.nib; pos3(slab,90); pos4(
                                            hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.013slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.539 top y3r=h; x3=x1; rt x4r=hround(w-.65u);
                                               y4=good.y(y3l-beak)-eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y3l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.539 ... x4r=hround(w-.65u); y4=good.y(y3l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.540 arm(
          3,4,e,beak_darkness,.7beak_jut);  % right arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.540 arm(
          3,4,e,beak_darkness,.7beak_jut);  % right arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.541 pos5(
           hair,180); x5=w-x4; y5=y4;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.541 pos5(
           hair,180); x5=w-x4; y5=y4;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.542 arm(
          3,5,f,beak_darkness,-.7beak_jut);  % left arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.542 arm(
          3,5,f,beak_darkness,-.7beak_jut);  % left arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.543 if serifs:
                 dish_serif(2,1,c,1/3,1.414cap_jut,d,1/3,1.414cap_jut);  % l...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.545 math_fit(
               -.75cap_height#*slant,ic#-2.5u#); penlabels(1,2,3,4,5,6); end...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.545 math_fit(
               -.75cap_height#*slant,ic#-2.5u#); penlabels(1,2,3,4,5,6); end...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Unsuitable expression.
<to be read again> 
                   ;
<for(linearform)> ...ule((0,(EXPR0)),(w,(EXPR0)));
                                                   ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

 [84]
>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5stem2-0.5fudged.cap_stem+0.24997
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.545 ...#-2.5u#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter U"
l.547 cmchar "The letter U"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter U"
l.547 cmchar "The letter U"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#+0.5width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.548 ...char("U",13u#+.5width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.548 ...char("U",13u#+.5width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.549 italcorr cap_height#*slant-
                                 cap_serif_fit#+cap_jut#-2.5u#+min(.5cap_ste...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> u#-0.5cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(u#)> if(EXPR0)<u_:
                       u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.549 ...f_fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -2.5u#+0.5cap_stem#+cap_jut#-cap_serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.549 ..._fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.550 if monospace:
                    adjust_fit(cap_serif_fit#-.5u#,cap_serif_fit#-.5u#)
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.551 else: adjust_fit(
                       cap_serif_fit#,cap_serif_fit#) fi;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.551 else: adjust_fit(
                       cap_serif_fit#,cap_serif_fit#) fi;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.552 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.552 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.552 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.552 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.552 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.552 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.553 pos2'(
            cap_stem,180); z2'=z2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.553 pos2'(
            cap_stem,180); z2'=z2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.554 pos3(
           cap_band,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.554 pos3(
           cap_band,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.555 pos4(
           cap_hair,0); pos5(cap_hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.555 pos4(
           cap_hair,0); pos5(cap_hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.555 pos4(cap_hair,0); pos5(
                             cap_hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.555 pos4(cap_hair,0); pos5(
                             cap_hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.02slope-0.5cap_stem
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.558 lft x1l=hround max(2u,3u-.5cap_stem)
                                          ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.04slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.558 lft x1l=hround max(2u,3u-.5cap_stem);
                                           
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.559 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.559 filldraw stroke z1e--
                           z2e; % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.559 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.559 filldraw stroke z1e--
                           z2e; % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.559 filldraw stroke z1e--
                           z2e; % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.560 filldraw stroke pulled_arc.e(
                                   2',3)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.560 filldraw stroke pulled_arc.e(
                                   2',3)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.560 filldraw stroke pulled_arc.e(
                                   2',3)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.560 filldraw stroke pulled_arc.e(
                                   2',3)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.560 filldraw stroke pulled_arc.e(
                                   2',3)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.562 if serifs:
                 dish_serif(1,2,a,1/3,cap_jut,b,1/3,cap_jut); % left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.564 math_fit(
               -cap_serif_fit#-.3cap_height#*slant-min(cap_height#*slant,u#),
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.564 math_fit(
               -cap_serif_fit#-.3cap_height#*slant-min(cap_height#*slant,u#),
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [85]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter V"
l.567 cmchar "The letter V"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter V"
l.567 cmchar "The letter V"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.568 beginchar("V",13u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.568 beginchar("V",13u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.569 italcorr cap_height#*slant+
                                 .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.25u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.569 italcorr cap_height#*slant+.25u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.570 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.570 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.573 right_stem=min(cap_hair if hefty:
                                       -2stem_corr fi,left_stem);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.25stem2-0.25fudged.cap_stem-cap_hair+cap_stem-0.12502
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.573 ...p_hair if hefty:-2stem_corr fi,left_stem)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.576 alpha=diag_ratio(
                       2,right_stem,y1-y2,x4r-x1l-apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha2
>> 0.25stem2-0.25fudged.cap_stem+cap_stem-0.12502
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.577 penpos1(alpha*left_stem,
                              0); penpos2(alpha*left_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> 0.25stem2-0.25fudged.cap_stem+cap_stem-0.12502
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.577 ...ha*left_stem,0); penpos2(alpha*left_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> cap_hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.578 penpos3(alpha*right_stem,
                               0); penpos4(alpha*right_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> cap_hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.578 ...*right_stem,0); penpos4(alpha*right_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4442
>> (0.005slope+0.25stem2-0.25fudged.cap_stem-apex_corr+0.05cap_jut+cap_stem-0.1
25,-apex_o)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.579 z0=whatever[z1r,z2r]
                          =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5539
>> (0.005slope+0.25stem2-0.25fudged.cap_stem-apex_corr+0.05cap_jut+cap_stem-0.1
25,apex_o)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.579 z0=whatever[z1r,z2r]=whatever[z3l,z4l]
                                            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -cap_notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.580 if y0>cap_notch_cut:
                           y0:=cap_notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.25stem2-0.25fudged.cap_stem-0.5cap_hair-0.5apex_corr+cap_stem-0.12502
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.584 else: fill z0--
                     diag_end(0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.584 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.584 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.584 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.586 if serifs:
                 numeric inner_jut; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.592 math_fit(
               .75u#-cap_height#*slant,ic#-4u#); penlabels(0,1,2,3,4); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.592 math_fit(
               .75u#-cap_height#*slant,ic#-4u#); penlabels(0,1,2,3,4); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [86]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter W"
l.594 cmchar "The letter W"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter W"
l.594 cmchar "The letter W"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 18u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.595 beginchar("W",18u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.595 beginchar("W",18u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.596 italcorr cap_height#*slant+
                                 .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.25u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.596 italcorr cap_height#*slant+.25u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.597 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.597 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.601 stem4=min(fudged.hair if hefty:
                                     -2stem_corr fi,stem1);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.33333cap_curve-fudged.hair+fudged.cap_stem+0.33333right_curve-0.00002
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.601 ...udged.hair if hefty:-2stem_corr fi,stem1)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.602 stem2=stem4 if hefty:
                           -2stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.603 stem3=stem1 if hefty:
                           -2stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.605 ... y2=y3=y6=y7=-apex_o; y4=y5=if monospace:
                                                   vround .6 fi\\ h;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> monospace
>> hefty
! Not implemented: (unknown numeric)or(unknown numeric).
<to be read again> 
                   :
l.606 mid_corr=if monospace or hefty:
                                     -apex_corr else: 1/3jut fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.606 mid_corr=if monospace or hefty:
                                     -apex_corr else: 1/3jut fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.607 alpha=diag_ratio(
                       4,stem2-stem3+stem4,y1-y2,x8r-x1l+mid_corr-2apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha2
>> -0.33333cap_curve+fudged.cap_stem+0.33333right_curve-0.00002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.608 penpos1(alpha*stem1,
                          0); penpos2(alpha*stem1,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.33333cap_curve+fudged.cap_stem+0.33333right_curve-0.00002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.608 penpos1(alpha*stem1,0); penpos2(alpha*stem1,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.609 penpos3(alpha*stem2,
                          0); penpos4(alpha*stem2,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.609 penpos3(alpha*stem2,0); penpos4(alpha*stem2,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.33333cap_curve+fudged.cap_stem+0.33333right_curve-0.00002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.610 penpos5(alpha*stem3,
                          0); penpos6(alpha*stem3,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.33333cap_curve+fudged.cap_stem+0.33333right_curve-0.00002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.610 penpos5(alpha*stem3,0); penpos6(alpha*stem3,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.611 penpos7(alpha*stem4,
                          0); penpos8(alpha*stem4,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.611 penpos7(alpha*stem4,0); penpos8(alpha*stem4,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.16667jut-0.5cap_curve-0.005slope-fudged.hair+0.5fudged.cap_stem+0.5right_c
urve+0.5cap_hair-0.5apex_corr+cap_stem-0.00005
! Not implemented: floor(unknown numeric).
<to be read again> 
                   ;
l.612 x4l-x1l=floor(x4l-x1l+.5(x5r+mid_corr-x4r));
                                                   % |x5r+mid_corr| $\approx...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> %CAPSULE4210
>> (0.08333jut-0.25cap_curve-0.0025slope-0.5fudged.hair+0.25fudged.cap_stem+0.2
5right_curve+0.25cap_hair-0.75apex_corr+0.5cap_stem-0.00002,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.613 z23=whatever[z1r,z2r]
                           =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4338
>> (0.08333jut-0.25cap_curve-0.0025slope-0.5fudged.hair+0.25fudged.cap_stem+0.2
5right_curve+0.25cap_hair-0.75apex_corr+0.5cap_stem-0.00003,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.613 z23=whatever[z1r,z2r]=whatever[z3l,z4l]
                                             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5623
>> (0.5x23-0.16667cap_curve-0.0025slope+0.16667right_curve+0.25cap_hair-0.75ape
x_corr+0.5cap_stem-0.00005,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.614 z45=whatever[z3r,z4r]
                           =whatever[z5l,z6l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE1377
>> (0.5x23-0.16667cap_curve-0.0025slope+0.16667right_curve+0.25cap_hair-0.75ape
x_corr+0.5cap_stem-0.00002,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.614 z45=whatever[z3r,z4r]=whatever[z5l,z6l]
                                             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5253
>> (0.5x23+0.25jut-0.16667cap_curve-0.0025slope+0.16667right_curve+0.25cap_hair
+0.5cap_stem,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.615 z67=whatever[z5r,z6r]
                           =whatever[z7l,z8l]; upper_notch=y4-cap_notch_cut;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE3442
>> (0.5x23+0.25jut-0.16667cap_curve-0.0025slope+0.16667right_curve+0.25cap_hair
+0.5cap_stem-0.00003,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.615 z67=whatever[z5r,z6r]=whatever[z7l,z8l]
                                             ; upper_notch=y4-cap_notch_cut;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.616 fill diag_end(
                    1l,2l,1,1,3r,4r){z4-z3}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.616 fill diag_end(
                    1l,2l,1,1,3r,4r){z4-z3}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.616 fill diag_end(
                    1l,2l,1,1,3r,4r){z4-z3}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.626 if serifs:
                 numeric inner_jut[]; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.640 math_fit(
               .75u#-cap_height#*slant,ic#-2.5u#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.640 math_fit(
               .75u#-cap_height#*slant,ic#-2.5u#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [87]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter X"
l.643 cmchar "The letter X"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter X"
l.643 cmchar "The letter X"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.644 beginchar("X",13u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.644 beginchar("X",13u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.645 italcorr cap_height#*slant-
                                 .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.25u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.645 italcorr cap_height#*slant-.25u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.646 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.646 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.66667cap_curve+0.66667right_curve-cap_hair+cap_stem-0.00003
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.648 ...tem-2stem_corr; stem2=min(cap_hair,stem1)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.649 outer_jut=.75cap_jut; xjut= if serifs:
                                             (stem1-stem2)/4 else: 0 fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.653 alpha1=diag_ratio(
                        1,stem1,h,x4r-x1l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.654 alpha2=diag_ratio(
                        1,stem2,h,x2r-x3l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha
>> -0.66667cap_curve+0.66667right_curve+cap_stem-0.00003
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.655 penpos1(alpha1*stem1,
                           0); penpos2(alpha2*stem2,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> cap_hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.655 ...s1(alpha1*stem1,0); penpos2(alpha2*stem2,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> cap_hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.656 penpos3(alpha2*stem2,
                           0); penpos4(alpha1*stem1,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> -0.66667cap_curve+0.66667right_curve+cap_stem-0.00003
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.656 ...s3(alpha2*stem2,0); penpos4(alpha1*stem1,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.657 if hefty:
                z0=whatever[z1,z4]=whatever[z2,z3];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.665 else: fill diag_end(
                          4r,1r,.5,1,1l,4l)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.665 else: fill diag_end(
                          4r,1r,.5,1,1l,4l)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.665 else: fill diag_end(
                          4r,1r,.5,1,1l,4l)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.667  fill diag_end(
                     2l,3l,.5,1,3r,2r)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.667  fill diag_end(
                     2l,3l,.5,1,3r,2r)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.667  fill diag_end(
                     2l,3l,.5,1,3r,2r)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.669 if serifs:
                 numeric inner_jut[]; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.682 math_fit(
               0,.5ic#); penlabels(0,1,2,3,4,12,13,24,34); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.682 math_fit(
               0,.5ic#); penlabels(0,1,2,3,4,12,13,24,34); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [88]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter Y"
l.684 cmchar "The letter Y"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter Y"
l.684 cmchar "The letter Y"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 13u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.685 beginchar("Y",13u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.685 beginchar("Y",13u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.686 italcorr cap_height#*slant+
                                 .45u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.45u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.686 italcorr cap_height#*slant+.45u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.687 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.687 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.690 right_stem=min(cap_hair if hefty:
                                       -2stem_corr fi,left_stem);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.33333cap_curve+0.33333right_curve-cap_hair+cap_stem-0.00002
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.690 ...p_hair if hefty:-2stem_corr fi,left_stem)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.16667cap_curve-0.16667right_curve-0.5cap_stem+0.50002
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.692 x2l=x5l=hround(.5w-.5left_stem);
                                       x3r=x5r; y1=y4=h; y2=y3=y5=.4h;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.16667jut-0.16667cap_curve+0.004slope+0.16667right_curve+0.5cap_hair+0.5cap
_stem+0.49998
>> 0
! Not implemented: (unknown numeric)++(known numeric).
<to be read again> 
                   )
l.693 dy=y1-y2; alpha=((x2l-x1l)++dy)
                                     /dy;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0
! Division by zero.
<to be read again> 
                   ;
l.693 dy=y1-y2; alpha=((x2l-x1l)++dy)/dy;
                                         
You're trying to divide the quantity shown above the error
message by zero. I'm going to divide it by one instead.

>> %CAPSULE5173
>> (0.16667jut-0.16667cap_curve+0.004slope+0.16667right_curve+0.5cap_hair+0.5ca
p_stem+0.49998,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.697 z0=whatever[z1r,z2r]
                          =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE2101
>> (0.16667jut-0.16667cap_curve+0.004slope+0.16667right_curve+0.5cap_hair+0.5ca
p_stem-0.50003,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.697 z0=whatever[z1r,z2r]=whatever[z3l,z4l]
                                            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -cap_notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.698 if y0>y2+cap_notch_cut:
                              y0:=y2+cap_notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.05556jut+0.00133slope+0.16667cap_hair+0.33333
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.702 else: fill z0--
                     diag_end(0,4l,1,1,4r,3r)--z5r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.702 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--z5r
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.702 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--z5r
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.702 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--z5r
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.705 if serifs:
                 numeric inner_jut; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.712 math_fit(
               .5u#-cap_height#*slant,ic#-4u#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.712 math_fit(
               .5u#-cap_height#*slant,ic#-4u#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [89]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter Z"
l.715 cmchar "The letter Z"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter Z"
l.715 cmchar "The letter Z"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 11u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.716 beginchar("Z",11u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.716 beginchar("Z",11u#,cap_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.717 italcorr cap_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.717 italcorr cap_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.718 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.718 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.720 if hefty:
                arm_thickness1=Vround(slab-vair_corr); arm_thickness2=slab;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> slab+vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.722 ...b; arm_thickness2=vround(slab+vair_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.724 pickup tiny.nib;
                       x3l=x4l=w-x1r=w-x2r; lft x3l=hround u;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.724 pickup tiny.nib;
                       x3l=x4l=w-x1r=w-x2r; lft x3l=hround u;
(That was another `errmessage'.)

>> 0.02slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.724 ...b; x3l=x4l=w-x1r=w-x2r; lft x3l=hround u;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.66667slab
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.66667slab)> if(EXPR0)<u_:
                                 u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.725 top y1=h; y2=min(y1,h-2/3arm_thickness1)
                                              ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.66667slab+0.66667vair_corr+0.33333
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.726 bot y4=0; y3=max(y4,2/3arm_thickness2)
                                            ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.727 numeric alpha; alpha=diag_ratio(
                                      1,z_stem-tiny,y2-y3,x2r-x3l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha2
>> -0.1jut+0.3cap_curve-0.0024slope-tiny-0.3right_curve+0.1vair-0.3cap_hair+0.3
0002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.728 penpos1(alpha*(z_stem-tiny),
                                  0); penpos2(alpha*(z_stem-tiny),0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.1jut+0.3cap_curve-0.0024slope-tiny-0.3right_curve+0.1vair-0.3cap_hair+0.3
0002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.728 ...em-tiny),0); penpos2(alpha*(z_stem-tiny),
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.1jut+0.3cap_curve-0.0024slope-tiny-0.3right_curve+0.1vair-0.3cap_hair+0.3
0002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.729 penpos3(alpha*(z_stem-tiny),
                                  0); penpos4(alpha*(z_stem-tiny),0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.1jut+0.3cap_curve-0.0024slope-tiny-0.3right_curve+0.1vair-0.3cap_hair+0.3
0002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.729 ...em-tiny),0); penpos4(alpha*(z_stem-tiny),
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.1jut+0.3cap_curve+0.0376slope-tiny-0.3right_curve+0.1vair-0.3cap_hair+1.
30002,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   ;
l.730 ...lta; delta=penoffset z3-z2 of currentpen;
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (xpart delta,ypart delta)
>> pen
! Equation cannot be performed (pair=pen).
<to be read again> 
                   ;
l.730 ...lta; delta=penoffset z3-z2 of currentpen;
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> 0.1jut-0.3cap_curve-0.0176slope+tiny+0.3right_curve-0.1vair+0.3cap_hair-0.80
002
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.731 fill top lft z1l--
                        z2l+delta---z3l+delta..lft z3l---lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> xpart delta+0.1jut-0.3cap_curve-0.0176slope+tiny+0.3right_curve-0.1vair+0.3c
ap_hair-0.80002
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.731 fill top lft z1l--z2l+delta---
                                    z3l+delta..lft z3l---lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.731 fill top lft z1l--z2l+delta---
                                    z3l+delta..lft z3l---lft z4l..bot z4l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> xpart delta+0.02slope+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.731 fill top lft z1l--z2l+delta---z3l+delta..
                                               lft z3l---lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
l.731 fill top lft z1l--z2l+delta---z3l+delta..
                                               lft z3l---lft z4l..bot z4l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.02slope+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.731 ...ft z1l--z2l+delta---z3l+delta..lft z3l---
                                                  lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.02slope+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.731 ...2l+delta---z3l+delta..lft z3l---lft z4l..
                                                  bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.02slope+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.732  ---
          bot rt z4r--z3r-delta---z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.1jut+0.3cap_curve+0.0176slope-tiny-0.3right_curve+0.1vair-0.3cap_hair+0.8
0002
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.732  ---bot rt z4r--
                      z3r-delta---z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -xpart delta-0.1jut+0.3cap_curve+0.0176slope-tiny-0.3right_curve+0.1vair-0.3
cap_hair+0.80002
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.732  ---bot rt z4r--z3r-delta---
                                  z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.732  ---bot rt z4r--z3r-delta---
                                  z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -xpart delta-0.02slope-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.732  ---bot rt z4r--z3r-delta---z2r-delta..
                                             rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
l.732  ---bot rt z4r--z3r-delta---z2r-delta..
                                             rt z2r---rt z1r..top z1r
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.02slope-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.732 ... rt z4r--z3r-delta---z2r-delta..rt z2r---
                                                  rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.02slope-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.732 ...-z3r-delta---z2r-delta..rt z2r---rt z1r..
                                                  top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.02slope-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.733  ---
          cycle;  % diagonal
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.734 pickup crisp.nib;
                        pos5(arm_thickness1,90); pos6(hair,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.734 pickup crisp.nib;
                        pos5(arm_thickness1,90); pos6(hair,180);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.734 pickup crisp.nib; pos5(
                             arm_thickness1,90); pos6(hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.734 pickup crisp.nib; pos5(
                             arm_thickness1,90); pos6(hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.734 ...crisp.nib; pos5(arm_thickness1,90); pos6(
                                                  hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.734 ...crisp.nib; pos5(arm_thickness1,90); pos6(
                                                  hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.025slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.735 top y5r=h; x5=x1; lft x6r=hround 1.25u;
                                              y6=good.y(y5l-beak)-eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y5l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.735 ...ft x6r=hround 1.25u; y6=good.y(y5l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.736 arm(
          5,6,a,beak_darkness**.8,-.4beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.736 arm(
          5,6,a,beak_darkness**.8,-.4beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.737 pos7(
           arm_thickness2,-90); pos8(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.737 pos7(
           arm_thickness2,-90); pos8(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.737 pos7(arm_thickness2,-90); pos8(
                                     hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.737 pos7(arm_thickness2,-90); pos8(
                                     hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.018slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.738 bot y7r=0; x7=x4; rt x8r=hround(w-.9u);
                                              y8=good.y(y7l+1.2beak)+eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y7l+1.2beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.738 ...8r=hround(w-.9u); y8=good.y(y7l+1.2beak)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.739 arm(
          7,8,b,beak_darkness**.9,.6beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.739 arm(
          7,8,b,beak_darkness**.9,.6beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.740 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6,7,8); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.740 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6,7,8); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [90]) (romanl.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter a"
l.12 cmchar "The letter a"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter a"
l.12 cmchar "The letter a"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 9u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.13 beginchar("a",9u#,x_height#,0)
                                   ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.13 beginchar("a",9u#,x_height#,0)
                                   ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> -2bar_height#+1.14x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.14 ...min(bar_height#,1.14x_height#-bar_height#)
                                                  ; define_pixels(bh);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.01852bh+0.33333x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.15 italcorr 1/3[bh#,x_height#]*slant+
                                       .5stem#-serif_fit#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -serif_fit#+0.5stem#-2u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.15 ...#,x_height#]*slant+.5stem#-serif_fit#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.16 adjust_fit(
                0,serif_fit# if serifs: if hair#+.5stem#>1.5u#:-.25u# fi\\fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.16 adjust_fit(
                0,serif_fit# if serifs: if hair#+.5stem#>1.5u#:-.25u# fi\\fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.17 pickup fine.nib;
                      top y3r=h+vround 1.5oo;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.17 pickup fine.nib;
                      top y3r=h+vround 1.5oo;
(That was another `errmessage'.)

>> 1.5oo+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.17 pickup fine.nib; top y3r=h+vround 1.5oo;
                                             
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.18 if serifs:
                pos1(flare,180); pos2(hair,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.22 else: pos1(
                5/7[vair,flare],95); x1l=good.x 1.5u; x1r:=good.x x1r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.22 else: pos1(
                5/7[vair,flare],95); x1l=good.x 1.5u; x1r:=good.x x1r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.03slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.22 ...pos1(5/7[vair,flare],95); x1l=good.x 1.5u;
                                                   x1r:=good.x x1r;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x1r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.22 ...re],95); x1l=good.x 1.5u; x1r:=good.x x1r;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.23  pos3(
           1/8[vair,thin_join],90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.23  pos3(
           1/8[vair,thin_join],90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.82y3r+0.18bh+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.24  x3=.5w-.2u; top y1r=vround .82[bh,top y3r];
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.25  filldraw stroke term.e(
                             3,1,left,.9,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.25  filldraw stroke term.e(
                             3,1,left,.9,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.25  filldraw stroke term.e(
                             3,1,left,.9,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.25  filldraw stroke term.e(
                             3,1,left,.9,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.25  filldraw stroke term.e(
                             3,1,left,.9,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.26 pos4(
          stem,0); rt x4r=hround(w-2.5u+.5stem); y4=1/3[bh,h];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.26 pos4(
          stem,0); rt x4r=hround(w-2.5u+.5stem); y4=1/3[bh,h];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem-0.05slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.26 pos4(stem,0); rt x4r=hround(w-2.5u+.5stem);
                                                 y4=1/3[bh,h];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.27 pos5(
          stem,0); x5=x4; y5=max(.55bh,2vair);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.27 pos5(
          stem,0); x5=x4; y5=max(.55bh,2vair);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.55bh+2vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2vair)> if(EXPR0)>u_:
                          u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.27 pos5(stem,0); x5=x4; y5=max(.55bh,2vair)
                                             ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.28 filldraw stroke super_arc.e(
                                 3,4)&z4e..z5e;  % arc and stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.28 filldraw stroke super_arc.e(
                                 3,4)&z4e..z5e;  % arc and stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.28 filldraw stroke super_arc.e(
                                 3,4)&z4e..z5e;  % arc and stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.28 filldraw stroke super_arc.e(
                                 3,4)&z4e..z5e;  % arc and stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.28 filldraw stroke super_arc.e(
                                 3,4)&z4e..z5e;  % arc and stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.29 pos6(
          .3[thin_join,vair],90); x6=x4; bot y6=bh;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.29 pos6(
          .3[thin_join,vair],90); x6=x4; bot y6=bh;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.30 pos7(
          hround(curve-2stem_corr),180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.30 pos7(
          hround(curve-2stem_corr),180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5curve+0.02slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.31 lft x7r=hround max(.5u,1.5u-.5curve)
                                         ; y7=1/3[top y8l,top y6r];
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.01slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.31 lft x7r=hround max(.5u,1.5u-.5curve);
                                           y7=1/3[top y8l,top y6r];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.32 pos8(
          vair,270); x8l=.5w-.75u; bot y8r=-oo;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.32 pos8(
          vair,270); x8l=.5w-.75u; bot y8r=-oo;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.33 pos9(
          thin_join,360); z9l=z5l;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.33 pos9(
          thin_join,360); z9l=z5l;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> %CAPSULE2974
>> (x9l+0.015slope,y9l-y8l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.34 (x,y8r)=whatever[z8l,z9l]
                              ; x8r:=max(x,x8-u);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x8-x9l-0.02slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.34 (x,y8r)=whatever[z8l,z9l]; x8r:=max(x,x8-u)
                                                ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.35 {{interim
               superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.35 {{interim
               superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z9e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.36  filldraw stroke z9e{
                          down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; % ...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z9e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.36  filldraw stroke z9e{
                          down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; % ...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z9e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.36  filldraw stroke z9e{
                          down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; % ...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.36  filldraw stroke z9e{
                          down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; % ...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.36  filldraw stroke z9e{
                          down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; % ...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.37 if serifs:
                numeric shaved_stem; shaved_stem=hround(stem-3stem_corr);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stem-0.33333cap_curve+0.33333right_curve+0.49998
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.52 ..._stem; shaved_stem=hround(stem-stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.53  pickup tiny.nib;
                       pos5'(shaved_stem,0); rt x5'r=fine.rt x5r; y5'=y5;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.53  pickup tiny.nib;
                       pos5'(shaved_stem,0); rt x5'r=fine.rt x5r; y5'=y5;
(That was another `errmessage'.)

>> pos5'
! Isolated expression.
<to be read again> 
                   (
l.53  pickup tiny.nib; pos5'(
                             shaved_stem,0); rt x5'r=fine.rt x5r; y5'=y5;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.53  pickup tiny.nib; pos5'(
                             shaved_stem,0); rt x5'r=fine.rt x5r; y5'=y5;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos10
! Isolated expression.
<to be read again> 
                   (
l.54  pos10(
            shaved_stem,0); x10=x5'; bot y10=0;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.54  pos10(
            shaved_stem,0); x10=x5'; bot y10=0;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55  filldraw stroke z5'e--
                            z10e; fi  % base of stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55  filldraw stroke z5'e--
                            z10e; fi  % base of stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55  filldraw stroke z5'e--
                            z10e; fi  % base of stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55  filldraw stroke z5'e--
                            z10e; fi  % base of stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55  filldraw stroke z5'e--
                            z10e; fi  % base of stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [97]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter b"
l.58 cmchar "The letter b"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter b"
l.58 cmchar "The letter b"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serif_fit#+10u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.59 beginchar("b",10u#+serif_fit#,asc_height#,0)
                                                 ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.59 beginchar("b",10u#+serif_fit#,asc_height#,0)
                                                 ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.60 italcorr .5x_height#*slant+
                                min(.5curve#-u#,-.25u#);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.5curve#+0.75u#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.25u#)> if(EXPR0)<u_:
                            u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.60 ... .5x_height#*slant+min(.5curve#-u#,-.25u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5curve#-u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.60 ....5x_height#*slant+min(.5curve#-u#,-.25u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.61 adjust_fit(
                serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61 adjust_fit(
                serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.62 pickup tiny.nib;
                      pos1(stem',0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.62 pickup tiny.nib;
                      pos1(stem',0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.62 pickup tiny.nib; pos1(
                           stem',0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.62 pickup tiny.nib; pos1(
                           stem',0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.62 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.62 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.63 pos0'(
           stem',0); pos0(stem,0); z0l=z0'l; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.63 pos0'(
           stem',0); pos0(stem,0); z0l=z0'l; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.63 pos0'(stem',0); pos0(
                          stem,0); z0l=z0'l; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.63 pos0'(stem',0); pos0(
                          stem,0); z0l=z0'l; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem'+0.05slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.64 lft x1l=hround(2.5u-.5stem');
                                   top y1=h;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.66 pickup fine.nib;
                      pos3(if hefty:thin_join else: hair fi,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.66 pickup fine.nib;
                      pos3(if hefty:thin_join else: hair fi,180);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.66 pickup fine.nib; pos3(
                           if hefty:thin_join else: hair fi,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.66 pickup fine.nib; pos3(
                           if hefty:thin_join else: hair fi,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.67 pos4(
          vair,90); pos5(curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.67 pos4(
          vair,90); pos5(curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.67 pos4(vair,90); pos5(
                         curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.67 pos4(vair,90); pos5(
                         curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.67 pos4(vair,90); pos5(curve,0); pos6(
                                        vair,-90); penpos7(x3l-x3r,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.67 pos4(vair,90); pos5(curve,0); pos6(
                                        vair,-90); penpos7(x3l-x3r,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -tiny.lft.x2l+x3r-x3l+0.33333edge+0.66667x0
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.68 ...3l-(lft x3r-tiny.lft x2l),1/3[rt x2,edge])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5curve+0.015slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.012slope)> if(EXPR0)<u_:
                                u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.71 rt x5r=hround min(w-1.35u+.5curve,w-.6u)
                                             ; y5=.5x_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5curve-0.027slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.71 rt x5r=hround min(w-1.35u+.5curve,w-.6u);
                                               y5=.5x_height;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y4+y6-0.25x_height-1.75bar_height+0.6vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.73 x7=x3; y7=min(y3,y6+y4-y3+.6vair)
                                      ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4478
>> (0.5serif_fit-x3l+0.01slope,y4l-y3l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.74 (x,y4r)=whatever[z3l,z4l]
                              ; x4r:=min(x,.5[x4,x5r]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x4-0.5serif_fit+0.25curve-0.0235slope+0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.74 ...=whatever[z3l,z4l]; x4r:=min(x,.5[x4,x5r])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE5114
>> (0.5serif_fit-x7r+x3r-x3l+0.006slope,y6l-0.125x_height-0.875bar_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.75 (x',y6r)=whatever[z7l,z6l]
                               ; x6r:=min(x',.5[x6,x5r]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x6-0.5serif_fit+0.25curve-0.0195slope+0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.75 ...whatever[z7l,z6l]; x6r:=min(x',.5[x6,x5r])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.76 filldraw stroke z3e{
                         up}...pulled_arc.e(4,5)&pulled_arc.e(5,6)...{up}z7e...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.76 filldraw stroke z3e{
                         up}...pulled_arc.e(4,5)&pulled_arc.e(5,6)...{up}z7e...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.76 filldraw stroke z3e{
                         up}...pulled_arc.e(4,5)&pulled_arc.e(5,6)...{up}z7e...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.76 filldraw stroke z3e{
                         up}...pulled_arc.e(4,5)&pulled_arc.e(5,6)...{up}z7e...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.76 filldraw stroke z3e{
                         up}...pulled_arc.e(4,5)&pulled_arc.e(5,6)...{up}z7e...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.77 y0=ypart(((edge,h)--
                         (edge,0))intersectionpoint(z3l{up}...{right}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.77 y0=ypart(((edge,h)--(edge,0))
                                  intersectionpoint(z3l{up}...{right}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.77 ...((edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{right}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.77 ...((edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{right}z4l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5serif_fit+0.01slope
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.77 ...0))intersectionpoint(z3l{up}...{right}z4l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> oo+x_height
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.77 ...0))intersectionpoint(z3l{up}...{right}z4l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.78 y2=ypart(((edge,h)--
                         (edge,0))intersectionpoint(z6l{left}...{up}z7l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.78 y2=ypart(((edge,h)--(edge,0))
                                  intersectionpoint(z6l{left}...{up}z7l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5serif_fit+0.006slope
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.78 ...((edge,h)--(edge,0))intersectionpoint(z6l{
                                                  left}...{up}z7l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -oo
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.78 ...((edge,h)--(edge,0))intersectionpoint(z6l{
                                                  left}...{up}z7l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x7r-x3r+x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.78 ...,0))intersectionpoint(z6l{left}...{up}z7l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.125x_height+0.875bar_height
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.78 ...,0))intersectionpoint(z6l{left}...{up}z7l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.79 pickup tiny.nib;
                      filldraw stroke z1e--z0'e--z0e--z2e;  % stem
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.79 pickup tiny.nib;
                      filldraw stroke z1e--z0'e--z0e--z2e;  % stem
(That was another `errmessage'.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.79 pickup tiny.nib; filldraw stroke z1e--
                                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.79 pickup tiny.nib; filldraw stroke z1e--
                                           z0'e--z0e--z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.79 pickup tiny.nib; filldraw stroke z1e--
                                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.79 pickup tiny.nib; filldraw stroke z1e--
                                           z0'e--z0e--z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.79 pickup tiny.nib; filldraw stroke z1e--
                                           z0'e--z0e--z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.80 pickup crisp.nib;
                       pos8(hair,0); pos7'(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.80 pickup crisp.nib;
                       pos8(hair,0); pos7'(stem,0);
(That was another `errmessage'.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.80 pickup crisp.nib; pos8(
                            hair,0); pos7'(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.80 pickup crisp.nib; pos8(
                            hair,0); pos7'(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7'
! Isolated expression.
<to be read again> 
                   (
l.80 pickup crisp.nib; pos8(hair,0); pos7'(
                                           stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.80 pickup crisp.nib; pos8(hair,0); pos7'(
                                           stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z7'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.82 filldraw stroke z7'e--
                           z8e;  % point
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z7'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.82 filldraw stroke z7'e--
                           z8e;  % point
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z7'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.82 filldraw stroke z7'e--
                           z8e;  % point
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.82 filldraw stroke z7'e--
                           z8e;  % point
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.82 filldraw stroke z7'e--
                           z8e;  % point
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.83 if serifs:
                sloped_serif.l(1,0',a,1/3,jut,serif_drop); fi  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [98]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter c"
l.86 cmchar "The letter c"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter c"
l.86 cmchar "The letter c"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 8u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.87 beginchar("c",8u#,x_height#,0)
                                   ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.87 beginchar("c",8u#,x_height#,0)
                                   ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.88 italcorr x_height#*slant-
                              .2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.2u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.88 italcorr x_height#*slant-.2u#;
                                   
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.89 adjust_fit(
                if monospace: .5u#,.5u# else: 0,0 fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.89 adjust_fit(
                if monospace: .5u#,.5u# else: 0,0 fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.90 pickup fine.nib;
                      pos2(vair',90); pos4(vair',270);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.90 pickup fine.nib;
                      pos2(vair',90); pos4(vair',270);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.90 pickup fine.nib; pos2(
                           vair',90); pos4(vair',270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90 pickup fine.nib; pos2(
                           vair',90); pos4(vair',270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.90 pickup fine.nib; pos2(vair',90); pos4(
                                           vair',270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90 pickup fine.nib; pos2(vair',90); pos4(
                                           vair',270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.5oo+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.91 x2=x4=.5(w+u); top y2r=vround(h+1.5oo);
                                             bot y4r=-oo;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.92 pos3(
          curve,180); lft x3r=hround max(.6u,1.35u-.5curve); y3=.5h;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.92 pos3(
          curve,180); lft x3r=hround max(.6u,1.35u-.5curve); y3=.5h;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5curve+0.015slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.92 ...80); lft x3r=hround max(.6u,1.35u-.5curve)
                                                  ; y3=.5h;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.012slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.92 ...0); lft x3r=hround max(.6u,1.35u-.5curve);
                                                   y3=.5h;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.93 if serifs:
                pos1(hair,0); pos0(flare,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.102 else: pos1(
                 4/7[vair',flare],80);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.102 else: pos1(
                 4/7[vair',flare],80);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.012slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.103  rt x1r=hround(w-.6u);
                             top y1r=vround .82[bar_height,top y2r];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.82y2r+0.18bar_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.103 ...; top y1r=vround .82[bar_height,top y2r];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.104  filldraw stroke term.e(
                              2,1,right,.8,4);  % upper terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.104  filldraw stroke term.e(
                              2,1,right,.8,4);  % upper terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.104  filldraw stroke term.e(
                              2,1,right,.8,4);  % upper terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.104  filldraw stroke term.e(
                              2,1,right,.8,4);  % upper terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.104  filldraw stroke term.e(
                              2,1,right,.8,4);  % upper terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.105  pos5(
            .6[vair',flare],275); rt x5r=hround(w-.5u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.105  pos5(
            .6[vair',flare],275); rt x5r=hround(w-.5u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.01slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.105 ...[vair',flare],275); rt x5r=hround(w-.5u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -y5+y5r+0.33333bar_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.106  y5r=good.y(y5r+1/3bar_height-y5);
                                         y5l:=good.y y5l; x5l:=good.x x5l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.106 ...y(y5r+1/3bar_height-y5); y5l:=good.y y5l;
                                                   x5l:=good.x x5l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.106 ...ht-y5); y5l:=good.y y5l; x5l:=good.x x5l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x4l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
<for(l)> path.p(SUFFIX0);p(SUFFIX0)=z4(SUFFIX0){
                                                right}..tension0.9and1..z5(S...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y4l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
<for(l)> path.p(SUFFIX0);p(SUFFIX0)=z4(SUFFIX0){
                                                right}..tension0.9and1..z5(S...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x5l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...){right}..tension0.9and1..z5(SUFFIX0);
                                                  if.angle.direction1of.p(SU...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...){right}..tension0.9and1..z5(SUFFIX0);
                                                  if.angle.direction1of.p(SU...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! angle(0,0) is taken as zero.
<recently read> >
                 
<for(l)> ...IX0);if.angle.direction1of.p(SUFFIX0)>
                                                  75:p(SUFFIX0):=z4(SUFFIX0)...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
The `angle' between two identical points is undefined.
I'm zeroing this one. Proceed, with fingers crossed.

>> x4r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
<for(r)> path.p(SUFFIX0);p(SUFFIX0)=z4(SUFFIX0){
                                                right}..tension0.9and1..z5(S...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.66667y2r+0.33333
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
<for(r)> path.p(SUFFIX0);p(SUFFIX0)=z4(SUFFIX0){
                                                right}..tension0.9and1..z5(S...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.01slope+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...){right}..tension0.9and1..z5(SUFFIX0);
                                                  if.angle.direction1of.p(SU...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...){right}..tension0.9and1..z5(SUFFIX0);
                                                  if.angle.direction1of.p(SU...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! angle(0,0) is taken as zero.
<recently read> >
                 
<for(r)> ...IX0);if.angle.direction1of.p(SUFFIX0)>
                                                  75:p(SUFFIX0):=z4(SUFFIX0)...
l.109 ...n atleast.9 and 1..{dir 75}z5e; fi endfor
                                                  
The `angle' between two identical points is undefined.
I'm zeroing this one. Proceed, with fingers crossed.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.110  filldraw stroke pulled_super_arc.e(
                                          2,3)(.7superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.110  filldraw stroke pulled_super_arc.e(
                                          2,3)(.7superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.110  filldraw stroke pulled_super_arc.e(
                                          2,3)(.7superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.110  filldraw stroke pulled_super_arc.e(
                                          2,3)(.7superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.110  filldraw stroke pulled_super_arc.e(
                                          2,3)(.7superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [99]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter d"
l.114 cmchar "The letter d"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter d"
l.114 cmchar "The letter d"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serif_fit#+10u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.115 beginchar("d",10u#+serif_fit#,asc_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.115 beginchar("d",10u#+serif_fit#,asc_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.116 italcorr asc_height#*slant-
                                 serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -serif_fit#+0.5stem#-2u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.116 ...asc_height#*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.117 adjust_fit(
                 0,serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.117 adjust_fit(
                 0,serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.118 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.118 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.118 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.118 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.118 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.118 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.119 pos0'(
            stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 pos0'(
            stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.119 pos0'(stem',0); pos0(
                           stem,0); z0r=z0'r; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 pos0'(stem',0); pos0(
                           stem,0); z0r=z0'r; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem'-0.05slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.120 rt x1r=hround(w-2.5u+.5stem');
                                     top y1=h;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.122 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.122 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.122 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.122 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.123 pos4(
           vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.123 pos4(
           vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.123 pos4(vair,90); pos5(
                          curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.123 pos4(vair,90); pos5(
                          curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.123 pos4(vair,90); pos5(curve,180); pos6(
                                           vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.123 pos4(vair,90); pos5(curve,180); pos6(
                                           vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -tiny.rt.x2r-x3l+x3r+0.33333edge+0.66667x0
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.124 ...3l-(rt x3r-tiny.rt x2r),1/3[lft x2,edge])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5curve-0.015slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.012slope)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.127 lft x5r=hround max(1.35u-.5curve,.6u)
                                           ; y5=.5x_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5curve+0.027slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.127 lft x5r=hround max(1.35u-.5curve,.6u);
                                             y5=.5x_height;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y4+y6-0.25x_height-1.75bar_height+0.6vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.129 x7=x3; y7=min(y3,y6+y4-y3+.6vair)
                                       ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE1771
>> (-x3l-0.5serif_fit-0.006slope,y4l-y3l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.130 (x,y4r)=whatever[z3l,z4l]
                               ; x4r:=max(x,.5[x5r,x4]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x4+0.5serif_fit-0.25curve+0.0195slope+0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.130 ...whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4341
>> (-x7r-x3l+x3r-0.5serif_fit-0.01slope,y6l-0.125x_height-0.875bar_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.131 (x',y6r)=whatever[z7l,z6l]
                                ; x6r:=max(x',.5[x5r,x6]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x6+0.5serif_fit-0.25curve+0.0235slope+0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.131 ...hatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.132 filldraw stroke z3e{
                          up}...pulled_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.132 filldraw stroke z3e{
                          up}...pulled_arc.e(4,5)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.132 filldraw stroke z3e{
                          up}...pulled_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.132 filldraw stroke z3e{
                          up}...pulled_arc.e(4,5)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.132 filldraw stroke z3e{
                          up}...pulled_arc.e(4,5)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 y0=ypart(((edge,h)--
                          (edge,0))intersectionpoint(z3l{up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.134 y0=ypart(((edge,h)--(edge,0))
                                   intersectionpoint(z3l{up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.134 ...(edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.134 ...(edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{left}z4l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5serif_fit-0.006slope
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.134 ...0))intersectionpoint(z3l{up}...{left}z4l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> oo+x_height
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.134 ...0))intersectionpoint(z3l{up}...{left}z4l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.135 pickup tiny.nib;
                       bot y2=if serifs:-min(oo,serif_drop) else: 0 fi;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.135 pickup tiny.nib;
                       bot y2=if serifs:-min(oo,serif_drop) else: 0 fi;
(That was another `errmessage'.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.135 pickup tiny.nib; bot y2=if serifs:
                                        -min(oo,serif_drop) else: 0 fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.136 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.137 if serifs:
                 sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [100]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter e"
l.141 cmchar "The letter e"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter e"
l.141 cmchar "The letter e"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5curve#-0.75u#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.5curve#)> if(EXPR0)>u_:
                              u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.142 beginchar("e",7.25u#+max(.75u#,.5curve#)
                                              ,x_height#,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 8u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.142 ...",7.25u#+max(.75u#,.5curve#),x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.142 ...",7.25u#+max(.75u#,.5curve#),x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.01389bh+0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.143 italcorr .5[bar_height#,x_height#]*slant+
                                               .5min(curve#-1.5u#,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -u_
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)<u_:
                      u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.143 ...t#,x_height#]*slant+.5min(curve#-1.5u#,0)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.75u#+0.5curve#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.143 ...#,x_height#]*slant+.5min(curve#-1.5u#,0);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.144 adjust_fit(
                 if monospace: .25u#,.5u# else: 0,0 fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.144 adjust_fit(
                 if monospace: .25u#,.5u# else: 0,0 fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.146 ...ght_curve+6stem_corr=curve if not serifs:
                                                   -3stem_corr fi;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.146 ...ght_curve+6stem_corr=curve if not serifs:
                                                   -3stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> right_curve-tiny.breadth
! Unknown relation will be considered false.
<to be read again> 
                   :
l.147 if right_curve<tiny.breadth:
                                   right_curve:=tiny.breadth; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> curve-tiny.breadth
! Unknown relation will be considered false.
<to be read again> 
                   :
l.148 if left_curve<tiny.breadth:
                                  left_curve:=tiny.breadth; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.149 pickup tiny.nib;
                       pos1(right_curve,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.149 pickup tiny.nib;
                       pos1(right_curve,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.149 pickup tiny.nib; pos1(
                            right_curve,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.149 pickup tiny.nib; pos1(
                            right_curve,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.150 pos2(
           vair,90); pos3(left_curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.150 pos2(
           vair,90); pos3(left_curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.150 pos2(vair,90); pos3(
                          left_curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.150 pos2(vair,90); pos3(
                          left_curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bar_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.151 y1=good.y bar_height;
                            top y2r=h+vround 1.5oo; y0l=bot y1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 1.5oo+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.151 ...ood.y bar_height; top y2r=h+vround 1.5oo;
                                                   y0l=bot y1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5right_curve-0.01slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.152 rt x1r=hround min(w-.5u,w-u+.5right_curve)
                                                ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.01slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.152 rt x1r=hround min(w-.5u,w-u+.5right_curve);
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5curve+0.015slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.153 lft x3r=hround max(.5u,1.25u-.5left_curve)
                                                ; x2=.5w+.25u;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.01slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.153 lft x3r=hround max(.5u,1.25u-.5left_curve);
                                                  x2=.5w+.25u;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.154 {{interim
                superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.154 {{interim
                superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.155  filldraw stroke super_arc.e(
                                   1,2)}};  % right bowl
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.155  filldraw stroke super_arc.e(
                                   1,2)}};  % right bowl
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.155  filldraw stroke super_arc.e(
                                   1,2)}};  % right bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.155  filldraw stroke super_arc.e(
                                   1,2)}};  % right bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.155  filldraw stroke super_arc.e(
                                   1,2)}};  % right bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.157 if serifs:
                 pos4(vair',270); pos5(hair,360);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.162 else: pos4(
                 vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.162 else: pos4(
                 vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.163  filldraw stroke super_arc.e(
                                   2,3) & super_arc.e(3,4);  % left bowl and...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.163  filldraw stroke super_arc.e(
                                   2,3) & super_arc.e(3,4);  % left bowl and...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.163  filldraw stroke super_arc.e(
                                   2,3) & super_arc.e(3,4);  % left bowl and...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.163  filldraw stroke super_arc.e(
                                   2,3) & super_arc.e(3,4);  % left bowl and...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.163  filldraw stroke super_arc.e(
                                   2,3) & super_arc.e(3,4);  % left bowl and...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.164  pickup fine.nib;
                        pos4'(vair,270); z4=z4';
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.164  pickup fine.nib;
                        pos4'(vair,270); z4=z4';
(That was another `errmessage'.)

>> pos4'
! Isolated expression.
<to be read again> 
                   (
l.164  pickup fine.nib; pos4'(
                              vair,270); z4=z4';
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164  pickup fine.nib; pos4'(
                              vair,270); z4=z4';
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.165  pos5(
            .5[vair,flare],275); rt x5r=hround(w-.6u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165  pos5(
            .5[vair,flare],275); rt x5r=hround(w-.6u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.012slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.165 ...5[vair,flare],275); rt x5r=hround(w-.6u);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -y5+y5r+0.33333bar_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.166  y5r=good.y(y5r+1/3bar_height-y5);
                                         y5l:=good.y y5l; x5l:=good.x x5l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.166 ...y(y5r+1/3bar_height-y5); y5l:=good.y y5l;
                                                   x5l:=good.x x5l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.166 ...ht-y5); y5l:=good.y y5l; x5l:=good.x x5l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.167  filldraw stroke term.e(
                              4',5,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.167  filldraw stroke term.e(
                              4',5,right,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.167  filldraw stroke term.e(
                              4',5,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.167  filldraw stroke term.e(
                              4',5,right,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.167  filldraw stroke term.e(
                              4',5,right,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path testpath
>> super_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
l.168 path testpath; testpath=super_arc.r(
                                          2,3) & super_arc.r(3,4);
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.168 path testpath; testpath=super_arc.r(
                                          2,3) & super_arc.r(3,4);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> bar_height+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> x0(SUFFIX0)=xpart(((0,y0(SUFFIX0))--
                                             (x1,y0(SUFFIX0)))intersectionpo...
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1'l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
<for(l)> ...rt(((0,y0(SUFFIX0))--(x1,y0(SUFFIX0)))
                                                  intersectionpoint.testpath...
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> bar_height+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
<for(l)> ...rt(((0,y0(SUFFIX0))--(x1,y0(SUFFIX0)))
                                                  intersectionpoint.testpath...
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> path
>> unknown path testpath
! Not implemented: (path)intersectiontimes(unknown path).
<to be read again> 
                   ;
intersectionpoint->...R0)intersectiontimes(EXPR1);
                                                  if.x_<0:errmessage("The pa...
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x_
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
intersectionpoint->...R0)intersectiontimes(EXPR1);
                                                  if.x_<0:errmessage("The pa...
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y_
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
intersectionpoint->...R0)intersectiontimes(EXPR1);
                                                  if.x_<0:errmessage("The pa...
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x_
! Unknown relation will be considered false.
<to be read again> 
                   :
intersectionpoint->...sectiontimes(EXPR1);if.x_<0:
                                                  errmessage("The paths don'...
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> x_
>> path
! Not implemented: point(unknown numeric)of(path).
<to be read again> 
                   ,
intersectionpoint->...else:0.5[point.x_.of(EXPR0),
                                                  point.y_.of(EXPR1)]fi.endg...
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> y_
>> path
! Not implemented: point(unknown numeric)of(path).
<to be read again> 
                   ]
intersectionpoint->...f(EXPR0),point.y_.of(EXPR1)]
                                                  fi.endgroup
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> path
>> path
! Not implemented: (path)-(path).
<to be read again> 
                   ]
intersectionpoint->...f(EXPR0),point.y_.of(EXPR1)]
                                                  fi.endgroup
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5
>> path
! Not implemented: (known numeric)*(path).
<to be read again> 
                   ]
intersectionpoint->...f(EXPR0),point.y_.of(EXPR1)]
                                                  fi.endgroup
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> path
>> path
! Not implemented: (path)+(path).
<to be read again> 
                   ]
intersectionpoint->...f(EXPR0),point.y_.of(EXPR1)]
                                                  fi.endgroup
<to be read again> 
                   )
<for(l)> ...(SUFFIX0)))intersectionpoint.testpath)
                                                  ; ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> path
! Not implemented: xpart(path).
<to be read again> 
                   ;
<for(l)> ...SUFFIX0)))intersectionpoint.testpath);
                                                   ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x0l
>> path
! Equation cannot be performed (numeric=path).
<to be read again> 
                   ;
<for(l)> ...SUFFIX0)))intersectionpoint.testpath);
                                                   ENDFOR
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> 0.4thin_join+bar_height+0.6vair+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> x0(SUFFIX0)=xpart(((0,y0(SUFFIX0))--
                                             (x1,y0(SUFFIX0)))intersectionpo...
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1'l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
<for(r)> ...rt(((0,y0(SUFFIX0))--(x1,y0(SUFFIX0)))
                                                  intersectionpoint.testpath...
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.4thin_join+bar_height+0.6vair+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
<for(r)> ...rt(((0,y0(SUFFIX0))--(x1,y0(SUFFIX0)))
                                                  intersectionpoint.testpath...
l.171 ...y0$)) intersectionpoint testpath); endfor
                                                  
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z0e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.172 fill stroke z0e--
                       z1'e;  % crossbar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.172 fill stroke z0e--
                       z1'e;  % crossbar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.172 fill stroke z0e--
                       z1'e;  % crossbar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [101]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter f"
l.175 cmchar "The letter f"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter f"
l.175 cmchar "The letter f"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 5.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.176 beginchar("f",5.5u#,asc_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.176 beginchar("f",5.5u#,asc_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.177 italcorr asc_height#*slant+
                                 if serifs:flare#-.25u# else: 1.25u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.177 italcorr asc_height#*slant+if serifs:
                                           flare#-.25u# else: 1.25u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 1.25u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.177 ...t+if serifs:flare#-.25u# else: 1.25u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.178 adjust_fit(
                 stem_shift#,if monospace: .5u# else:-stem_shift# fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.178 adjust_fit(
                 stem_shift#,if monospace: .5u# else:-stem_shift# fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.179 pickup tiny.nib;
                       pos1(stem',0); lft x1l=hround(2.5u-.5stem');
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.179 pickup tiny.nib;
                       pos1(stem',0); lft x1l=hround(2.5u-.5stem');
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.179 pickup tiny.nib; pos1(
                            stem',0); lft x1l=hround(2.5u-.5stem');
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.179 pickup tiny.nib; pos1(
                            stem',0); lft x1l=hround(2.5u-.5stem');
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem'+0.05slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.179 ...1(stem',0); lft x1l=hround(2.5u-.5stem');
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.180 pickup fine.nib;
                       numeric bulb_diam;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.180 pickup fine.nib;
                       numeric bulb_diam;
(That was another `errmessage'.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.181 if serifs:
                 bulb_diam=hround .8[stem,flare];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.184 else: pos2(
                 5/7[vair,flare],90); top y2r=h;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.184 else: pos2(
                 5/7[vair,flare],90); top y2r=h;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.185  rt x2=hround(if monospace:
                                 w-.5u else:w+.75u fi); fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.015slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.185 ...round(if monospace:w-.5u else:w+.75u fi);
                                                   fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> f_stroke
! Isolated expression.
<to be read again> 
                   (
l.186 f_stroke(
               1,2,a,b,c,jut,if not monospace:1.25fi\\ jut); % stem, termina...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.186 f_stroke(
               1,2,a,b,c,jut,if not monospace:1.25fi\\ jut); % stem, termina...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.187 pickup crisp.nib;
                        top y3r=top y4r=x_height; lft x3=hround .5u-1;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.187 pickup crisp.nib;
                        top y3r=top y4r=x_height; lft x3=hround .5u-1;
(That was another `errmessage'.)

>> 0.01slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
l.187 ... y3r=top y4r=x_height; lft x3=hround .5u-
                                                  1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.188 pos3(
           bar,90); pos4(bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.188 pos3(
           bar,90); pos4(bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.188 pos3(bar,90); pos4(
                         bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.188 pos3(bar,90); pos4(
                         bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.189 rt x4=hround(w-if monospace:
                                  .75u+1 else:1/3u fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.00667slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.189 ...ound(w-if monospace:.75u+1 else:1/3u fi);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.190 filldraw stroke z3e--
                           z4e;  % bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.190 filldraw stroke z3e--
                           z4e;  % bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.190 filldraw stroke z3e--
                           z4e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.190 filldraw stroke z3e--
                           z4e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.190 filldraw stroke z3e--
                           z4e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [102]
>> iff
! Isolated expression.
<to be read again> 
                   not
l.193 iff not
              variant_g: cmchar "The letter g";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   not
l.193 iff not
              variant_g: cmchar "The letter g";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 9u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.194 beginchar("g",9u#,x_height#,desc_depth#)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.194 beginchar("g",9u#,x_height#,desc_depth#)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.194 beginchar("g",9u#,x_height#,desc_depth#)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.195 italcorr x_height#*slant+
                               .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.25u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.195 italcorr x_height#*slant+.25u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.196 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.196 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.198 light_vair=Vround(
                        .5[thin_join,vair]+vair_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5right_curve+0.5curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.199 ...ax(fine.breadth,hround(curve-3stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5right_curve+0.5curve-ess'+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.199 ...ax(fine.breadth,hround(curve-3stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.200 loop_top=if serifs:
                          Vround .77[vair,fudged.stem] else: vair fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.64fudged.stem+0.36vair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.201 loop_side=hround .64[vair,fudged.stem];
                                             
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.202 pickup fine.nib;
                       pos1(light_vair,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.202 pickup fine.nib;
                       pos1(light_vair,90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.202 pickup fine.nib; pos1(
                            light_vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.202 pickup fine.nib; pos1(
                            light_vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.203 pos2(
           light_curve,180); pos3(light_vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.203 pos2(
           light_curve,180); pos3(light_vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.203 pos2(light_curve,180); pos3(
                                  light_vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.203 pos2(light_curve,180); pos3(
                                  light_vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.204 pos4(
           light_curve,360); pos11(loop_top,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.204 pos4(
           light_curve,360); pos11(loop_top,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.204 pos4(light_curve,360); pos11(
                                   loop_top,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.204 pos4(light_curve,360); pos11(
                                   loop_top,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -y11+y11r+0.15bar_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.205 y11r=good.y(y11r+.15bar_height-y11);
                                           x1=x3=.5[x2,x4]; y2=y4=.5[y1,y3];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5ess'+0.035slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.206 lft x2r=hround(1.75u-.5light_curve);
                                           rt x4r=hround(w-2.75u+.5light_cur...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5ess'-0.055slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.206 ...e); rt x4r=hround(w-2.75u+.5light_curve);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.27y1l+y3r-y3+0.73y11r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.207 ...y3r=good.y(y3r+.27[top y11r,bot y1l]-y3);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.208 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3);  % left half of...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.208 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3);  % left half of...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.208 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3);  % left half of...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.208 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3);  % left half of...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.208 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3);  % left half of...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.209 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1);  % right half o...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.209 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1);  % right half o...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.209 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1);  % right half o...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.209 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1);  % right half o...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.209 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1);  % right half o...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> superness
>> -x1r+0.5ess'-0.055slope+0.5
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.210 x0=superness[x1r,x4r]
                           ; y0=superness[y4r,y1r];  % NE point on the super...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> superness
>> -y4r+oo
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.210 x0=superness[x1r,x4r]; y0=superness[y4r,y1r]
                                                  ;  % NE point on the super...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> superness
>> -x3r-0.5ess'+0.035slope+0.5
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.211 x8'=superness[x3r,x2r]
                            ; y8'=superness[y2r,y3r];  % SW point on the sup...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> superness
>> -y2r+y3r
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.211 ...uperness[x3r,x2r]; y8'=superness[y2r,y3r]
                                                  ;  % SW point on the super...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> superness
>> -0.5x4+0.5x2
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.212 x8''=superness[x3,x2]
                           ; y8''=superness[y2,y3];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> superness
>> 0.13501y1l-0.5y1+0.365y11r+0.25
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.212 x8''=superness[x3,x2]; y8''=superness[y2,y3]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.213 pos0(
           thin_join,angle(z0-z8')+90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.213 pos0(
           thin_join,angle(z0-z8')+90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.214 pos8(
           thin_join,angle(z0-z8')-90); z8=.618[z8',z8''];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.214 pos8(
           thin_join,angle(z0-z8')-90); z8=.618[z8',z8''];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.215 if serifs:
                 pos5(vair,90);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.219 else: pos5(
                 vair',100); top y5r=h+oo;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.219 else: pos5(
                 vair',100); top y5r=h+oo;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.005slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.220  rt x5l=hround(w-.25u);
                              y5l:=good.y y5l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.220  rt x5l=hround(w-.25u); y5l:=good.y y5l;
                                              
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x0l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.221  filldraw z0l{
                    z5-z0}..z5l--z5r{left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y0l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.221  filldraw z0l{
                    z5-z0}..z5l--z5r{left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x5-0.5ess'+0.055slope-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   }
l.221  filldraw z0l{z5-z0}
                          ..z5l--z5r{left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5-oo
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   }
l.221  filldraw z0l{z5-z0}
                          ..z5l--z5r{left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.005slope+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221  filldraw z0l{z5-z0}..z5l--
                                 z5r{left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221  filldraw z0l{z5-z0}..z5l--
                                 z5r{left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x5r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.221  filldraw z0l{z5-z0}..z5l--z5r{
                                     left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> oo
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.221  filldraw z0l{z5-z0}..z5l--z5r{
                                     left}..{curl 1}z0r--cycle; fi  % ear
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x0r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221 ...z0l{z5-z0}..z5l--z5r{left}..{curl 1}z0r--
                                                  cycle; fi  % ear
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y0r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.221 ...z0l{z5-z0}..z5l--z5r{left}..{curl 1}z0r--
                                                  cycle; fi  % ear
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> pos10
! Isolated expression.
<to be read again> 
                   (
l.222 pos10(
            loop_top,90); x10=x8+.75u; y10=y11;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.222 pos10(
            loop_top,90); x10=x8+.75u; y10=y11;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos12
! Isolated expression.
<to be read again> 
                   (
l.223 pos12(
            loop_side,0); pos13(light_vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.223 pos12(
            loop_side,0); pos13(light_vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos13
! Isolated expression.
<to be read again> 
                   (
l.223 pos12(loop_side,0); pos13(
                                light_vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.223 pos12(loop_side,0); pos13(
                                light_vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos14
! Isolated expression.
<to be read again> 
                   (
l.224 pos14(
            loop_side,-180); pos10'(.5[thin_join,vair],-270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.224 pos14(
            loop_side,-180); pos10'(.5[thin_join,vair],-270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos10'
! Isolated expression.
<to be read again> 
                   (
l.224 pos14(loop_side,-180); pos10'(
                                    .5[thin_join,vair],-270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.224 pos14(loop_side,-180); pos10'(
                                    .5[thin_join,vair],-270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.32fudged.stem+0.015slope-0.18001vair-0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.01slope)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.225 ...12r=hround max(w-1.25u+.5loop_side,w-.5u)
                                                  ; y12=y14=.5[y11,y13];
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.32fudged.stem-0.025slope+0.18001vair+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.225 ...2r=hround max(w-1.25u+.5loop_side,w-.5u);
                                                   y12=y14=.5[y11,y13];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.618x2-0.19101ess'+0.02837slope+0.19148
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.226 x11=x13=max(.5w,x10+eps)
                              ; bot y13r=-d-oo-1; x14=w-x12; z10'l=z10l;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z8e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.227 filldraw stroke z8e{
                          z8-z0}..z10e---z11e;  % link
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z8e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.227 filldraw stroke z8e{
                          z8-z0}..z10e---z11e;  % link
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z8e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.227 filldraw stroke z8e{
                          z8-z0}..z10e---z11e;  % link
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.227 filldraw stroke z8e{
                          z8-z0}..z10e---z11e;  % link
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.227 filldraw stroke z8e{
                          z8-z0}..z10e---z11e;  % link
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke{{
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.228 filldraw stroke {{interim
                                superness:=hein_super; super_arc.e(11,12)}}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke{{
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.228 filldraw stroke {{interim
                                superness:=hein_super; super_arc.e(11,12)}}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke{{
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.228 filldraw stroke {{interim
                                superness:=hein_super; super_arc.e(11,12)}}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.228 filldraw stroke {{interim
                                superness:=hein_super; super_arc.e(11,12)}}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.228 filldraw stroke {{interim
                                superness:=hein_super; super_arc.e(11,12)}}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> super_arc.e
! Isolated expression.
<to be read again> 
                   (
l.228 ...terim superness:=hein_super; super_arc.e(
                                                  11,12)}}
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.228 ...terim superness:=hein_super; super_arc.e(
                                                  11,12)}}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [103]
>> iff.variant_g
! Isolated expression.
<to be read again> 
                   :
l.232 iff variant_g:
                     cmchar "Variant letter g";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   :
l.232 iff variant_g:
                     cmchar "Variant letter g";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 10u#+serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.233 ...g",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.233 ...g",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.233 ...g",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.234 italcorr x_height#*slant-
                               serif_fit#+.5stem#-2u# if serifs:+.5u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.234 ...#*slant-serif_fit#+.5stem#-2u# if serifs:
                                                  +.5u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -2u#-serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.234 ...erif_fit#+.5stem#-2u# if serifs:+.5u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.235 adjust_fit(
                 0,serif_fit# if serifs: -.5u# fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.235 adjust_fit(
                 0,serif_fit# if serifs: -.5u# fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.236 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.236 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.236 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.236 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.236 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.236 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.237 pos0'(
            stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.237 pos0'(
            stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.237 pos0'(stem',0); pos0(
                           stem,0); z0r=z0'r; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.237 pos0'(stem',0); pos0(
                           stem,0); z0r=z0'r; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem'-0.05slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.238 rt x1r=hround(w-2.5u+.5stem');
                                    
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.240 path edge_path; edge_path=(edge,h)--
                                          (edge,0);
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
l.240 ... edge_path; edge_path=(edge,h)--(edge,0);
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.241 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.241 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.241 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.241 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.242 pos4(
           vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 pos4(
           vair,90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.242 pos4(vair,90); pos5(
                          curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 pos4(vair,90); pos5(
                          curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.242 pos4(vair,90); pos5(curve,180); pos6(
                                           vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 pos4(vair,90); pos5(curve,180); pos6(
                                           vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -x3l+x3r+0.66667edge+0.33333x0-tiny.rt.x2r
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.243 ...3l-(rt x3r-tiny.rt x2r),2/3[lft x2,edge])
                                                  ; y3=bar_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5curve-0.015slope
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.012slope)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.245 lft x5r=hround max(1.35u-.5curve,.6u)
                                           ; y5=.5x_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5curve+0.027slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.245 lft x5r=hround max(1.35u-.5curve,.6u);
                                             y5=.5x_height;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.33333vair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.246 x6l=x4l-.2u; bot y6r=vround 1/3vair;
                                          
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y4+y6-2bar_height+0.6vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.247 lft x7l=edge; y7=min(y3,y6+y4-y3+.6vair)
                                              ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4406
>> (-x3l-0.5serif_fit-0.006slope,y4l-y3l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.248 (x,y4r)=whatever[z3l,z4l]
                               ; x4r:=max(x,.5[x5r,x4]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x4+0.5serif_fit-0.25curve+0.0195slope+0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.248 ...whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE6971
>> (-edge-0.5serif_fit-0.01slope,y6l-bar_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.249 (x',y6r)=whatever[z7l,z6l]
                                ; x6r:=max(x',.5[x5r,x6]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x6+0.5serif_fit-0.25curve+0.0235slope+0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.249 ...hatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.250 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.250 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.250 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.250 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.250 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.252 y1=ypart(edge_path intersectionpoint(z3l{
                                               up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.252 y1=ypart(edge_path intersectionpoint(z3l{
                                               up}...{left}z4l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5serif_fit-0.006slope
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.252 ...th intersectionpoint(z3l{up}...{left}z4l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> oo+x_height
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.252 ...th intersectionpoint(z3l{up}...{left}z4l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.253 y0=ypart(edge_path intersectionpoint(z7l{
                                               down}...{left}z6l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> bar_height
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.253 y0=ypart(edge_path intersectionpoint(z7l{
                                               down}...{left}z6l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5serif_fit-0.01slope
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.253 ... intersectionpoint(z7l{down}...{left}z6l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.33333vair+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.253 ... intersectionpoint(z7l{down}...{left}z6l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.254 pickup tiny.nib;
                       bot y2=if serifs: -.25d else: 0 fi;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.254 pickup tiny.nib;
                       bot y2=if serifs: -.25d else: 0 fi;
(That was another `errmessage'.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.254 pickup tiny.nib; bot y2=if serifs:
                                         -.25d else: 0 fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.255 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.255 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.255 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.255 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.255 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.256 pickup crisp.nib;
                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.256 pickup crisp.nib;
                       
(That was another `errmessage'.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.257 pos8(
           hround(hair-stem_corr),0); pos7'(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.257 pos8(
           hround(hair-stem_corr),0); pos7'(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7'
! Isolated expression.
<to be read again> 
                   (
l.257 pos8(hround(hair-stem_corr),0); pos7'(
                                            stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.257 pos8(hround(hair-stem_corr),0); pos7'(
                                            stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z7'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.259 filldraw stroke z7'e--
                            z8e;  % point
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z7'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.259 filldraw stroke z7'e--
                            z8e;  % point
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z7'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.259 filldraw stroke z7'e--
                            z8e;  % point
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.259 filldraw stroke z7'e--
                            z8e;  % point
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.259 filldraw stroke z7'e--
                            z8e;  % point
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.260 if serifs:
                 pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.265 else: pickup fine.nib;
                             pos2'(stem,0); z2'=z2;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.265 else: pickup fine.nib;
                             pos2'(stem,0); z2'=z2;
(That was another `errmessage'.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.265 else: pickup fine.nib; pos2'(
                                   stem,0); z2'=z2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.265 else: pickup fine.nib; pos2'(
                                   stem,0); z2'=z2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.267  pos9(
            vair,-90); x9=4.5u; bot y9r=-d-o-1;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.267  pos9(
            vair,-90); x9=4.5u; bot y9r=-d-o-1;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos10
! Isolated expression.
<to be read again> 
                   (
l.268  pos10(
             .5[vair,flare],-90); lft x10=hround 1.25u;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.268  pos10(
             .5[vair,flare],-90); lft x10=hround 1.25u;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.025slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.268 ...5[vair,flare],-90); lft x10=hround 1.25u;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y10l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.269  y10r=good.y -5/6d; y10l:=good.y y10l;
                                            
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.270  filldraw stroke z2'e..
                             z2''e&super_arc.e(2'',9)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.270  filldraw stroke z2'e..
                             z2''e&super_arc.e(2'',9)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.270  filldraw stroke z2'e..
                             z2''e&super_arc.e(2'',9)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.270  filldraw stroke z2'e..
                             z2''e&super_arc.e(2'',9)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.270  filldraw stroke z2'e..
                             z2''e&super_arc.e(2'',9)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [103]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter h"
l.274 cmchar "The letter h"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter h"
l.274 cmchar "The letter h"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 10u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.275 beginchar("h",10u#,asc_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.275 beginchar("h",10u#,asc_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.01389bh+0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.276 italcorr .5[bar_height#,x_height#]*slant-
                                               serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -2u#-serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.276 ...,x_height#]*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.277 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.277 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.278 pickup tiny.nib;
                       pos1(stem,0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.278 pickup tiny.nib;
                       pos1(stem,0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.278 pickup tiny.nib; pos1(
                            stem,0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.278 pickup tiny.nib; pos1(
                            stem,0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.278 pickup tiny.nib; pos1(stem,0); pos2(
                                          stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.278 pickup tiny.nib; pos1(stem,0); pos2(
                                          stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos1'
! Isolated expression.
<to be read again> 
                   (
l.279 pos1'(
            stem',0); pos2'(stem',0); pos3(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.279 pos1'(
            stem',0); pos2'(stem',0); pos3(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.279 pos1'(stem',0); pos2'(
                            stem',0); pos3(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.279 pos1'(stem',0); pos2'(
                            stem',0); pos3(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.279 pos1'(stem',0); pos2'(stem',0); pos3(
                                           stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.279 pos1'(stem',0); pos2'(stem',0); pos3(
                                           stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem+0.05slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.280 lft x1l=hround(2.5u-.5stem);
                                   x1l=x1'l=x2l=x2'l; x3=w-x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.282 filldraw stroke z1'e--
                            z2'e;  % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.282 filldraw stroke z1'e--
                            z2'e;  % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.282 filldraw stroke z1'e--
                            z2'e;  % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.282 filldraw stroke z1'e--
                            z2'e;  % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.282 filldraw stroke z1'e--
                            z2'e;  % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> h_stroke
! Isolated expression.
<to be read again> 
                   (
l.283 h_stroke(
               2,a,3,4);  % arch and right stem
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.283 h_stroke(
               2,a,3,4);  % arch and right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.284 if serifs:
                 sloped_serif.l(1',2',b,1/3,jut,serif_drop); % upper left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [104]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter i"
l.292 cmchar "The letter i"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter i"
l.292 cmchar "The letter i"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> cap_curve#-dot_size#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(cap_curve#)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.293 ...iam#; dot_diam#=max(dot_size#,cap_curve#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5dot_diam#-asc_height#+1.42857x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.294 ...in(asc_height#,10/7x_height#+.5dot_diam#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.294 ...asc_height#,10/7x_height#+.5dot_diam#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.294 ...asc_height#,10/7x_height#+.5dot_diam#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 36dot_diam#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.295 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.295 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.296 italcorr h#*slant-
                        serif_fit# + .5dot_diam# -2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.01389dot_diam-2u#-serif_fit#+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.296 ...r h#*slant-serif_fit# + .5dot_diam# -2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.297 adjust_fit(
                 serif_fit#+stem_shift# if monospace:+.25u#fi,serif_fit#-ste...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.297 adjust_fit(
                 serif_fit#+stem_shift# if monospace:+.25u#fi,serif_fit#-ste...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.298 pickup tiny.nib;
                       pos1(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.298 pickup tiny.nib;
                       pos1(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.298 pickup tiny.nib; pos1(
                            stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.298 pickup tiny.nib; pos1(
                            stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.298 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.298 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -stem'
! Not implemented: odd(unknown numeric).
<to be read again> 
                   :
l.299 if odd(w-stem'):
                       change_width; fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -stem'
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.299 if odd(w-stem'):
                       change_width; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5stem'+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.300 lft x1l=hround(.5w-.5stem');
                                   x1=x2;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.301 top y1=x_height if serifs:
                                 +min(oo,serif_drop) fi; bot y2=0;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.302 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.302 filldraw stroke z1e--
                           z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.302 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.302 filldraw stroke z1e--
                           z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.302 filldraw stroke z1e--
                           z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.303 pos3(
           dot_diam,0); pos4(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.303 pos3(
           dot_diam,0); pos4(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.303 pos3(dot_diam,0); pos4(
                             dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.303 pos3(dot_diam,0); pos4(
                             dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.304 if serifs:
                 x3r=max(x1r,hround(x1+.5dot_diam-.2jut)-.5tiny)
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> y4l-slab-x_height
! Unknown relation will be considered false.
<to be read again> 
                   :
l.307 if bot y4l-top y1<slab:
                              y4l:=min(y4r-eps,y1+tiny+slab); fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.308 x3=x4; y3=.5[y4l,y4r]; dot(
                                 3,4);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.308 x3=x4; y3=.5[y4l,y4r]; dot(
                                 3,4);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.309 if serifs:
                 sloped_serif.l(1,2,a,1/3,.95jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [105]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter j"
l.313 cmchar "The letter j"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter j"
l.313 cmchar "The letter j"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.02777dot_diam+cap_curve#+0.01389
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(cap_curve#)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.314 ...iam#; dot_diam#=max(dot_size#,cap_curve#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.01389dot_diam-asc_height#+1.42857x_height#-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.315 ...in(asc_height#,10/7x_height#+.5dot_diam#)
                                                  ,desc_depth#);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 5.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.315 ...#,10/7x_height#+.5dot_diam#),desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.315 ...#,10/7x_height#+.5dot_diam#),desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.315 ...#,10/7x_height#+.5dot_diam#),desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> dot_diam+0.00012
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.316 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.316 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.317 italcorr h#*slant-
                        serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -2u#-serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.317 italcorr h#*slant-serif_fit#+.5stem#-2u#;
                                               
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.318 adjust_fit(
                 serif_fit#+2stem_shift# if monospace:+\\.5u# fi,
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.318 adjust_fit(
                 serif_fit#+2stem_shift# if monospace:+\\.5u# fi,
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.320 pickup tiny.nib;
                       pos1(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.320 pickup tiny.nib;
                       pos1(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.320 pickup tiny.nib; pos1(
                            stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.320 pickup tiny.nib; pos1(
                            stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.320 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.320 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem'+0.005slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.321 rt x1r=hround(.5w+.25u+.5stem');
                                       x1=x2;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.322 top y1=x_height if serifs:
                                 +min(oo,serif_drop) fi; bot y2=-1/3d;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.323 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.323 filldraw stroke z1e--
                           z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.323 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.323 filldraw stroke z1e--
                           z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.323 filldraw stroke z1e--
                           z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.324 pos3(
           dot_diam,0); pos4(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.324 pos3(
           dot_diam,0); pos4(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.324 pos3(dot_diam,0); pos4(
                             dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.324 pos3(dot_diam,0); pos4(
                             dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y4l-slab-x_height
! Unknown relation will be considered false.
<to be read again> 
                   :
l.326 if bot y4l-top y1<slab:
                              y4l:=min(y4r-eps,y1+tiny+slab); fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.327 x3=x4; y3=.5[y4l,y4r]; dot(
                                 3,4);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.327 x3=x4; y3=.5[y4l,y4r]; dot(
                                 3,4);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.328 if serifs:
                 sloped_serif.l(1,2,a,1/3,1.1jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.334 else: pickup fine.nib;
                             pos2'(stem',0); z2'=z2;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.334 else: pickup fine.nib;
                             pos2'(stem',0); z2'=z2;
(That was another `errmessage'.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.334 else: pickup fine.nib; pos2'(
                                   stem',0); z2'=z2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.334 else: pickup fine.nib; pos2'(
                                   stem',0); z2'=z2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.335  pos6(
            .2[vair,stem'],-90); pos7(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.335  pos6(
            .2[vair,stem'],-90); pos7(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.335  pos6(.2[vair,stem'],-90); pos7(
                                      vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.335  pos6(.2[vair,stem'],-90); pos7(
                                      vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.015slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.336  lft x7r=hround -.75u;
                             bot y7r=vround 5/6(-d-oo);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.83333oo+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.336 ...=hround -.75u; bot y7r=vround 5/6(-d-oo);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> %CAPSULE6359
>> (x3+0.015slope-0.5,0.5y4l+0.83333oo)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.337  (x,y7l)=whatever[z7r,z3]
                               ; x7l:=x;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4102
>> (x5r-x3,y5r-0.5y4l-0.5)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.338  z5r=z2'r; (x2'l,y5l)=whatever[z7l,z5r]
                                             ; x5l=x2'l; y5=y5r;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> stroke.z2'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.340  filldraw stroke z2'e..
                             {down}z5e & super_arc.e(5,6)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.340  filldraw stroke z2'e..
                             {down}z5e & super_arc.e(5,6)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.340  filldraw stroke z2'e..
                             {down}z5e & super_arc.e(5,6)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.340  filldraw stroke z2'e..
                             {down}z5e & super_arc.e(5,6)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.340  filldraw stroke z2'e..
                             {down}z5e & super_arc.e(5,6)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [106]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter k"
l.344 cmchar "The letter k"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter k"
l.344 cmchar "The letter k"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 9.5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.345 beginchar("k",9.5u#,asc_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.345 beginchar("k",9.5u#,asc_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.346 italcorr x_height#*slant-
                               .2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.2u#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.346 italcorr x_height#*slant-.2u#;
                                    
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.347 adjust_fit(
                 serif_fit#,serif_fit#); pickup tiny.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.347 adjust_fit(
                 serif_fit#,serif_fit#); pickup tiny.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.347 ...(serif_fit#,serif_fit#); pickup tiny.nib;
                                                  
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.347 ...(serif_fit#,serif_fit#); pickup tiny.nib;
                                                  
(That was another `errmessage'.)

>> fudged.stem+0.16667right_curve-0.16667curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.349 ...ny.breadth,hround(fudged.stem-stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fudged.stem+0.16667right_curve-0.16667curve-tiny.breadth+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.349 ...ny.breadth,hround(fudged.stem-stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fudged.stem+0.33333right_curve-0.33333curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.350 ...y.breadth,hround(fudged.stem-2stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fudged.stem+0.33333right_curve-0.33333curve-tiny.breadth+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.350 ...y.breadth,hround(fudged.stem-2stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> hround(fudged.hair.if.hefty:
                                       -\\4stem_corr.fi)
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.351 ...d(fudged.hair if hefty:-\\4stem_corr fi))
                                                  ;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fudged.hair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.351 ...d(fudged.hair if hefty:-\\4stem_corr fi))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fudged.hair-tiny.breadth+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(fudged.hair+0.5)> if(EXPR0)>u_:
                                    u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.351 ...d(fudged.hair if hefty:-\\4stem_corr fi))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fudged.stem+0.5right_curve-0.5curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.352 ...y.breadth,hround(fudged.stem-3stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fudged.stem+0.5right_curve-0.5curve-tiny.breadth+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.352 ...y.breadth,hround(fudged.stem-3stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.353 if serifs:
                 right_jut=.6jut; else: right_jut=.4tiny; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.354 pos1(
           stem1,0); pos2(stem2,0); top y1=h; bot y2=0;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.354 pos1(
           stem1,0); pos2(stem2,0); top y1=h; bot y2=0;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.354 pos1(stem1,0); pos2(
                          stem2,0); top y1=h; bot y2=0;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.354 pos1(stem1,0); pos2(
                          stem2,0); top y1=h; bot y2=0;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.05slope-0.5tiny.breadth+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.355 lft x1l=lft x2l=hround(2.5u-.5stem1);
                                           
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.0015slope+0.5tiny.breadth-0.5tiny
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
l.356 ...t x3r=hround(r-letter_fit-.7u-right_jut)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.0065slope+0.5tiny.breadth-0.5tiny
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
l.357 ...t x6r=hround(r-letter_fit-.3u-right_jut)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.359 alpha1=diag_ratio(
                        1,.5(stem3-tiny),y3-y4,x3r-x4);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.360 alpha2=diag_ratio(
                        1,.5(stem4-tiny),y11-y6,x6r-x1);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha
>> tiny.breadth-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.361 penpos3(alpha1*(stem3-tiny),
                                  0); penpos4(whatever,-90);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> tiny.breadth-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.362 z5=.5[z5l,z5r]; penpos6(alpha2*(stem4-tiny),
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5412
>> (-x4-0.0015slope+0.00049,x_height-0.7bar_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
<for(l)> ...UFFIX0)=z3'(SUFFIX0)+whatever*(z3-z4);
                                                  z5(SUFFIX0)=z6'(SUFFIX0)+w...
l.364 ...whatever*(z11-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE915
>> (0.5x3'l-0.00725slope-0.00024,x_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   =
<for(l)> ...FFIX0)=z6'(SUFFIX0)+whatever*(z11-z6)=
                                                  whatever[z3,z4]; ENDFOR
l.364 ...whatever*(z11-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE1431
>> (0.5x3'l+0.00075slope-0.00024,0.33333y4r-0.33333x_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
<for(l)> ...IX0)+whatever*(z11-z6)=whatever[z3,z4]
                                                  ; ENDFOR
l.364 ...whatever*(z11-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE1496
>> (-0.5x3'l-0.00075slope+0.00024,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
<for(r)> ...UFFIX0)=z3'(SUFFIX0)+whatever*(z3-z4);
                                                  z5(SUFFIX0)=z6'(SUFFIX0)+w...
l.364 ...whatever*(z11-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6354
>> (0.5x3'l-0.00725slope-0.00024,x_height)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   =
<for(r)> ...FFIX0)=z6'(SUFFIX0)+whatever*(z11-z6)=
                                                  whatever[z3,z4]; ENDFOR
l.364 ...whatever*(z11-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4682
>> (0.5x3'l+0.00075slope-0.00024,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
<for(r)> ...IX0)+whatever*(z11-z6)=whatever[z3,z4]
                                                  ; ENDFOR
l.364 ...whatever*(z11-z6)=whatever[z3,z4]; endfor
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.5x3'l-0.00075slope+0.00024,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   +
l.365 z3'r=z3r+penoffset z3-z4 of currentpen+
                                             whatever*(z3-z4);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.0015slope+0.5tiny.breadth-0.5tiny+0.00049,x_height)
>> pen
! Not implemented: (unknown pair)+(pen).
<to be read again> 
                   +
l.365 z3'r=z3r+penoffset z3-z4 of currentpen+
                                             whatever*(z3-z4);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6888
>> (-0.5x3'l-0.00075slope+0.00024,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.365 ...set z3-z4 of currentpen+whatever*(z3-z4);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pen
>> (-0.5x3'l-0.00075slope+0.00024,0)
! Not implemented: (pen)+(unknown pair).
<to be read again> 
                   ;
l.365 ...set z3-z4 of currentpen+whatever*(z3-z4);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.0075slope-0.00015,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   +
l.367 z6'r=z6r+penoffset z11-z6 of currentpen+
                                              whatever*(z11-z6);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0.0065slope+0.5tiny.breadth-0.5tiny+0.00049,0)
>> pen
! Not implemented: (unknown pair)+(pen).
<to be read again> 
                   +
l.367 z6'r=z6r+penoffset z11-z6 of currentpen+
                                              whatever*(z11-z6);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6781
>> (-0.0075slope-0.00015,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.367 ...t z11-z6 of currentpen+whatever*(z11-z6);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pen
>> (-0.0075slope-0.00015,0)
! Not implemented: (pen)+(unknown pair).
<to be read again> 
                   ;
l.367 ...t z11-z6 of currentpen+whatever*(z11-z6);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.369 fill z4r--diag_end(
                         4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.369 fill z4r--diag_end(
                         4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.369 fill z4r--diag_end(
                         4r,3'r,1,.5,3'l,4l)--z4l--cycle;  % upper diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.370 fill z5l--diag_end(
                         5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.370 fill z5l--diag_end(
                         5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.370 fill z5l--diag_end(
                         5l,6'l,.5,1,6'r,5r)--z5r--cycle;  % lower diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.371 pos0(
           stem1,0); pos0'(stem2,0); y0=y0'; x0=x1; x0'=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.371 pos0(
           stem1,0); pos0'(stem2,0); y0=y0'; x0=x1; x0'=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.371 pos0(stem1,0); pos0'(
                           stem2,0); y0=y0'; x0=x1; x0'=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.371 pos0(stem1,0); pos0'(
                           stem2,0); y0=y0'; x0=x1; x0'=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.372 ...0r=whatever[z3,z4]; filldraw stroke z1e..
                                                  z0e--z0'e..z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.372 ...0r=whatever[z3,z4]; filldraw stroke z1e..
                                                  z0e--z0'e..z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.372 ...0r=whatever[z3,z4]; filldraw stroke z1e..
                                                  z0e--z0'e..z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.372 ...0r=whatever[z3,z4]; filldraw stroke z1e..
                                                  z0e--z0'e..z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.372 ...0r=whatever[z3,z4]; filldraw stroke z1e..
                                                  z0e--z0'e..z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.373 if serifs:
                 numeric inner_jut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [107]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter l"
l.382 cmchar "The letter l"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter l"
l.382 cmchar "The letter l"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 5u#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.383 beginchar("l",5u#,asc_height#,0)
                                      ; l_width#:=5u#+2serif_fit#;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.383 beginchar("l",5u#,asc_height#,0)
                                      ; l_width#:=5u#+2serif_fit#;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.384 italcorr asc_height#*slant-
                                 serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.384 ...asc_height#*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.385 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.385 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.386 pickup tiny.nib;
                       pos1(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.386 pickup tiny.nib;
                       pos1(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.386 pickup tiny.nib; pos1(
                            stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.386 pickup tiny.nib; pos1(
                            stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.386 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.386 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -stem'
! Not implemented: odd(unknown numeric).
<to be read again> 
                   :
l.387 if odd(w-stem'):
                       change_width; fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -stem'
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.387 if odd(w-stem'):
                       change_width; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5stem'+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.388 lft x1l=hround(.5w-.5stem');
                                   x1=x2; top y1=h; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.389 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.389 filldraw stroke z1e--
                           z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.389 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.389 filldraw stroke z1e--
                           z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.389 filldraw stroke z1e--
                           z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.390 if serifs:
                 sloped_serif.l(1,2,a,1/3,jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [108]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter m"
l.394 cmchar "The letter m"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter m"
l.394 cmchar "The letter m"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 3l_width#-6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.395 beginchar("m",15u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.395 beginchar("m",15u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.01389bh+0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.396 italcorr .5[bar_height#,x_height#]*slant-
                                               serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.396 ...,x_height#]*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.397 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.397 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> mfudged.stem+0.33333right_curve-0.33333curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.398 ...ved_stem=hround(mfudged.stem-2stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.399 pickup tiny.nib;
                       pos1(mfudged.stem,0); pos2(mfudged.stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.399 pickup tiny.nib;
                       pos1(mfudged.stem,0); pos2(mfudged.stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.399 pickup tiny.nib; pos1(
                            mfudged.stem,0); pos2(mfudged.stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.399 pickup tiny.nib; pos1(
                            mfudged.stem,0); pos2(mfudged.stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.399 pickup tiny.nib; pos1(mfudged.stem,0); pos2(
                                                  mfudged.stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.399 pickup tiny.nib; pos1(mfudged.stem,0); pos2(
                                                  mfudged.stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos1'
! Isolated expression.
<to be read again> 
                   (
l.400 pos1'(
            shaved_stem,0); pos2'(shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.400 pos1'(
            shaved_stem,0); pos2'(shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.400 pos1'(shaved_stem,0); pos2'(
                                  shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.400 pos1'(shaved_stem,0); pos2'(
                                  shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.401 pos3(
           mfudged.stem,0); pos5(mfudged.stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.401 pos3(
           mfudged.stem,0); pos5(mfudged.stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.401 pos3(mfudged.stem,0); pos5(
                                 mfudged.stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.401 pos3(mfudged.stem,0); pos5(
                                 mfudged.stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.402 lft x1l=hround(2.5u-.5stem);
                                   x1l=x1'l=x2l=x2'l; % stem, sic
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5shaved_stem+0.16667right_curve-0.16667curve+0.75
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.403 lft x3l=hround(.5w-.5mfudged.stem);
                                          x5-x3=x3-x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.404 if not monospace:
                        r:=hround(x5+x1)+r-w; fi  % change width for better fit
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.404 if not monospace:
                        r:=hround(x5+x1)+r-w; fi  % change width for better fit
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> serif_drop-oo
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(serif_drop)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.405 top y1=h+min(oo,serif_drop)
                                 ; bot y2=0; y1=y1'; y2=y2';
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.406 filldraw stroke z1'e--
                            z2'e;  % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.406 filldraw stroke z1'e--
                            z2'e;  % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.406 filldraw stroke z1'e--
                            z2'e;  % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.406 filldraw stroke z1'e--
                            z2'e;  % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.406 filldraw stroke z1'e--
                            z2'e;  % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> h_stroke
! Isolated expression.
<to be read again> 
                   (
l.407 h_stroke(
               2,a,3,4);  % left arch and middle stem
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.407 h_stroke(
               2,a,3,4);  % left arch and middle stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> h_stroke
! Isolated expression.
<to be read again> 
                   (
l.408 h_stroke(
               4,b,5,6);  % right arch and right stem
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.408 h_stroke(
               4,b,5,6);  % right arch and right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.409 if serifs:
                 sloped_serif.l(1',2',c,1/3,jut,serif_drop); % upper left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [109]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter n"
l.418 cmchar "The letter n"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter n"
l.418 cmchar "The letter n"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2l_width#-4serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.419 beginchar("n",10u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.419 beginchar("n",10u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.01389bh+0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.420 italcorr .5[bar_height#,x_height#]*slant-
                                               serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.420 ...,x_height#]*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.421 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.421 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.422 pickup tiny.nib;
                       pos1(stem,0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.422 pickup tiny.nib;
                       pos1(stem,0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.422 pickup tiny.nib; pos1(
                            stem,0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.422 pickup tiny.nib; pos1(
                            stem,0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.422 pickup tiny.nib; pos1(stem,0); pos2(
                                          stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.422 pickup tiny.nib; pos1(stem,0); pos2(
                                          stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.33333right_curve-0.33333curve+stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.423 ...tem; shaved_stem=hround(stem-2stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos1'
! Isolated expression.
<to be read again> 
                   (
l.424 pos1'(
            shaved_stem,0); pos2'(shaved_stem,0); pos3(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.424 pos1'(
            shaved_stem,0); pos2'(shaved_stem,0); pos3(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.424 pos1'(shaved_stem,0); pos2'(
                                  shaved_stem,0); pos3(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.424 pos1'(shaved_stem,0); pos2'(
                                  shaved_stem,0); pos3(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.424 ...aved_stem,0); pos2'(shaved_stem,0); pos3(
                                                  stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.424 ...aved_stem,0); pos2'(shaved_stem,0); pos3(
                                                  stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.425 lft x1l=hround(2.5u-.5stem);
                                   x1l=x1'l=x2l=x2'l; x3=w-x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serif_drop-oo
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(serif_drop)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.426 top y1=h+min(oo,serif_drop)
                                 ; bot y2=0; y1=y1'; y2=y2';
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.427 filldraw stroke z1'e--
                            z2'e;  % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.427 filldraw stroke z1'e--
                            z2'e;  % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.427 filldraw stroke z1'e--
                            z2'e;  % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.427 filldraw stroke z1'e--
                            z2'e;  % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.427 filldraw stroke z1'e--
                            z2'e;  % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> h_stroke
! Isolated expression.
<to be read again> 
                   (
l.428 h_stroke(
               2,a,3,4);  % arch and right stem
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.428 h_stroke(
               2,a,3,4);  % arch and right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.429 if serifs:
                 sloped_serif.l(1',2',b,1/3,jut,serif_drop); % upper left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [110]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter o"
l.437 cmchar "The letter o"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter o"
l.437 cmchar "The letter o"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.438 beginchar("o",9u#,x_height#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.438 beginchar("o",9u#,x_height#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ;
l.439 italcorr .7x_height#*slant;
                                 
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.439 italcorr .7x_height#*slant;
                                 
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.440 adjust_fit(
                 if monospace: .5u#,.5u# else: 0,0 fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.440 adjust_fit(
                 if monospace: .5u#,.5u# else: 0,0 fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5curve-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.5curve-0.00114)> if(EXPR0)>u_:
                                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.443 x2r=hround max(.5u,1.25u-.5curve)
                                       ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.5oo+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.444 x4r=w-x2r; x1=x3=.5w; y1r=h+vround 1.5oo;
                                                y3r=-oo;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path path_.l
>> pulled_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.447 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [111]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter p"
l.450 cmchar "The letter p"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter p"
l.450 cmchar "The letter p"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2l_width#-3serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.451 ...p",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.451 ...p",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.451 ...p",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.452 italcorr .5x_height#*slant+
                                 min(.5curve#-.85u#,-.1u#);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.15l_width#-0.5curve#-0.3serif_fit#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.452 ...x_height#*slant+min(.5curve#-.85u#,-.1u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.17l_width#+0.5curve#+0.34serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.452 ..._height#*slant+min(.5curve#-.85u#,-.1u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.453 adjust_fit(
                 serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.453 adjust_fit(
                 serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.454 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.454 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.454 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.454 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.454 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.454 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.455 pos0'(
            stem',0); pos0(stem,0); z0l=z0'l; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.455 pos0'(
            stem',0); pos0(stem,0); z0l=z0'l; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.455 pos0'(stem',0); pos0(
                           stem,0); z0l=z0'l; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.455 pos0'(stem',0); pos0(
                           stem,0); z0l=z0'l; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem'+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.456 lft x1l=hround(2.5u-.5stem');
                                    top y1=h if serifs: +min(oo,serif_drop) fi;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.456 ...hround(2.5u-.5stem'); top y1=h if serifs:
                                                   +min(oo,serif_drop) fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.458 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.458 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,180);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.458 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.458 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.459 pos4(
           vair',90); pos5(curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.459 pos4(
           vair',90); pos5(curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.459 pos4(vair',90); pos5(
                           curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.459 pos4(vair',90); pos5(
                           curve,0); pos6(vair,-90); penpos7(x3l-x3r,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.459 pos4(vair',90); pos5(curve,0); pos6(
                                          vair,-90); penpos7(x3l-x3r,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.459 pos4(vair',90); pos5(curve,0); pos6(
                                          vair,-90); penpos7(x3l-x3r,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x3r-x3l+0.33333edge+0.66667x0-tiny.lft.x2l
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.460 ...-(lft x3r-tiny.lft x2l), 1/3[rt x2,edge])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5curve-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.00055)> if(EXPR0)<u_:
                            u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.463 rt x5r=hround min(w-1.35u+.5curve,w-.6u)
                                              ; y5=.5x_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5curve+0.50124
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.463 rt x5r=hround min(w-1.35u+.5curve,w-.6u);
                                                y5=.5x_height;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y4+y6+0.6vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.465 x7=x3; y7=min(y3,y6+y4-y3+.6vair)
                                       ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE6054
>> (-x3l+0.5serif_fit-0.00046,y4l-y3l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.466 (x,y4r)=whatever[z3l,z4l]
                               ; x4r:=min(x,.5[x5r,x4]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x4-0.5serif_fit+0.25curve+0.25107
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.466 ...whatever[z3l,z4l]; x4r:=min(x,.5[x5r,x4])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE6474
>> (-x7r-x3l+tiny.lft.x2l+0.5serif_fit-0.00027,y6l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.467 (x',y6r)=whatever[z7l,z6l]
                                ; x6r:=min(x',.5[x5r,x6]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x6-0.5serif_fit+0.25curve+0.25089
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.467 ...hatever[z7l,z6l]; x6r:=min(x',.5[x5r,x6])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.468 filldraw stroke z3e{
                          up}...{right}z4e&super_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.468 filldraw stroke z3e{
                          up}...{right}z4e&super_arc.e(4,5)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.468 filldraw stroke z3e{
                          up}...{right}z4e&super_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.468 filldraw stroke z3e{
                          up}...{right}z4e&super_arc.e(4,5)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.468 filldraw stroke z3e{
                          up}...{right}z4e&super_arc.e(4,5)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.470 y0=ypart(((edge,h)--
                          (edge,0))intersectionpoint(z3l{up}...{right}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.470 y0=ypart(((edge,h)--(edge,0))
                                   intersectionpoint(z3l{up}...{right}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.470 ...(edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{right}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.470 ...(edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{right}z4l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5serif_fit-0.00046
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.470 ...))intersectionpoint(z3l{up}...{right}z4l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> oo
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.470 ...))intersectionpoint(z3l{up}...{right}z4l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.471 pickup tiny.nib;
                       bot y2=-d;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.471 pickup tiny.nib;
                       bot y2=-d;
(That was another `errmessage'.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.472 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.472 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.472 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.472 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.472 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.473 pickup crisp.nib;
                        pos8(hair,0); pos7'(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.473 pickup crisp.nib;
                        pos8(hair,0); pos7'(stem,0);
(That was another `errmessage'.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.473 pickup crisp.nib; pos8(
                             hair,0); pos7'(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.473 pickup crisp.nib; pos8(
                             hair,0); pos7'(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7'
! Isolated expression.
<to be read again> 
                   (
l.473 pickup crisp.nib; pos8(hair,0); pos7'(
                                            stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.473 pickup crisp.nib; pos8(hair,0); pos7'(
                                            stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z7'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475 filldraw stroke z7'e--
                            z8e;  % point
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z7'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475 filldraw stroke z7'e--
                            z8e;  % point
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z7'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475 filldraw stroke z7'e--
                            z8e;  % point
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475 filldraw stroke z7'e--
                            z8e;  % point
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.475 filldraw stroke z7'e--
                            z8e;  % point
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.476 if serifs:
                 sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [112]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter q"
l.480 cmchar "The letter q"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter q"
l.480 cmchar "The letter q"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2l_width#-3serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.481 ...q",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.481 ...q",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.481 ...q",10u#+serif_fit#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.482 italcorr x_height#*slant-
                               serif_fit#+.5stem#-2u# if serifs:+.5u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.482 ...#*slant-serif_fit#+.5stem#-2u# if serifs:
                                                  +.5u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.482 ...erif_fit#+.5stem#-2u# if serifs:+.5u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.483 adjust_fit(
                 0,serif_fit# if serifs: -.5u# fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.483 adjust_fit(
                 0,serif_fit# if serifs: -.5u# fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.484 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.484 pickup tiny.nib;
                       pos1(stem',0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.484 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.484 pickup tiny.nib; pos1(
                            stem',0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.484 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.484 pickup tiny.nib; pos1(stem',0); pos2(
                                           stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.485 pos0'(
            stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.485 pos0'(
            stem',0); pos0(stem,0); z0r=z0'r; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.485 pos0'(stem',0); pos0(
                           stem,0); z0r=z0'r; x0'=x1; x0=x2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.485 pos0'(stem',0); pos0(
                           stem,0); z0r=z0'r; x0'=x1; x0=x2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem'+0.50229
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.486 rt x1r=hround(w-2.5u+.5stem');
                                    
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.488 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.488 pickup fine.nib;
                       pos3(if hefty:thin_join else: hair fi,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.488 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.488 pickup fine.nib; pos3(
                            if hefty:thin_join else: hair fi,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.489 pos4(
           vair',90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.489 pos4(
           vair',90); pos5(curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.489 pos4(vair',90); pos5(
                           curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.489 pos4(vair',90); pos5(
                           curve,180); pos6(vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.489 pos4(vair',90); pos5(curve,180); pos6(
                                            vair,270); penpos7(x3r-x3l,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.489 pos4(vair',90); pos5(curve,180); pos6(
                                            vair,270); penpos7(x3r-x3l,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -x3l+x3r+0.66667edge+0.33333x0-tiny.rt.x2r
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.490 ...3l-(rt x3r-tiny.rt x2r),2/3[lft x2,edge])
                                                  ; y3=bar_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5curve+0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.00055)> if(EXPR0)>u_:
                             u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.492 lft x5r=hround max(1.35u-.5curve,.6u)
                                           ; y5=.5x_height;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5curve+0.49876
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.492 lft x5r=hround max(1.35u-.5curve,.6u);
                                             y5=.5x_height;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y4+y6+0.6vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.493 ...; bot y6r=-oo; y7=min(y3,y6+y4-y3+.6vair)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -x3l+0.33333edge+0.66667x0
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.494 ...7l-(rt x7r-tiny.rt x2r),1/3[lft x2,edge])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE6494
>> (-x3l-0.5serif_fit+0.00027,y4l-y3l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.495 (x,y4r)=whatever[z3l,z4l]
                               ; x4r:=max(x,.5[x5r,x4]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x4+0.5serif_fit-0.25curve+0.2491
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.495 ...whatever[z3l,z4l]; x4r:=max(x,.5[x5r,x4])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE4199
>> (-x3l-0.5serif_fit+0.00046,y6l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.496 (x',y6r)=whatever[z7l,z6l]
                                ; x6r:=max(x',.5[x5r,x6]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x6+0.5serif_fit-0.25curve+0.24892
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.496 ...hatever[z7l,z6l]; x6r:=max(x',.5[x5r,x6])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.497 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.497 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.497 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.497 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.497 filldraw stroke z3e{
                          up}...{left}z4e&super_arc.e(4,5)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.499 y1=ypart(((edge,h)--
                          (edge,0))intersectionpoint(z3l{up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.499 y1=ypart(((edge,h)--(edge,0))
                                   intersectionpoint(z3l{up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.499 ...(edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{left}z4l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.499 ...(edge,h)--(edge,0))intersectionpoint(z3l{
                                                  up}...{left}z4l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5serif_fit+0.00027
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.499 ...0))intersectionpoint(z3l{up}...{left}z4l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> oo
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.499 ...0))intersectionpoint(z3l{up}...{left}z4l)
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.500 y0=ypart(((edge,h)--
                          (edge,0))intersectionpoint(z6l{right}...{up}z7l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> edge
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.500 y0=ypart(((edge,h)--(edge,0))
                                   intersectionpoint(z6l{right}...{up}z7l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5serif_fit+0.00046
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.500 ...(edge,h)--(edge,0))intersectionpoint(z6l{
                                                  right}...{up}z7l));
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -oo
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.500 ...(edge,h)--(edge,0))intersectionpoint(z6l{
                                                  right}...{up}z7l));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   )
l.500 ...))intersectionpoint(z6l{right}...{up}z7l)
                                                  );
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.501 pickup tiny.nib;
                       bot y2=-d;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.501 pickup tiny.nib;
                       bot y2=-d;
(That was another `errmessage'.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.502 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.502 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.502 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.502 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.502 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.503 pickup crisp.nib;
                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.503 pickup crisp.nib;
                       
(That was another `errmessage'.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.504 pos8(
           hround(hair-stem_corr),0); pos7'(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.504 pos8(
           hround(hair-stem_corr),0); pos7'(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7'
! Isolated expression.
<to be read again> 
                   (
l.504 pos8(hround(hair-stem_corr),0); pos7'(
                                            stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.504 pos8(hround(hair-stem_corr),0); pos7'(
                                            stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z7'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.506 filldraw stroke z7'e--
                            z8e;  % point
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z7'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.506 filldraw stroke z7'e--
                            z8e;  % point
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z7'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.506 filldraw stroke z7'e--
                            z8e;  % point
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.506 filldraw stroke z7'e--
                            z8e;  % point
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.506 filldraw stroke z7'e--
                            z8e;  % point
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.507 if serifs:
                 dish_serif(2,0,b,1/3,jut,c,1/3,jut); fi  % lower serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [113]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter r"
l.510 cmchar "The letter r"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter r"
l.510 cmchar "The letter r"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.511 numeric r_flare#; r_flare#=.75[if serifs:
                                                stem# else: vair# fi,flare#];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 27flare#+9vair#+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(r_flare)> ...hround((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.512 define_whole_blacker_pixels(r_flare)
                                          ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> r_flare
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(r_flare)> ...)#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.512 define_whole_blacker_pixels(r_flare)
                                          ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.513 beginchar("r",if serifs:
                              max(7u#,5.5u#+r_flare#) else:6.5u# fi,x_height...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 1.3l_width#-2.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.513 ....5u#+r_flare#) else:6.5u# fi,x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.513 ....5u#+r_flare#) else:6.5u# fi,x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> serifs
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.514 italcorr x_height#*slant if not serifs:
                                              +.25u# fi;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.514 italcorr x_height#*slant if not serifs:
                                              +.25u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ;
l.514 ...x_height#*slant if not serifs: +.25u# fi;
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.514 ...x_height#*slant if not serifs: +.25u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.515 adjust_fit(
                 serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.515 adjust_fit(
                 serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.516 pickup fine.nib;
                       top y4r=h+oo;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.516 pickup fine.nib;
                       top y4r=h+oo;
(That was another `errmessage'.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.517 if serifs:
                 pos4(vair,90); pos5(hair,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.521 else: pos4(
                 r_flare,90); rt x4=hround(w-.25u); fi
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.521 else: pos4(
                 r_flare,90); rt x4=hround(w-.25u); fi
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.522 pos3(
           thin_join,180); rt x3l=hround(2.5u-.5stem')+stem'; top y3=bar_hei...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.522 pos3(
           thin_join,180); rt x3l=hround(2.5u-.5stem')+stem'; top y3=bar_hei...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem'+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
l.522 ...n_join,180); rt x3l=hround(2.5u-.5stem')+
                                                  stem'; top y3=bar_height;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.523 filldraw stroke z3e{
                          up}...{right}z4e;  % arc
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.523 filldraw stroke z3e{
                          up}...{right}z4e;  % arc
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.523 filldraw stroke z3e{
                          up}...{right}z4e;  % arc
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.523 filldraw stroke z3e{
                          up}...{right}z4e;  % arc
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.523 filldraw stroke z3e{
                          up}...{right}z4e;  % arc
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.524 pickup tiny.nib;
                       pos0(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.524 pickup tiny.nib;
                       pos0(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.524 pickup tiny.nib; pos0(
                            stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.524 pickup tiny.nib; pos0(
                            stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.524 pickup tiny.nib; pos0(stem',0); pos2(
                                           stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.524 pickup tiny.nib; pos0(stem',0); pos2(
                                           stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.525 pos1(
           hround(stem-3stem_corr),0); top y1=h+min(oo,serif_drop);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.525 pos1(
           hround(stem-3stem_corr),0); top y1=h+min(oo,serif_drop);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -oo+serif_drop
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(serif_drop)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.525 ...tem_corr),0); top y1=h+min(oo,serif_drop)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.526 pos0'(
            hround(stem-3stem_corr),0); y0=y0'=y3; x1l=x0l=x0'l=x2l;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.526 pos0'(
            hround(stem-3stem_corr),0); y0=y0'=y3; x1l=x0l=x0'l=x2l;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem'+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.527 lft x1l=hround(2.5u-.5stem');
                                    bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.528 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.528 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.528 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.528 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.528 filldraw stroke z1e--
                           z0'e--z0e--z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.529 if serifs:
                 sloped_serif.l(1,0',a,1/3,jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [114]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter s"
l.533 cmchar "The letter s"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter s"
l.533 cmchar "The letter s"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.42l_width#-2.84serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.534 beginchar("s",7.1u#,x_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.534 beginchar("s",7.1u#,x_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.535 italcorr x_height#*slant-
                               if serifs:.55u# else:.3u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.535 italcorr x_height#*slant-if serifs:
                                         .55u# else:.3u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.06l_width#+0.12serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.535 ...ight#*slant-if serifs:.55u# else:.3u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.536 adjust_fit(
                 if monospace: .5u#,.4u# else: 0,if serifs:0 else:-.2u# fi fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.536 adjust_fit(
                 if monospace: .5u#,.4u# else: 0,if serifs:0 else:-.2u# fi fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.538 numeric s_slab; s_slab=if serifs:
                                       vair else:Vround .1[vair,stem] fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> Vround0.1
>> stem-vair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.538 ...=if serifs:vair else:Vround .1[vair,stem]
                                                   fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> ess-light_curve
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(ess)> if(EXPR0)>u_:
                        u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.539 numeric ess'; ess'=max(fine.breadth,ess)
                                              ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.540 pickup fine.nib;
                       pos2(max(fine.breadth,s_slab-vround vair_corr),-100);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.540 pickup fine.nib;
                       pos2(max(fine.breadth,s_slab-vround vair_corr),-100);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.540 pickup fine.nib; pos2(
                            max(fine.breadth,s_slab-vround vair_corr),-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.540 pickup fine.nib; pos2(
                            max(fine.breadth,s_slab-vround vair_corr),-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.541 pos0(
           ess',theta); pos7(s_slab,-90); x2l=x0=x7=.5w;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.541 pos0(
           ess',theta); pos7(s_slab,-90); x2l=x0=x7=.5w;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.541 pos0(ess',theta); pos7(
                             s_slab,-90); x2l=x0=x7=.5w;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.541 pos0(ess',theta); pos7(
                             s_slab,-90); x2l=x0=x7=.5w;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.5oo+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.542 top y2l=h+vround 1.5oo;
                              bot y7r=-oo;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.543 y0-.5ess'=y7l+if serifs:
                              .54 else: .52 fi\\(y2r-y7l-ess');
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5light_curve+0.5stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
l.545 x3r-x3l=x6r-x6l=hround .5[s_slab,ess']-
                                             fine;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.546 ellipse_set(
                  2l,3l,4l,0l); ellipse_set(2r,3r,4r,0r); y3=y3r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.546 ellipse_set(
                  2l,3l,4l,0l); ellipse_set(2r,3r,4r,0r); y3=y3r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.546 ellipse_set(2l,3l,4l,0l); ellipse_set(
                                            2r,3r,4r,0r); y3=y3r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.546 ellipse_set(2l,3l,4l,0l); ellipse_set(
                                            2r,3r,4r,0r); y3=y3r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.547 ellipse_set(
                  7l,6l,5l,0l); ellipse_set(7r,6r,5r,0r); y6=y6r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.547 ellipse_set(
                  7l,6l,5l,0l); ellipse_set(7r,6r,5r,0r); y6=y6r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.547 ellipse_set(7l,6l,5l,0l); ellipse_set(
                                            7r,6r,5r,0r); y6=y6r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.547 ellipse_set(7l,6l,5l,0l); ellipse_set(
                                            7r,6r,5r,0r); y6=y6r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! The token `superness' isn't an internal quantity.
<to be read again> 
                   superness
l.548 interim superness
                       :=more_super;
Something like `tracingonline' should follow `interim'.

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.549 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.549 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.549 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.549 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.549 filldraw stroke super_arc.e(
                                  2,3) & z3e{down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.551 if serifs:
                 pos1(hair,180); pos8(hair,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.566 else: pos1(
                 4/7[s_slab,flare],-100); pos8(flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.566 else: pos1(
                 4/7[s_slab,flare],-100); pos8(flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.566 else: pos1(4/7[s_slab,flare],-100); pos8(
                                               flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.566 else: pos1(4/7[s_slab,flare],-100); pos8(
                                               flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -x1+x1l+0.50092
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.567  x1l=good.x(x1l+w-u-rt x1);
                                  lft x8r=hround .5u;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y2l
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.568  top y1l=vround(.93h+1.5oo);
                                   bot y8r=vround .1h-oo;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.569  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.569  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.569  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.569  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.569  filldraw stroke term.e(
                              2,1,right,.9,4);  % upper arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.570  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.570  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.570  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.570  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.570  filldraw stroke term.e(
                              7,8,left,1,4); fi  % lower arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [115]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter t"
l.573 cmchar "The letter t"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter t"
l.573 cmchar "The letter t"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.2l_width#+0.4serif_fit#+0.5stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.5stem#)> if(EXPR0)>u_:
                             u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.574 beginchar("t",6u#+max(u#,.5stem#)
                                       ,
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> if.hefty:
                    9/7else:10/7fi\\x_height#
min->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu<u_:u_:=uu;fi.endfor...
l.575 ...t#,if hefty:9/7 else:10/7 fi\\ x_height#)
                                                  ,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -asc_height#+1.42857x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(1.42857x_height#)> if(EXPR0)<u_:
                                     u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.575 ...t#,if hefty:9/7 else:10/7 fi\\ x_height#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.4l_width#-2.79999serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.575 ...if hefty:9/7 else:10/7 fi\\ x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.575 ...if hefty:9/7 else:10/7 fi\\ x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.576 italcorr x_height#*slant if serifs:
                                          -.9u# else: -.4u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.576 ... x_height#*slant if serifs: -.9u# else: -
                                                  .4u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.08l_width#+0.16serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.576 ...t#*slant if serifs: -.9u# else: -.4u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.577 adjust_fit(
                 0,if serifs: 0 else: -.5u# fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.577 adjust_fit(
                 0,if serifs: 0 else: -.5u# fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.578 ...d_stem; shaved_stem=hround(stem if hefty:
                                                  -\\2stem_corr fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.578 ...m=hround(stem if hefty:-\\2stem_corr fi);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.579 pickup fine.nib;
                       pos2(shaved_stem,180);pos3(shaved_stem,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.579 pickup fine.nib;
                       pos2(shaved_stem,180);pos3(shaved_stem,180);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.579 pickup fine.nib; pos2(
                            shaved_stem,180);pos3(shaved_stem,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.579 pickup fine.nib; pos2(
                            shaved_stem,180);pos3(shaved_stem,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.579 pickup fine.nib; pos2(shaved_stem,180);pos3(
                                                  shaved_stem,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.579 pickup fine.nib; pos2(shaved_stem,180);pos3(
                                                  shaved_stem,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem+0.24771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.580 lft x2r=lft x3r=hround(2.5u-.5shaved_stem);
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 2vair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2vair)> if(EXPR0)>u_:
                          u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.581 y2=y8; y3=max(.5bar_height,2vair)
                                       ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.582 pickup crisp.nib;
                        pos8(bar,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.582 pickup crisp.nib;
                        pos8(bar,90);
(That was another `errmessage'.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.582 pickup crisp.nib; pos8(
                             bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.582 pickup crisp.nib; pos8(
                             bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.584 if hefty:
                pos7(bar,90);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.590 else: pos7(
                 vair,90); pos1(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.590 else: pos7(
                 vair,90); pos1(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.590 else: pos7(vair,90); pos1(
                                hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.590 else: pos7(vair,90); pos1(
                                hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x1l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.592  filldraw z1l{
                    down}...{left}z7r--z7l--z8l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.592  filldraw z1l{
                    down}...{left}z7r--z7l--z8l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x7r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.592  filldraw z1l{down}...{left}z7r--
                                       z7l--z8l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y7r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.592  filldraw z1l{down}...{left}z7r--
                                       z7l--z8l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x7l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.592  filldraw z1l{down}...{left}z7r--z7l--
                                            z8l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y7l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.592  filldraw z1l{down}...{left}z7r--z7l--
                                            z8l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x8l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593   --
          z8r--(x1r,y8r)--z1r--cycle; fi  % upper terminal and crossbar
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y7l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593   --
          z8r--(x1r,y8r)--z1r--cycle; fi  % upper terminal and crossbar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x8r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593   --z8r--
               (x1r,y8r)--z1r--cycle; fi  % upper terminal and crossbar
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593   --z8r--(x1r,y8r)--
                          z1r--cycle; fi  % upper terminal and crossbar
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593   --z8r--(x1r,y8r)--z1r--
                               cycle; fi  % upper terminal and crossbar
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.593   --z8r--(x1r,y8r)--z1r--
                               cycle; fi  % upper terminal and crossbar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.594 pickup fine.nib;
                       interim superness:=more_super;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.594 pickup fine.nib;
                       interim superness:=more_super;
(That was another `errmessage'.)

! The token `superness' isn't an internal quantity.
<to be read again> 
                   superness
l.594 pickup fine.nib; interim superness
                                        :=more_super;
Something like `tracingonline' should follow `interim'.

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.595 pos4(
           vair',-90); bot y4r=-oo; rt x5r=hround(w-u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.595 pos4(
           vair',-90); bot y4r=-oo; rt x5r=hround(w-u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.596 if serifs:
                 pos5(hair,0); y5=y3; x4l=.5[x3l,x5l];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.602 else: pos5(
                 vair,-75); top y5l=vround .2[top y4l,bar_height];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.602 else: pos5(
                 vair,-75); top y5l=vround .2[top y4l,bar_height];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.8y4l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.602 ...); top y5l=vround .2[top y4l,bar_height];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x5l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.603  x5l:=good.x x5l;
                        x4l=1/3[x3l,x5l]; x4r:=1/3[x3r,x5r]; y3l:=y3l+.2vair;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.604  filldraw stroke z2e..
                            super_arc.e(3,4);  % stem and hook
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.604  filldraw stroke z2e..
                            super_arc.e(3,4);  % stem and hook
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.604  filldraw stroke z2e..
                            super_arc.e(3,4);  % stem and hook
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.604  filldraw stroke z2e..
                            super_arc.e(3,4);  % stem and hook
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.604  filldraw stroke z2e..
                            super_arc.e(3,4);  % stem and hook
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path p
>> stroke.z4e
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   {
l.605  path p; p=stroke z4e{
                            right}..tension .9 and atleast 1..z5e;  % terminal
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   {
l.605  path p; p=stroke z4e{
                            right}..tension .9 and atleast 1..z5e;  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1
>> unknown path p
! Not implemented: precontrol(known numeric)of(unknown path).
<to be read again> 
                   )
l.606  if (xpart(z5l-precontrol 1 of p)
                                       <0) or (xpart(z5r-postcontrol 2 of p)...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (x5l,0.8y4l+0.5)
>> unknown path p
! Not implemented: (unknown pair)-(unknown path).
<to be read again> 
                   )
l.606  if (xpart(z5l-precontrol 1 of p)
                                       <0) or (xpart(z5r-postcontrol 2 of p)...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> unknown path p
! Not implemented: xpart(unknown path).
<to be read again> 
                   <
l.606  if (xpart(z5l-precontrol 1 of p)<
                                        0) or (xpart(z5r-postcontrol 2 of p)...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path p
>> 0
! Not implemented: (unknown path)<(known numeric).
<to be read again> 
                   )
l.606  if (xpart(z5l-precontrol 1 of p)<0)
                                           or (xpart(z5r-postcontrol 2 of p)...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 2
>> unknown path p
! Not implemented: postcontrol(known numeric)of(unknown path).
<to be read again> 
                   )
l.606 ...f p)<0) or (xpart(z5r-postcontrol 2 of p)
                                                  <0):
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,y5r)
>> unknown path p
! Not implemented: (unknown pair)-(unknown path).
<to be read again> 
                   )
l.606 ...f p)<0) or (xpart(z5r-postcontrol 2 of p)
                                                  <0):
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> unknown path p
! Not implemented: xpart(unknown path).
<to be read again> 
                   <
l.606 ... p)<0) or (xpart(z5r-postcontrol 2 of p)<
                                                  0):
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path p
>> 0
! Not implemented: (unknown path)<(known numeric).
<to be read again> 
                   )
l.606 ...)<0) or (xpart(z5r-postcontrol 2 of p)<0)
                                                  :
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0
>> 0
! Not implemented: (known numeric)or(known numeric).
<to be read again> 
                   :
l.606 ...<0) or (xpart(z5r-postcontrol 2 of p)<0):
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.606 ...<0) or (xpart(z5r-postcontrol 2 of p)<0):
                                                  
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> unknown path p
! Not implemented: turningnumber(unknown path).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ;
l.608  else: filldraw p;
                         fi fi;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path p
>> 0
! Not implemented: (unknown path)<=(known numeric).
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ;
l.608  else: filldraw p;
                         fi fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ;
l.608  else: filldraw p;
                         fi fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> unknown path p
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ;
l.608  else: filldraw p;
                         fi fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ;
l.608  else: filldraw p;
                         fi fi;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ;
l.608  else: filldraw p;
                         fi fi;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [116]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter u"
l.611 cmchar "The letter u"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter u"
l.611 cmchar "The letter u"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2l_width#-4serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.612 beginchar("u",10u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.612 beginchar("u",10u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.613 italcorr x_height#*slant-
                               serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.613 ...r x_height#*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.614 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.614 adjust_fit(
                 serif_fit#+stem_shift#,serif_fit#-stem_shift#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.615 ...ric light_vair; light_vair=vair if hefty:
                                                   -vround 2vair_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -light_curve+vair
! Unknown relation will be considered false.
<to be read again> 
                   :
l.616 if light_vair<fine.breadth:
                                  light_vair:=fine.breadth; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.617 pickup tiny.nib;
                       pos1(stem,0); pos2(stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.617 pickup tiny.nib;
                       pos1(stem,0); pos2(stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.617 pickup tiny.nib; pos1(
                            stem,0); pos2(stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.617 pickup tiny.nib; pos1(
                            stem,0); pos2(stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.617 pickup tiny.nib; pos1(stem,0); pos2(
                                          stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.617 pickup tiny.nib; pos1(stem,0); pos2(
                                          stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.618 pos3(
           stem,0); pos4(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.618 pos3(
           stem,0); pos4(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.618 pos3(stem,0); pos4(
                         stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.618 pos3(stem,0); pos4(
                         stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.619 lft x1l=hround(2.5u-.5stem);
                                   x1=x2; x3=w-x1; x3r=x4r;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.620 if serifs:
                 top y1=h+min(oo,serif_drop); bot y4=-min(oo,serif_drop);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.622 pos0(
           stem,0); pos0'(stem',0); x0=x3; x0'=x4; y0=y0';
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.622 pos0(
           stem,0); pos0'(stem',0); x0=x3; x0'=x4; y0=y0';
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0'
! Isolated expression.
<to be read again> 
                   (
l.622 pos0(stem,0); pos0'(
                          stem',0); x0=x3; x0'=x4; y0=y0';
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.622 pos0(stem,0); pos0'(
                          stem',0); x0=x3; x0'=x4; y0=y0';
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -fine+vair-0.00049
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.624 penpos5(max(eps,light_vair-fine)
                                      ,-90); penpos6(thin_join-fine,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.626 filldraw stroke z1e--
                           z2e;  % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.626 filldraw stroke z1e--
                           z2e;  % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.626 filldraw stroke z1e--
                           z2e;  % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.626 filldraw stroke z1e--
                           z2e;  % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.626 filldraw stroke z1e--
                           z2e;  % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.627 filldraw stroke z3e..
                           z0e--z0'e..z4e;  % right stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.627 filldraw stroke z3e..
                           z0e--z0'e..z4e;  % right stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.627 filldraw stroke z3e..
                           z0e--z0'e..z4e;  % right stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.627 filldraw stroke z3e..
                           z0e--z0'e..z4e;  % right stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.627 filldraw stroke z3e..
                           z0e--z0'e..z4e;  % right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.628 pickup fine.nib;
                       bot y5r=-oo; x5l=.5w-.25u; lft x6l=tiny.lft x0l;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.628 pickup fine.nib;
                       bot y5r=-oo; x5l=.5w-.25u; lft x6l=tiny.lft x0l;
(That was another `errmessage'.)

>> %CAPSULE6390
>> (x6r-thin_join+fine-0.00023,oo-0.00049)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.629 (x,y5r)=whatever[z5l,z6l]
                               ; x5r:=max(x,.5[x5,x2'r]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -x6r+0.5x1+thin_join-0.25stem-0.75fine+0.0001
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.629 ...hatever[z5l,z6l]; x5r:=max(x,.5[x5,x2'r])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke{{
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.630 filldraw stroke {{interim
                                superness:=hein_super;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke{{
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.630 filldraw stroke {{interim
                                superness:=hein_super;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke{{
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.630 filldraw stroke {{interim
                                superness:=hein_super;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.630 filldraw stroke {{interim
                                superness:=hein_super;
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   interim
l.630 filldraw stroke {{interim
                                superness:=hein_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pulled_arc.e
! Isolated expression.
<to be read again> 
                   (
l.631   pulled_arc.e(
                     2',5)}} & z5e{right}...{up}z6e;  % arc
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.631   pulled_arc.e(
                     2',5)}} & z5e{right}...{up}z6e;  % arc
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.632 if serifs:
                 sloped_serif.l(1,2,a,1/3,jut,serif_drop); % upper left serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [117]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter v"
l.637 cmchar "The letter v"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter v"
l.637 cmchar "The letter v"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.638 beginchar("v",if serifs:
                               9.5u# else:9u# fi,x_height#,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.638 ...if serifs: 9.5u# else:9u# fi,x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.638 ...if serifs: 9.5u# else:9u# fi,x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.639 italcorr x_height#*slant+
                               .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.05l_width#-0.1serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.639 italcorr x_height#*slant+.25u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.640 adjust_fit(
                 serif_fit# if monospace:+\\.5u#,.5u#+ else:,fi\\ serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.640 adjust_fit(
                 serif_fit# if monospace:+\\.5u#,.5u#+ else:,fi\\ serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.643 right_stem=min(fudged.hair if hefty:
                                          -2stem_corr fi,left_stem);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fudged.stem+0.16667right_curve-0.16667curve-fudged.hair
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.643 ...d.hair if hefty:-2stem_corr fi,left_stem)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.646 alpha=diag_ratio(
                       2,right_stem,y1-y2,x4r-x1l-apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha2
>> fudged.stem+0.16667right_curve-0.16667curve
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.647 penpos1(alpha*left_stem,
                              0); penpos2(alpha*left_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.stem+0.16667right_curve-0.16667curve
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.647 ...ha*left_stem,0); penpos2(alpha*left_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.648 penpos3(alpha*right_stem,
                               0); penpos4(alpha*right_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.648 ...*right_stem,0); penpos4(alpha*right_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE496
>> (-0.5fudged.hair-0.52777jut+0.16667cap_hair+0.33664,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.649 z0=whatever[z1r,z2r]
                          =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6700
>> (-0.5fudged.hair-0.52777jut+0.16667cap_hair+0.33664,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.649 z0=whatever[z1r,z2r]=whatever[z3l,z4l]
                                            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.650 if y0>notch_cut:
                       y0:=notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -fudged.hair-0.69444jut+0.16667cap_hair+0.33665
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.654 else: fill z0--
                     diag_end(0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.654 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.654 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.654 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.656 if serifs:
                 numeric inner_jut; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [118]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter w"
l.664 cmchar "The letter w"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter w"
l.664 cmchar "The letter w"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.6l_width#-5.2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.665 beginchar("w",13u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.665 beginchar("w",13u#,x_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.666 italcorr x_height#*slant+
                               .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.05l_width#-0.1serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.666 italcorr x_height#*slant+.25u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.667 adjust_fit(
                 serif_fit#,serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.667 adjust_fit(
                 serif_fit#,serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.671 stem4=min(fudged.hair if hefty:
                                     -2stem_corr fi,stem1);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -1.5fudged.hair-0.86111jut+0.16667cap_hair+0.33667
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.671 ...udged.hair if hefty:-2stem_corr fi,stem1)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.672 stem2=if hefty:
                     .1[vair,stem4] else: stem4 fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5right_curve-0.5curve-1.5fudged.hair-0.86111jut+0.16667cap_hair+0.33667
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.673 stem3=max(stem2,stem1-3stem_corr)
                                       ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.676 y4=y5=if monospace:
                          vround .6 fi\\ h; upper_notch=y4-notch_cut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> monospace
>> hefty
! Not implemented: (unknown numeric)or(unknown numeric).
<to be read again> 
                   :
l.677 mid_corr=if monospace or hefty:
                                     -.3apex_corr else: .5jut fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.677 mid_corr=if monospace or hefty:
                                     -.3apex_corr else: .5jut fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.678 alpha=diag_ratio(
                       4,stem2-stem3+stem4,y1-y2,x8r-x1l+mid_corr-2apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha2
>> -0.5fudged.hair-0.86111jut+0.16667cap_hair+0.33667
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.679 penpos1(alpha*stem1,
                          0); penpos2(alpha*stem1,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -0.5fudged.hair-0.86111jut+0.16667cap_hair+0.33667
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.679 penpos1(alpha*stem1,0); penpos2(alpha*stem1,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> fudged.hair
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.680 penpos3(alpha*stem2,
                          0); penpos4(alpha*stem2,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> 1.33333x3r-0.66667x4-0.20741jut+0.11111cap_hair+0.22441
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.680 penpos3(alpha*stem2,0); penpos4(alpha*stem2,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -x4l+x4r
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.681 penpos5(alpha*stem3,
                          0); penpos6(alpha*stem3,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -x4l+x4r
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.681 penpos5(alpha*stem3,0); penpos6(alpha*stem3,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -x4l+x4r
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.682 penpos7(alpha*stem4,
                          0); penpos8(alpha*stem4,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha2
>> -x4l+x4r
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.682 penpos7(alpha*stem4,0); penpos8(alpha*stem4,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5x4l-0.5x4r-0.39444jut+0.16667cap_hair+0.33664
! Not implemented: floor(unknown numeric).
<to be read again> 
                   ;
l.683 x4l-x1l=floor(x4l-x1l+.5(x5r+mid_corr-x4r));
                                                   % |x5r| $\approx$ |x4r+mi...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> %CAPSULE5929
>> (-0.5x4r+0.09445jut+0.08333cap_hair+0.1683,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.684 z23=whatever[z1r,z2r]
                           =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6703
>> (-0.5x4r+0.09445jut+0.08333cap_hair+0.16829,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.684 z23=whatever[z1r,z2r]=whatever[z3l,z4l]
                                             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6909
>> (0.375x23+0.0625cap_hair+0.12622,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.685 z45=whatever[z3r,z4r]
                           =whatever[z5l,z6l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5578
>> (0.375x23+0.0625cap_hair+0.12624,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.685 z45=whatever[z3r,z4r]=whatever[z5l,z6l]
                                             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE7005
>> (0.07954cap_hair+0.16066,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.686 z67=whatever[z5r,z6r]
                           =whatever[z7l,z8l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4458
>> (0.07954cap_hair+0.16066,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.686 z67=whatever[z5r,z6r]=whatever[z7l,z8l]
                                             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.687 fill diag_end(
                    1l,2l,1,1,3r,4r){z4-z3}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.687 fill diag_end(
                    1l,2l,1,1,3r,4r){z4-z3}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.687 fill diag_end(
                    1l,2l,1,1,3r,4r){z4-z3}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.697 if serifs:
                 numeric inner_jut[]; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [119]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter x"
l.713 cmchar "The letter x"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter x"
l.713 cmchar "The letter x"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.714 beginchar("x",if serifs:
                              9.5u# else:9u# fi,x_height#,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.714 ...,if serifs:9.5u# else:9u# fi,x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.714 ...,if serifs:9.5u# else:9u# fi,x_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.715 italcorr x_height#*slant-
                               .05u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.01l_width#+0.02serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.715 italcorr x_height#*slant-.05u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.716 adjust_fit(
                 serif_fit# if monospace:+\\.5u#,.5u#+ else:,fi\\ serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.716 adjust_fit(
                 serif_fit# if monospace:+\\.5u#,.5u#+ else:,fi\\ serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5right_curve-0.5curve
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.718 ...-4stem_corr; stem2=min(fudged.hair,stem1)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.719 outer_jut=.75jut; xjut= if serifs:
                                         (stem1-stem2)/4 else: 0 fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.723 alpha1=diag_ratio(
                        1,stem1,h,x4r-x1l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.724 alpha2=diag_ratio(
                        1,stem2,h,x2r-x3l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> alpha
>> 0.5right_curve-0.5curve-0.00002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.725 penpos1(alpha1*stem1,
                           0); penpos2(alpha2*stem2,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> alpha
>> 0.5right_curve-0.5curve-0.00002
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.726 ...s3(alpha2*stem2,0); penpos4(alpha1*stem1,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.727 if hefty:
                z0=whatever[z1,z4]=whatever[z2,z3];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.735 else: fill diag_end(
                          4r,1r,.5,1,1l,4l)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.735 else: fill diag_end(
                          4r,1r,.5,1,1l,4l)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.735 else: fill diag_end(
                          4r,1r,.5,1,1l,4l)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.737  fill diag_end(
                     2l,3l,.5,1,3r,2r)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.737  fill diag_end(
                     2l,3l,.5,1,3r,2r)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.737  fill diag_end(
                     2l,3l,.5,1,3r,2r)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.739 if serifs:
                 numeric inner_jut[]; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [120]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter y"
l.754 cmchar "The letter y"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter y"
l.754 cmchar "The letter y"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.755 beginchar("y",if serifs:
                              9.5u# else:9u# fi,x_height#,desc_depth#);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.755 ...:9.5u# else:9u# fi,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.755 ...:9.5u# else:9u# fi,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.755 ...:9.5u# else:9u# fi,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.756 italcorr x_height#*slant+
                               .25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.05l_width#-0.1serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.756 italcorr x_height#*slant+.25u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.757 adjust_fit(
                 serif_fit# if monospace:+\\.5u#,.5u#+ else:,fi\\ serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.757 adjust_fit(
                 serif_fit# if monospace:+\\.5u#,.5u#+ else:,fi\\ serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.760 right_stem=fudged.hair if hefty:
                                      -2stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.761 bot_stem=fudged.hair if hefty:
                                    -8stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.762 bot_vair=Vround(
                      if serifs: vair else:.5[vair,bot_stem] fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.766 alpha1=diag_ratio(
                        2,bot_stem,y1-y3,x4r-x1l-apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.767 alpha2=diag_ratio(
                        1,bot_stem,y1-y9,x4r-x9);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> %CAPSULE5706
>> (0.00002diag_ratio+0.00273,-Vround)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.769 ...; z3l=whatever[z9,z4r-(alpha*bot_stem,0)]
                                                  ; fi
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

! Redundant equation.
<to be read again> 
                   endgroup
l.770 penpos3(alpha*bot_stem,0)
                               ; penpos4(alpha*right_stem,0);
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> 0
>> 0.00002diag_ratio-0.00003
! Not implemented: (known numeric)++(unknown numeric).
<to be read again> 
                   )
l.771 alpha3=(y1++(x2l-x1l))
                            /y1;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.00002diag_ratio-0.00003
! Division by zero.
<to be read again> 
                   ;
l.771 alpha3=(y1++(x2l-x1l))/y1;
                                
You're trying to divide the quantity shown above the error
message by zero. I'm going to divide it by one instead.

>> %CAPSULE6805
>> (0.00002diag_ratio-0.00003,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.773 z0=whatever[z1r,z2r]
                          =z4l+whatever*(z3r-z4r);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.774 if y0>notch_cut:
                       y0:=notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.00002diag_ratio-0.00002
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.778 else: fill z0--
                     diag_end(0,4l,1,1,4r,3r)--z3r--z2l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.778 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--z3r--z2l
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.778 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--z3r--z2l
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.778 else: fill z0--diag_end(
                              0,4l,1,1,4r,3r)--z3r--z2l
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.781 if serifs:
                 numeric light_bulb; light_bulb=hround 7/8[hair,flare]; clea...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   ..
---->..
       tension.infinity..
l.792  fill stroke z3e---
                         z5e...{left}z6e;  % arc
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.792  fill stroke z3e---
                         z5e...{left}z6e;  % arc
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.792  fill stroke z3e---
                         z5e...{left}z6e;  % arc
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.793  pickup fine.nib;
                        pos6'(bot_vair,-90); z6'=z6;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.793  pickup fine.nib;
                        pos6'(bot_vair,-90); z6'=z6;
(That was another `errmessage'.)

>> pos6'
! Isolated expression.
<to be read again> 
                   (
l.793  pickup fine.nib; pos6'(
                              bot_vair,-90); z6'=z6;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.793  pickup fine.nib; pos6'(
                              bot_vair,-90); z6'=z6;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.794  pos7(
            2/3[bot_vair,flare],-85);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.794  pos7(
            2/3[bot_vair,flare],-85);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y7l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.795 ... bot y7r=vround-.96d-oo; y7l:=good.y y7l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.796  filldraw stroke term.e(
                              6',7,left,1,4); fi % arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.796  filldraw stroke term.e(
                              6',7,left,1,4); fi % arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.796  filldraw stroke term.e(
                              6',7,left,1,4); fi % arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.796  filldraw stroke term.e(
                              6',7,left,1,4); fi % arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.796  filldraw stroke term.e(
                              6',7,left,1,4); fi % arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [121]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The letter z"
l.799 cmchar "The letter z"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The letter z"
l.799 cmchar "The letter z"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.6l_width#-3.2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.800 beginchar("z",8u#,x_height#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.800 beginchar("z",8u#,x_height#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.801 italcorr x_height#*slant-
                               .5serif_fit#-.3u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.06l_width#-0.38serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.801 italcorr x_height#*slant-.5serif_fit#-.3u#;
                                                 
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.802 adjust_fit(
                 0,.5serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.802 adjust_fit(
                 0,.5serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.804 if hefty:
                arm_thickness1=Vround(vair-vair_corr); arm_thickness2=vair;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.807 pickup tiny.nib;
                       rt x1r=rt x2r=hround(w-.8u); lft x3l=lft x4l=hround .5u;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.807 pickup tiny.nib;
                       rt x1r=rt x2r=hround(w-.8u); lft x3l=lft x4l=hround .5u;
(That was another `errmessage'.)

>> 0.66667vair'
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.66667vair')> if(EXPR0)>u_:
                                 u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.809 bot y4=0; y3=max(y4,2/3arm_thickness2)
                                            ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.810 numeric alpha; alpha=diag_ratio(
                                      1,z_stem-tiny,y2-y3,x2r-x3l-slant*(y2-...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> diag_ratio
>> 0.9stem-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.811 penpos1(alpha*(z_stem-tiny),
                                  0); penpos2(alpha*(z_stem-tiny),0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_ratio
>> 0.9stem-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.811 ...em-tiny),0); penpos2(alpha*(z_stem-tiny),
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_ratio
>> 0.9stem-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.812 penpos3(alpha*(z_stem-tiny),
                                  0); penpos4(alpha*(z_stem-tiny),0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_ratio
>> 0.9stem-tiny
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.812 ...em-tiny),0); penpos4(alpha*(z_stem-tiny),
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0.9stem-tiny,0)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   ;
l.813 ...lta; delta=penoffset z3-z2 of currentpen;
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (xpart delta,ypart delta)
>> pen
! Equation cannot be performed (pair=pen).
<to be read again> 
                   ;
l.813 ...lta; delta=penoffset z3-z2 of currentpen;
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> -0.9stem+tiny
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.814 fill top lft z1l--
                        z2l+delta---z3l+delta..lft z3l---lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> xpart delta-0.9stem+tiny
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.814 fill top lft z1l--z2l+delta---
                                    z3l+delta..lft z3l---lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.814 fill top lft z1l--z2l+delta---
                                    z3l+delta..lft z3l---lft z4l..bot z4l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> xpart delta
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.814 fill top lft z1l--z2l+delta---z3l+delta..
                                               lft z3l---lft z4l..bot z4l
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
l.814 fill top lft z1l--z2l+delta---z3l+delta..
                                               lft z3l---lft z4l..bot z4l
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.9stem-tiny
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.815  ---bot rt z4r--
                      z3r-delta---z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -xpart delta+0.9stem-tiny
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.815  ---bot rt z4r--z3r-delta---
                                  z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.815  ---bot rt z4r--z3r-delta---
                                  z2r-delta..rt z2r---rt z1r..top z1r
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -xpart delta
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
l.815  ---bot rt z4r--z3r-delta---z2r-delta..
                                             rt z2r---rt z1r..top z1r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -ypart delta
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
l.815  ---bot rt z4r--z3r-delta---z2r-delta..
                                             rt z2r---rt z1r..top z1r
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.817 pickup crisp.nib;
                        pos5(arm_thickness1,90); pos6(hair,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.817 pickup crisp.nib;
                        pos5(arm_thickness1,90); pos6(hair,180);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.817 pickup crisp.nib; pos5(
                             arm_thickness1,90); pos6(hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.817 pickup crisp.nib; pos5(
                             arm_thickness1,90); pos6(hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.817 ...crisp.nib; pos5(arm_thickness1,90); pos6(
                                                  hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.817 ...crisp.nib; pos5(arm_thickness1,90); pos6(
                                                  hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y5l-0.7143beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.818 ...x6r=hround .75u; y6=good.y(y5l-beak/1.4)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.819 arm(
          5,6,a,beak_darkness,-.4beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.819 arm(
          5,6,a,beak_darkness,-.4beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.820 pos7(
           arm_thickness2,-90); pos8(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.820 pos7(
           arm_thickness2,-90); pos8(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.820 pos7(arm_thickness2,-90); pos8(
                                     hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.820 pos7(arm_thickness2,-90); pos8(
                                     hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y7l+0.83333beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.821 ...=hround(w-.75u); y8=good.y(y7l+beak/1.2)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.822 arm(
          7,8,b,beak_darkness,.6beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.822 arm(
          7,8,b,beak_darkness,.6beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [122]) (greeku.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Gamma"
l.9 cmchar "Uppercase Greek Gamma"
                                  ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Gamma"
l.9 cmchar "Uppercase Greek Gamma"
                                  ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.2l_width#-4.4serif_fit#-width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.10 ...ar(oct"000",11u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.10 ...ar(oct"000",11u#-width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.11 italcorr cap_height#*slant-
                                beak_jut#-.25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.05l_width#+0.1serif_fit#-beak_jut#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.11 italcorr cap_height#*slant-beak_jut#-.25u#;
                                                
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.12 adjust_fit(
                cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.12 adjust_fit(
                cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.16667right_curve-0.16667curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.13 h:=vround(h-stem_corr);
                            
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.14 pickup tiny.nib;
                      pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.14 pickup tiny.nib;
                      pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.14 pickup tiny.nib; pos1(
                           cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.14 pickup tiny.nib; pos1(
                           cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.14 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                             cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.14 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                             cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.08333right_curve-0.08333curve-0.50436
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.15 lft x1l=lft x2l=hround max(2u,3u-.5cap_stem)
                                                 ; top y1=h; bot y2=0;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.16 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.16 filldraw stroke z1e--
                          z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.16 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.16 filldraw stroke z1e--
                          z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.16 filldraw stroke z1e--
                          z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.17 pickup crisp.nib;
                       pos3(slab,90); pos4(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.17 pickup crisp.nib;
                       pos3(slab,90); pos4(hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.17 pickup crisp.nib; pos3(
                            slab,90); pos4(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.17 pickup crisp.nib; pos3(
                            slab,90); pos4(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.17 pickup crisp.nib; pos3(slab,90); pos4(
                                           hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.17 pickup crisp.nib; pos3(slab,90); pos4(
                                           hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y3l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.18 ...t x4r=hround(w-.75u); y4=good.y(y3l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.19 arm(
         3,4,e,beak_darkness,beak_jut);  % arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 arm(
         3,4,e,beak_darkness,beak_jut);  % arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.20 if serifs:
                nodish_serif(1,2,a,1/3,cap_jut,b,1/3,.5cap_jut);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.22 math_fit(
              0,ic#-2.5u#); penlabels(1,2,3,4); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.22 math_fit(
              0,ic#-2.5u#); penlabels(1,2,3,4); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(linearform)> ...ule((0,(EXPR0)),(w,(EXPR0)));
                                                   ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
The expression shown above has the wrong type to be output.

 [0]
>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.22 ...(0,ic#-2.5u#); penlabels(1,2,3,4); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Delta"
l.24 cmchar "Uppercase Greek Delta"
                                   ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Delta"
l.24 cmchar "Uppercase Greek Delta"
                                   ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 3l_width#-6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.25 beginchar(oct"001",15u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.25 beginchar(oct"001",15u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.26 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.26 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.28 left_stem=cap_hair if hefty:
                                  -3stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.31 alpha=diag_ratio(
                      2,left_stem,y2-y1,x4r-x1l-apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.495x1r-0.00034
>> -0.16667right_curve+0.16667curve+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.33 penpos3(alpha*cap_stem,
                            0); penpos4(alpha*cap_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.495x1r-0.00034
>> -0.16667right_curve+0.16667curve+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.33 ...alpha*cap_stem,0); penpos4(alpha*cap_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.34 fill diag_end(
                   2l,1l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)--cycle;  % tr...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.34 fill diag_end(
                   2l,1l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)--cycle;  % tr...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.34 fill diag_end(
                   2l,1l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)--cycle;  % tr...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> %CAPSULE6722
>> (-0.5x1r+0.0003,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.35 z0=whatever[z1r,z2r]
                         =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6847
>> (-0.5x1r+0.00034,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.35 z0=whatever[z1r,z2r]=whatever[z3l,z4l]
                                           ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4555
>> (-0.16667right_curve+0.16667curve+1.0068,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.36 y5=y6=cap_vstem; z5=whatever[z1r,z2r]
                                          ; z6=whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6271
>> (-0.16667right_curve+0.16667curve+1.00684,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.36 ...z5=whatever[z1r,z2r]; z6=whatever[z3l,z4l]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> cap_notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.37 if y0<h-cap_notch_cut:
                            y0:=h-cap_notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.16667right_curve-0.16667curve-1.0062
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40 else: unfill z0--
                      z5--z6--cycle; fi  % counter
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve-1.0062
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40 else: unfill z0--z5--
                          z6--cycle; fi  % counter
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve-1.0062
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40 else: unfill z0--z5--z6--
                              cycle; fi  % counter
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [1]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Theta"
l.43 cmchar "Uppercase Greek Theta"
                                   ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Theta"
l.43 cmchar "Uppercase Greek Theta"
                                   ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.8l_width#-5.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.44 beginchar(oct"002",14u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.44 beginchar(oct"002",14u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.45 italcorr .7cap_height#*slant-
                                  .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.45 italcorr .7cap_height#*slant-.5u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.46 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.46 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.33333right_curve-0.33333curve+cap_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.47 ... light_curve=hround(cap_curve-2stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ,
l.48 ...air,90); penpos3(vround(vair+.5vair_corr),
                                                  -90);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.50 if monospace:
                   x2r=hround 1.5u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> unknown path path_.l
>> pulled_super_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_super_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> ..._(SUFFIX0):=pulled_super_arc(SUFFIX0)(
                                                  1,2)(0.5superpull)&pulled_...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.57 ...led_super_arc.e(4,1)(.5superpull) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.58 pickup crisp.nib;
                       pos5(cap_vstem,90); pos6(cap_vstem,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.58 pickup crisp.nib;
                       pos5(cap_vstem,90); pos6(cap_vstem,90);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.58 pickup crisp.nib; pos5(
                            cap_vstem,90); pos6(cap_vstem,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58 pickup crisp.nib; pos5(
                            cap_vstem,90); pos6(cap_vstem,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.58 pickup crisp.nib; pos5(cap_vstem,90); pos6(
                                                cap_vstem,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58 pickup crisp.nib; pos5(cap_vstem,90); pos6(
                                                cap_vstem,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.33333right_curve-0.33333curve+cap_curve+0.99908
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
l.59 lft x5=w-rt x6=hround(x2l+u)+
                                  1; y5=y6=.5[y1l,y3l];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.60 filldraw stroke z5e--
                          z6e;  % bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.60 filldraw stroke z5e--
                          z6e;  % bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.60 filldraw stroke z5e--
                          z6e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.60 filldraw stroke z5e--
                          z6e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.60 filldraw stroke z5e--
                          z6e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.61 if serifs:
                pos7(hair,0); pos8(hair,0); pos9(hair,0); pos10(hair,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.66 math_fit(
              -.3cap_height#*slant-.5u#,ic#-.5u#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.66 math_fit(
              -.3cap_height#*slant-.5u#,ic#-.5u#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [2]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Lambda"
l.69 cmchar "Uppercase Greek Lambda"
                                    ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Lambda"
l.69 cmchar "Uppercase Greek Lambda"
                                    ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.4l_width#-4.8serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.70 beginchar(oct"003",12u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.70 beginchar(oct"003",12u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.71 adjust_fit(
                cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.71 adjust_fit(
                cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.73 left_stem=cap_hair if hefty:
                                  -3stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.76 alpha=diag_ratio(
                      2,left_stem,y2-y1,x4r-x1l-apex_corr);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.165right_curve+0.165curve+0.99608
>> -0.16667right_curve+0.16667curve+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.78 penpos3(alpha*cap_stem,
                            0); penpos4(alpha*cap_stem,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.165right_curve+0.165curve+0.99608
>> -0.16667right_curve+0.16667curve+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.78 ...alpha*cap_stem,0); penpos4(alpha*cap_stem,
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6491
>> (-0.16667right_curve+0.16667curve+1.00333,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.79 z0=whatever[z1r,z2r]
                         =whatever[z3l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4106
>> (-0.16667right_curve+0.16667curve+1.00333,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.79 z0=whatever[z1r,z2r]=whatever[z3l,z4l]
                                           ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

! Inconsistent equation (off by -0.00351).
<to be read again> 
                   ;
l.79 z0=whatever[z1r,z2r]=whatever[z3l,z4l];
                                            
The equation I just read contradicts what was said before.
But don't worry; continue and I'll just ignore it.

>> cap_notch_cut
! Unknown relation will be considered false.
<to be read again> 
                   :
l.80 if y0<h-cap_notch_cut:
                            y0:=h-cap_notch_cut;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.16667right_curve-0.16667curve-1.00969
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.84 else: fill z0--
                    diag_end(0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.84 else: fill z0--diag_end(
                             0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.84 else: fill z0--diag_end(
                             0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.84 else: fill z0--diag_end(
                             0,4l,1,1,4r,3r)--diag_end(4r,3r,1,1,2l,1l)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.86 if serifs:
                numeric inner_jut; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [3]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Xi"
l.94 cmchar "Uppercase Greek Xi"
                                ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Xi"
l.94 cmchar "Uppercase Greek Xi"
                                ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.4l_width#-4.8serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.95 beginchar(oct"004",12u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.95 beginchar(oct"004",12u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.96 italcorr cap_height#*slant-
                                .35u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.07l_width#+0.14serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.96 italcorr cap_height#*slant-.35u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.97 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.97 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.33333right_curve-0.33333curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.98 h:=vround(h-2stem_corr);
                             
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.1275right_curve+0.1275curve+1.27026
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.99 ...; shaved_stem=hround .9[vair,.85cap_stem];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -crisp.breadth-0.1275right_curve+0.1275curve+1.27026
! Unknown relation will be considered false.
<to be read again> 
                   :
l.100 if shaved_stem<crisp.breadth:
                                    shaved_stem:=crisp.breadth; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.101 pickup crisp.nib;
                        pos1(shaved_stem,90); pos2(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.101 pickup crisp.nib;
                        pos1(shaved_stem,90); pos2(hair,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.101 pickup crisp.nib; pos1(
                             shaved_stem,90); pos2(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.101 pickup crisp.nib; pos1(
                             shaved_stem,90); pos2(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.101 ...up crisp.nib; pos1(shaved_stem,90); pos2(
                                                  hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.101 ...up crisp.nib; pos1(shaved_stem,90); pos2(
                                                  hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y1l-0.44444beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.102 ...r=hround(w-.85u); y2=good.y(y1l-4/9beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.103 arm(
          1,2,a,.4beak_darkness,.3beak_jut);  % upper right arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.103 arm(
          1,2,a,.4beak_darkness,.3beak_jut);  % upper right arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.104 pos3(
           hair,180); x3=w-x2; y3=y2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.104 pos3(
           hair,180); x3=w-x2; y3=y2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.105 arm(
          1,3,b,.4beak_darkness,-.3beak_jut);  % upper left arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.105 arm(
          1,3,b,.4beak_darkness,-.3beak_jut);  % upper left arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.106 pos4(
           shaved_stem,-90); pos5(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.106 pos4(
           shaved_stem,-90); pos5(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.106 pos4(shaved_stem,-90); pos5(
                                  hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.106 pos4(shaved_stem,-90); pos5(
                                  hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y4l+0.5beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.107 ...5r=hround(w-.75u); y5=good.y(y4l+.5beak)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.108 arm(
          4,5,c,.4beak_darkness,.3beak_jut);  % lower right arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.108 arm(
          4,5,c,.4beak_darkness,.3beak_jut);  % lower right arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.109 pos6(
           hair,180); x6=w-x5; y6=y5;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.109 pos6(
           hair,180); x6=w-x5; y6=y5;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.110 arm(
          4,6,d,.4beak_darkness,-.3beak_jut);  % lower left arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.110 arm(
          4,6,d,.4beak_darkness,-.3beak_jut);  % lower left arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.111 pos7(
           shaved_stem,90); pos8(shaved_stem,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.111 pos7(
           shaved_stem,90); pos8(shaved_stem,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.111 pos7(shaved_stem,90); pos8(
                                 shaved_stem,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.111 pos7(shaved_stem,90); pos8(
                                 shaved_stem,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.112 lft x7=w-rt x8=hround if serifs:
                                       2.5 else: 2 fi\\ u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.10959right_curve-0.10959curve+1.39514
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.113 top y7r=top y8r=vround(.52h+.5shaved_stem);
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z7e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.114 filldraw stroke z7e--
                           z8e;  % middle bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z7e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.114 filldraw stroke z7e--
                           z8e;  % middle bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z7e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.114 filldraw stroke z7e--
                           z8e;  % middle bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.114 filldraw stroke z7e--
                           z8e;  % middle bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.114 filldraw stroke z7e--
                           z8e;  % middle bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.115 if serifs:
                 numeric xjut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.123 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6,7,8,11,12,13,14); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.123 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6,7,8,11,12,13,14); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.33333right_curve-0.33333curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.33333right_curve-0.33333curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(linearform)> ...ule((0,(EXPR0)),(w,(EXPR0)));
                                                   ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.33333right_curve-0.33333curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.33333right_curve-0.33333curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
The expression shown above has the wrong type to be output.

 [4]
>> 0.33333right_curve-0.33333curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.33333right_curve-0.33333curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.33333right_curve-0.33333curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.33333right_curve-0.33333curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.123 ...els(1,2,3,4,5,6,7,8,11,12,13,14); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Pi"
l.125 cmchar "Uppercase Greek Pi"
                                 ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Pi"
l.125 cmchar "Uppercase Greek Pi"
                                 ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.6l_width#-5.2serif_fit#+width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.126 ...r(oct"005",13u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.126 ...r(oct"005",13u#+width_adj#,cap_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.127 italcorr cap_height#*slant-
                                 cap_serif_fit#+cap_jut#-2.5u#+min(.5cap_ste...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2l_width#-0.4serif_fit#-0.5cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.127 ...f_fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5l_width#+serif_fit#+0.5cap_stem#+cap_jut#-cap_serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.127 ..._fit#+cap_jut#-2.5u#+min(.5cap_stem#,u#);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.128 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#); pickup tiny.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.128 adjust_fit(
                 cap_serif_fit#,cap_serif_fit#); pickup tiny.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.128 ...if_fit#,cap_serif_fit#); pickup tiny.nib;
                                                  
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.128 ...if_fit#,cap_serif_fit#); pickup tiny.nib;
                                                  
(That was another `errmessage'.)

>> 0.16667right_curve-0.16667curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.129 h:=vround(h-stem_corr);
                             
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.130 pos1(
           cap_stem,0); pos2(cap_stem,0); pos3(cap_stem,0); pos4(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.130 pos1(
           cap_stem,0); pos2(cap_stem,0); pos3(cap_stem,0); pos4(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.130 pos1(cap_stem,0); pos2(
                             cap_stem,0); pos3(cap_stem,0); pos4(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.130 pos1(cap_stem,0); pos2(
                             cap_stem,0); pos3(cap_stem,0); pos4(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.130 pos1(cap_stem,0); pos2(cap_stem,0); pos3(
                                               cap_stem,0); pos4(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.130 pos1(cap_stem,0); pos2(cap_stem,0); pos3(
                                               cap_stem,0); pos4(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.130 ...pos2(cap_stem,0); pos3(cap_stem,0); pos4(
                                                  cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.130 ...pos2(cap_stem,0); pos3(cap_stem,0); pos4(
                                                  cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.08333right_curve-0.08333curve-0.50436
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.131 lft x1l=lft x2l=hround max(2u,3u-.5cap_stem)
                                                  ; x3=x4=w-x1;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133 filldraw stroke z1e--
                           z2e; % left stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133 filldraw stroke z1e--
                           z2e; % left stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133 filldraw stroke z1e--
                           z2e; % left stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.133 filldraw stroke z1e--
                           z2e; % left stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z3e--
                           z4e; % right stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z3e--
                           z4e; % right stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z3e--
                           z4e; % right stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z3e--
                           z4e; % right stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 fill stroke z5e--
                       z6e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 fill stroke z5e--
                       z6e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 fill stroke z5e--
                       z6e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.138 if serifs:
                 numeric inner_jut;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.145 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.145 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
proofrule->...part(EXPR0);numspecial.ypart(EXPR0);
                                                  numspecial.xpart(EXPR1);nu...
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(linearform)> ...ule((0,(EXPR0)),(w,(EXPR0)));
                                                   ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

>> 0.16667right_curve-0.16667curve+0.5
! Unsuitable expression.
<to be read again> 
                   ;
<for(0)> ...frule(((EXPR0),-d.o_),((EXPR0),h.o_));
                                                   ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...dchar;if.proofing>0:makebox(proofrule)
                                                  ;fi.chardx:=w;shipit;if.di...
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
The expression shown above has the wrong type to be output.

 [5]
>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
screenrule->....currentpicture.doublepath(EXPR0)--
                                                  (EXPR1)withpen.rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(linearform)> ...rule((0,(EXPR0)),(w,(EXPR0)))
                                                  ; ENDFOR
makebox->...h.o_,-d.o_:(TEXT0)((0,y),(w,y));endfor
                                                  .for.x=0,w:(TEXT0)((x,-d.o...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.16667right_curve-0.16667curve+0.5
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   withpen
screenrule->...e.doublepath(EXPR0)--(EXPR1)withpen
                                                  .rulepen
<for(0)> ...enrule(((EXPR0),-d.o_),((EXPR0),h.o_))
                                                  ; ENDFOR
makebox->...0,w:(TEXT0)((x,-d.o_),(x,h.o_));endfor
                                                  .if.charic<>0:(TEXT0)((w+c...

endchar->...it;if.displaying>0:makebox(screenrule)
                                                  ;showit;fi.endgroup
l.145 ...0,.5ic#); penlabels(1,2,3,4,5,6); endchar
                                                  ;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Sigma"
l.147 cmchar "Uppercase Greek Sigma"
                                    ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Sigma"
l.147 cmchar "Uppercase Greek Sigma"
                                    ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.6l_width#-5.2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.148 beginchar(oct"006",13u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.148 beginchar(oct"006",13u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.149 italcorr cap_height#*slant-
                                 beak_jut#-.5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#-beak_jut#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.149 italcorr cap_height#*slant-beak_jut#-.5u#;
                                                
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.150 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.150 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Vround0.25
>> -slab
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.152 bot_arm_thickness=Vround .25[slab,cap_vstem]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.153 pickup tiny.nib;
                       lft x1l=hround u; x1l=x2l=x4l;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.153 pickup tiny.nib;
                       lft x1l=hround u; x1l=x2l=x4l;
(That was another `errmessage'.)

>> 0.00067
>> -slab-0.00049
! Not implemented: (known numeric)++(unknown numeric).
<to be read again> 
                   )
l.155 numeric alpha[]; alpha1=((x3l-x1l)++(y2-y3))
                                                  /(y2-y3);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -slab-0.00049
>> -slab-0.00049
! Not implemented: (unknown numeric)/(unknown numeric).
<to be read again> 
                   ;
l.155 ...a[]; alpha1=((x3l-x1l)++(y2-y3))/(y2-y3);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -slab-0.00049
>> -0.16667right_curve+0.16667curve-tiny+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.156 penpos1(alpha1*(cap_stem-tiny),
                                     0); penpos2(alpha1*(cap_stem-tiny),0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -slab-0.00049
>> -0.16667right_curve+0.16667curve-tiny+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.156 ...tiny),0); penpos2(alpha1*(cap_stem-tiny),
                                                  0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -slab-0.00049
>> -0.16667right_curve+0.16667curve-tiny+1.00688
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.157 penpos3(alpha1*(cap_stem-tiny),
                                     0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.158 alpha2=diag_ratio(
                        1,cap_hair-tiny,y3-y4,x3r-x4l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.165right_curve+0.165curve+0.99608
>> -tiny-2.02023
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.159 penpos4(alpha2*(cap_hair-tiny),
                                     0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6332
>> (0.00067,slab+0.00049)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.160 z0=whatever[z2l,z3l]
                          =z4l+whatever*(z3r-z4r);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6286
>> (-0.16667right_curve+0.16667curve+3.02779,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ;
l.160 z0=whatever[z2l,z3l]=z4l+whatever*(z3r-z4r);
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -slab-0.00049
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161 filldraw z1l--z2l--
                         z0--z4l--z4r--z3r--z2r--z1r--cycle;  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -tiny-2.02023
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161 filldraw z1l--z2l--z0--z4l--z4r--
                                       z3r--z2r--z1r--cycle;  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -tiny-2.01956
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161 filldraw z1l--z2l--z0--z4l--z4r--z3r--
                                            z2r--z1r--cycle;  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -tiny-2.02023
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161 filldraw z1l--z2l--z0--z4l--z4r--z3r--z2r--
                                                 z1r--cycle;  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -slab-0.00049
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161 filldraw z1l--z2l--z0--z4l--z4r--z3r--z2r--
                                                 z1r--cycle;  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -tiny-2.02023
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.161 ...w z1l--z2l--z0--z4l--z4r--z3r--z2r--z1r--
                                                  cycle;  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.162 pickup crisp.nib;
                        pos5(slab,90); pos6(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.162 pickup crisp.nib;
                        pos5(slab,90); pos6(hair,0);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.162 pickup crisp.nib; pos5(
                             slab,90); pos6(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.162 pickup crisp.nib; pos5(
                             slab,90); pos6(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.162 pickup crisp.nib; pos5(slab,90); pos6(
                                            hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.162 pickup crisp.nib; pos5(slab,90); pos6(
                                            hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y5l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.163 ... rt x6r=hround(w-u); y6=good.y(y5l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.164 arm(
          5,6,a,beak_darkness,beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 arm(
          5,6,a,beak_darkness,beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.165 pos7(
           bot_arm_thickness,-90); pos8(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165 pos7(
           bot_arm_thickness,-90); pos8(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.165 pos7(bot_arm_thickness,-90); pos8(
                                        hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165 pos7(bot_arm_thickness,-90); pos8(
                                        hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.166 ...z3]; x7r:=x4; x8=x6; y8=good.y(y7l+beak)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.167 arm(
          7,8,b,beak_darkness,beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.167 arm(
          7,8,b,beak_darkness,beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.168 math_fit(
               0,.5ic#); penlabels(0,1,2,3,4,5,6,7,8); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.168 math_fit(
               0,.5ic#); penlabels(0,1,2,3,4,5,6,7,8); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [6]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Upsilon"
l.170 cmchar "Uppercase Greek Upsilon"
                                      ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Upsilon"
l.170 cmchar "Uppercase Greek Upsilon"
                                      ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.8l_width#-5.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.171 beginchar(oct"007",14u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.171 beginchar(oct"007",14u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.8cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.172 italcorr .8cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.172 italcorr .8cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.173 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.173 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.174 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.174 pickup tiny.nib;
                       pos1(cap_stem,0); pos2(cap_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.174 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.174 pickup tiny.nib; pos1(
                            cap_stem,0); pos2(cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.174 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.174 pickup tiny.nib; pos1(cap_stem,0); pos2(
                                              cap_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y3r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.180 fill z3r{
               up}...z4r{left}...{down}diag_end(5'r,5r,1,1,5l,5'l){up}
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.180 fill z3r{up}...z4r{
                         left}...{down}diag_end(5'r,5r,1,1,5l,5'l){up}
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.180 fill z3r{up}...z4r{left}...{down}diag_end(
                                                5'r,5r,1,1,5l,5'l){up}
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.180 fill z3r{up}...z4r{left}...{down}diag_end(
                                                5'r,5r,1,1,5l,5'l){up}
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.180 fill z3r{up}...z4r{left}...{down}diag_end(
                                                5'r,5r,1,1,5l,5'l){up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x6r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.185 fill z6r{
               up}...z7r{right}...{down}diag_end(8'r,8r,1,1,8l,8'l){up}
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.185 fill z6r{
               up}...z7r{right}...{down}diag_end(8'r,8r,1,1,8l,8'l){up}
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.75cap_curve+o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.185 fill z6r{up}...z7r{
                         right}...{down}diag_end(8'r,8r,1,1,8l,8'l){up}
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> diag_end
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.185 fill z6r{up}...z7r{right}...{down}diag_end(
                                                 8'r,8r,1,1,8l,8'l){up}
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Not a cycle.
<to be read again> 
                   (
l.185 fill z6r{up}...z7r{right}...{down}diag_end(
                                                 8'r,8r,1,1,8l,8'l){up}
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.185 fill z6r{up}...z7r{right}...{down}diag_end(
                                                 8'r,8r,1,1,8l,8'l){up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.187 if serifs:
                 dish_serif(2,1,a,1/3,1.25cap_jut,b,1/3,1.25cap_jut); fi  % ...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.188 math_fit(
               -.8cap_height#*slant-.5u#,ic#-2.5u#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.188 math_fit(
               -.8cap_height#*slant-.5u#,ic#-2.5u#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [7]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Phi"
l.191 cmchar "Uppercase Greek Phi"
                                  ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Phi"
l.191 cmchar "Uppercase Greek Phi"
                                  ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.6l_width#-5.2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.192 beginchar(oct"010",13u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.192 beginchar(oct"010",13u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.5cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.193 italcorr .5cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.193 italcorr .5cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.194 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.194 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.198 pickup tiny.nib;
                       pos1(shaved_stem,0); pos2(shaved_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.198 pickup tiny.nib;
                       pos1(shaved_stem,0); pos2(shaved_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.198 pickup tiny.nib; pos1(
                            shaved_stem,0); pos2(shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.198 pickup tiny.nib; pos1(
                            shaved_stem,0); pos2(shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.198 pickup tiny.nib; pos1(shaved_stem,0); pos2(
                                                 shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.198 pickup tiny.nib; pos1(shaved_stem,0); pos2(
                                                 shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.200 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.200 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.200 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.200 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.200 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.204 y3r=vround(.85h if serifs:
                                -slab fi); y4=y6=.5[y3,y5];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.205 y5r=vround(.15h if serifs:
                                +slab fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> unknown path path_.l
>> pulled_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             3,4)&pulled_arc(SUFFIX0)(4,5)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             3,4)&pulled_arc(SUFFIX0)(4,5)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             3,4)&pulled_arc(SUFFIX0)(4,5)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             3,4)&pulled_arc(SUFFIX0)(4,5)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.207 ...d_arc.e(5,6) & pulled_arc.e(6,3) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.208 if serifs:
                 dish_serif(1,2,a,1/3,1.25cap_jut,b,1/3,1.25cap_jut);  % upp...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.210 math_fit(
               -.5cap_height#*slant-.5u#,ic#); penlabels(1,2,3,4,5,6); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.210 math_fit(
               -.5cap_height#*slant-.5u#,ic#); penlabels(1,2,3,4,5,6); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [8]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Psi"
l.212 cmchar "Uppercase Greek Psi"
                                  ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Psi"
l.212 cmchar "Uppercase Greek Psi"
                                  ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.8l_width#-5.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.213 beginchar(oct"011",14u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.213 beginchar(oct"011",14u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.8cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.214 italcorr .8cap_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.214 italcorr .8cap_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.215 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.215 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.218 pickup tiny.nib;
                       pos1(shaved_stem,0); pos2(shaved_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.218 pickup tiny.nib;
                       pos1(shaved_stem,0); pos2(shaved_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.218 pickup tiny.nib; pos1(
                            shaved_stem,0); pos2(shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.218 pickup tiny.nib; pos1(
                            shaved_stem,0); pos2(shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.218 pickup tiny.nib; pos1(shaved_stem,0); pos2(
                                                 shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.218 pickup tiny.nib; pos1(shaved_stem,0); pos2(
                                                 shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.220 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.220 filldraw stroke z1e--
                           z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.220 filldraw stroke z1e--
                           z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.220 filldraw stroke z1e--
                           z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.220 filldraw stroke z1e--
                           z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.221 pos3(
           shaved_stem,-180); pos4(shaved_stem,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.221 pos3(
           shaved_stem,-180); pos4(shaved_stem,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.221 pos3(shaved_stem,-180); pos4(
                                   shaved_stem,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.221 pos3(shaved_stem,-180); pos4(
                                   shaved_stem,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.222 pos5(
           vair,-90); x5=x1; bot y5r=vround(.15h if serifs:+slab fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.222 pos5(
           vair,-90); x5=x1; bot y5r=vround(.15h if serifs:+slab fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.222 ...0); x5=x1; bot y5r=vround(.15h if serifs:
                                                  +slab fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.223 pos6(
           shaved_stem,0); pos7(shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.223 pos6(
           shaved_stem,0); pos7(shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.223 pos6(shaved_stem,0); pos7(
                                shaved_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.223 pos6(shaved_stem,0); pos7(
                                shaved_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3'
! Isolated expression.
<to be read again> 
                   (
l.225 pos3'(
            vair,90); pos7'(vair,90); z3'r=z3r; z7'r=z7r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.225 pos3'(
            vair,90); pos7'(vair,90); z3'r=z3r; z7'r=z7r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7'
! Isolated expression.
<to be read again> 
                   (
l.225 pos3'(vair,90); pos7'(
                            vair,90); z3'r=z3r; z7'r=z7r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.225 pos3'(vair,90); pos7'(
                            vair,90); z3'r=z3r; z7'r=z7r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.226 ...; y4=y6=.6h; y3=good.y(y3+.84h if serifs:
                                                  -slab fi-y3');
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -y3'+y3+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.226 ...3=good.y(y3+.84h if serifs:-slab fi-y3');
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

! The token `superness' isn't an internal quantity.
<to be read again> 
                   superness
l.227 interim superness
                       :=more_super;
Something like `tracingonline' should follow `interim'.

>> x3'l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.228 filldraw z3'l{
                    right}...z4r{down} & super_arc.r(4,5)
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3'l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.228 filldraw z3'l{
                    right}...z4r{down} & super_arc.r(4,5)
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y4r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.228 filldraw z3'l{right}...z4r{
                                 down} & super_arc.r(4,5)
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> super_arc.r
! Undefined coordinates have been replaced by (0,0).
<to be read again> 
                   (
l.228 ...aw z3'l{right}...z4r{down} & super_arc.r(
                                                  4,5)
I need x and y numbers for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Paths don't touch; `&' will be changed to `..'.
<to be read again> 
                   (
l.228 ...aw z3'l{right}...z4r{down} & super_arc.r(
                                                  4,5)
When you join paths `p&q', the ending point of p
must be exactly equal to the starting point of q.
So I'm going to pretend that you said `p..q' instead.

! Not a cycle.
<to be read again> 
                   (
l.228 ...aw z3'l{right}...z4r{down} & super_arc.r(
                                                  4,5)
That contour should have ended with `..cycle' or `&cycle'.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.228 ...aw z3'l{right}...z4r{down} & super_arc.r(
                                                  4,5)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.232 if serifs:
                 dish_serif(1,2,a,1/3,1.25cap_jut,b,1/3,1.25cap_jut);  % upp...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.234 math_fit(
               -.8cap_height#*slant-.5u#,.4cap_height#*slant-1.25u#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.234 math_fit(
               -.8cap_height#*slant-.5u#,.4cap_height#*slant-1.25u#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [9]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Uppercase Greek Omega"
l.237 cmchar "Uppercase Greek Omega"
                                    ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Uppercase Greek Omega"
l.237 cmchar "Uppercase Greek Omega"
                                    ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.6l_width#-5.2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.238 beginchar(oct"012",13u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.238 beginchar(oct"012",13u#,cap_height#,0)
                                            ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.75cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.239 italcorr .75cap_height#*slant-
                                    .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.239 italcorr .75cap_height#*slant-.5u#;
                                         
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.240 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.240 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.241 pickup tiny.nib;
                       pos1(vair,90); pos2(cap_curve,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.241 pickup tiny.nib;
                       pos1(vair,90); pos2(cap_curve,180);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.241 pickup tiny.nib; pos1(
                            vair,90); pos2(cap_curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.241 pickup tiny.nib; pos1(
                            vair,90); pos2(cap_curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.241 pickup tiny.nib; pos1(vair,90); pos2(
                                           cap_curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.241 pickup tiny.nib; pos1(vair,90); pos2(
                                           cap_curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.242 pos3(
           vair,180); pos4(cap_curve,0); pos5(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 pos3(
           vair,180); pos4(cap_curve,0); pos5(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.242 pos3(vair,180); pos4(
                           cap_curve,0); pos5(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 pos3(vair,180); pos4(
                           cap_curve,0); pos5(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.242 pos3(vair,180); pos4(cap_curve,0); pos5(
                                              vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.242 pos3(vair,180); pos4(cap_curve,0); pos5(
                                              vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5hair+0.49985
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.244 rt x3l=hround(1/3(w+.5u)+.5hair);
                                        bot y3=bot y5=0; x5=w-x3;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.245 filldraw stroke z3e{
                          up}...{up}z2e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.245 filldraw stroke z3e{
                          up}...{up}z2e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.245 filldraw stroke z3e{
                          up}...{up}z2e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.245 filldraw stroke z3e{
                          up}...{up}z2e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.245 filldraw stroke z3e{
                          up}...{up}z2e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -x5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.249 numeric arm_thickness; path p; p=z3{
                                          up}...{up}z2;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -x4
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
l.249 ...arm_thickness; path p; p=z3{up}...{up}z2;
                                                  
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.250 arm_thickness=Vround(
                           if hefty:slab+2stem_corr else:.75[slab,cap_vstem]...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.251 pickup crisp.nib;
                        pos6(arm_thickness,-90); pos7(fudged.hair,-180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.251 pickup crisp.nib;
                        pos6(arm_thickness,-90); pos7(fudged.hair,-180);
(That was another `errmessage'.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.251 pickup crisp.nib; pos6(
                             arm_thickness,-90); pos7(fudged.hair,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.251 pickup crisp.nib; pos6(
                             arm_thickness,-90); pos7(fudged.hair,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.251 ...crisp.nib; pos6(arm_thickness,-90); pos7(
                                                  fudged.hair,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.251 ...crisp.nib; pos6(arm_thickness,-90); pos7(
                                                  fudged.hair,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y6l+0.5beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.252 ...ft x7r=hround .8u; y7=good.y(y6l+.5beak)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y7-0.5beak-0.50049
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253 (x,y)=p intersectionpoint((0,y6l)--
                                         (w,y6l)); x6l:=x;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y7-0.5beak-0.50049
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.253 (x,y)=p intersectionpoint((0,y6l)--(w,y6l))
                                                 ; x6l:=x;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.254 arm(
          6,7,a,.5beak_darkness,-1.2beak_jut);  % left arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.254 arm(
          6,7,a,.5beak_darkness,-1.2beak_jut);  % left arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.255 pos8(
           arm_thickness,-90); pos9(fudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255 pos8(
           arm_thickness,-90); pos9(fudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.255 pos8(arm_thickness,-90); pos9(
                                    fudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255 pos8(arm_thickness,-90); pos9(
                                    fudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.257 arm(
          8,9,b,.5beak_darkness,1.2beak_jut);  % right arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.257 arm(
          8,9,b,.5beak_darkness,1.2beak_jut);  % right arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> math_fit
! Isolated expression.
<to be read again> 
                   (
l.258 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6,7,8,9); endchar;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.258 math_fit(
               0,.5ic#); penlabels(1,2,3,4,5,6,7,8,9); endchar;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [10]) (romand.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 0"
l.10 cmchar "The numeral 0"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 0"
l.10 cmchar "The numeral 0"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.11 beginchar("0",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.11 beginchar("0",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.12 italcorr fig_height#*slant-
                                .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.12 italcorr fig_height#*slant-.5u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.13 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.13 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.15 if not monospace:
                       interim superness:=sqrt(more_super*hein_super); fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.15 if not monospace:
                       interim superness:=sqrt(more_super*hein_super); fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5curve-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.5curve-0.00133)> if(EXPR0)>u_:
                                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.16 x2r=hround max(.7u,1.45u-.5curve)
                                      ; x4r=w-x2r; x1=x3=.5w;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> unknown path path_.l
>> pulled_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.19 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [48]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 1"
l.22 cmchar "The numeral 1"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 1"
l.22 cmchar "The numeral 1"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.23 beginchar("1",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.23 beginchar("1",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.24 italcorr fig_height#*slant-
                                .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.24 italcorr fig_height#*slant-.5u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.25 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.25 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.6stem'+0.4cap_stem'+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.26 ...em; light_stem=hround .4[stem',cap_stem'];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.27 pickup tiny.nib;
                     
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.27 pickup tiny.nib;
                     
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.28 pos1(
          light_stem,0); pos2(light_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.28 pos1(
          light_stem,0); pos2(light_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.28 pos1(light_stem,0); pos2(
                              light_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.28 pos1(light_stem,0); pos2(
                              light_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5cap_stem'+0.49977
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.29 ...x1l=lft x2l=hround(.5(w+.5u)-.5cap_stem');
                                                   top y1=h+o; bot y2=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.31 if not serifs:
                    save slab; slab=bar; fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.31 if not serifs:
                    save slab; slab=bar; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> dish_serif
! Isolated expression.
<to be read again> 
                   (
l.32 dish_serif(
                2,1,a,1/3,min(2.25u,lft x2l-1.5u),
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.32 dish_serif(
                2,1,a,1/3,min(2.25u,lft x2l-1.5u),
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.34 pickup crisp.nib;
                       pos3(slab,-90); pos4(bar,-90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.34 pickup crisp.nib;
                       pos3(slab,-90); pos4(bar,-90);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.34 pickup crisp.nib; pos3(
                            slab,-90); pos4(bar,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.34 pickup crisp.nib; pos3(
                            slab,-90); pos4(bar,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.34 pickup crisp.nib; pos3(slab,-90); pos4(
                                            bar,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.34 pickup crisp.nib; pos3(slab,-90); pos4(
                                            bar,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.35 top y3l=h+o; top y4l=if monospace:
                                        .8 else: .9 fi\\ h+o;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> tiny.lft.x1l+0.0033
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(tiny.lft.x1l+0.00215)> if(EXPR0)>u_:
                                         u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.36 lft x4=max(1.25u,tiny.lft x1l-2.35u)
                                         ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
<argument> fill.z3l{
                    x4l-x3l,3(y4l-y3l)}...z4l{left}--(x4l,h+o+1)--(x3l,h+o+1...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
<argument> fill.z3l{
                    x4l-x3l,3(y4l-y3l)}...z4l{left}--(x4l,h+o+1)--(x3l,h+o+1...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x4l-x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ,
<argument> fill.z3l{x4l-x3l,
                            3(y4l-y3l)}...z4l{left}--(x4l,h+o+1)--(x3l,h+o+1...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x4l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
<argument> fill.z3l{x4l-x3l,3(y4l-y3l)}...z4l{
                                              left}--(x4l,h+o+1)--(x3l,h+o+1...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
<argument> fill.z3l{x4l-x3l,3(y4l-y3l)}...z4l{
                                              left}--(x4l,h+o+1)--(x3l,h+o+1...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x4l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> ...y4l-y3l)}...z4l{left}--(x4l,h+o+1)--
                                                  (x3l,h+o+1)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o+1
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> ...y4l-y3l)}...z4l{left}--(x4l,h+o+1)--
                                                  (x3l,h+o+1)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> ...4l{left}--(x4l,h+o+1)--(x3l,h+o+1)--
                                                  cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o+1
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> ...4l{left}--(x4l,h+o+1)--(x3l,h+o+1)--
                                                  cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.39  --(x4l,h+o+1)--(x3l,h+o+1)--cycle;
                                         % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.40 filldraw stroke z3e{
                         x4e-x3e,3(y4e-y3e)}..z4e{left};  % point
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.40 filldraw stroke z3e{
                         x4e-x3e,3(y4e-y3e)}..z4e{left};  % point
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.40 filldraw stroke z3e{
                         x4e-x3e,3(y4e-y3e)}..z4e{left};  % point
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.40 filldraw stroke z3e{
                         x4e-x3e,3(y4e-y3e)}..z4e{left};  % point
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.40 filldraw stroke z3e{
                         x4e-x3e,3(y4e-y3e)}..z4e{left};  % point
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [49]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 2"
l.43 cmchar "The numeral 2"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 2"
l.43 cmchar "The numeral 2"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.44 beginchar("2",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.44 beginchar("2",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.45 italcorr fig_height#*slant-
                                .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.45 italcorr fig_height#*slant-.5u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.46 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.46 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.48 arm_thickness=Vround(
                          if hefty:slab+2stem_corr else:.4[stem,cap_stem] fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.49 pickup crisp.nib;
                       pos7(arm_thickness,-90); pos8(hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.49 pickup crisp.nib;
                       pos7(arm_thickness,-90); pos8(hair,0);
(That was another `errmessage'.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.49 pickup crisp.nib; pos7(
                            arm_thickness,-90); pos8(hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.49 pickup crisp.nib; pos7(
                            arm_thickness,-90); pos8(hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.49 ... crisp.nib; pos7(arm_thickness,-90); pos8(
                                                  hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.49 ... crisp.nib; pos7(arm_thickness,-90); pos8(
                                                  hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y7l+0.5beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.50 ... x8r=hround(w-.9u); y8=good.y(y7l+beak/2)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.51 arm(
         7,8,a,.3beak_darkness,beak_jut);  % arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.51 arm(
         7,8,a,.3beak_darkness,beak_jut);  % arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.52 pickup fine.nib;
                      pos2(slab,90); pos3(.4[curve,cap_curve],0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.52 pickup fine.nib;
                      pos2(slab,90); pos3(.4[curve,cap_curve],0);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.52 pickup fine.nib; pos2(
                           slab,90); pos3(.4[curve,cap_curve],0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.52 pickup fine.nib; pos2(
                           slab,90); pos3(.4[curve,cap_curve],0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.52 pickup fine.nib; pos2(slab,90); pos3(
                                          .4[curve,cap_curve],0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.52 pickup fine.nib; pos2(slab,90); pos3(
                                          .4[curve,cap_curve],0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.54 if serifs:
                numeric bulb_diam; bulb_diam=hround(flare+2/3(cap_stem-stem));
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.58 else: x2l:=x2l-.25u; pos1(
                               flare,angle(-9u,h));
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58 else: x2l:=x2l-.25u; pos1(
                               flare,angle(-9u,h));
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y1r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.59 ....75u; bot y1l=vround .7h; y1r:=good.y y1r+
                                                  eps; x1l:=good.x x1l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x1l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.59 ....7h; y1r:=good.y y1r+eps; x1l:=good.x x1l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60  filldraw stroke term.e(
                             2,1,left,.9,4); fi  % terminal and arc
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60  filldraw stroke term.e(
                             2,1,left,.9,4); fi  % terminal and arc
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60  filldraw stroke term.e(
                             2,1,left,.9,4); fi  % terminal and arc
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60  filldraw stroke term.e(
                             2,1,left,.9,4); fi  % terminal and arc
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60  filldraw stroke term.e(
                             2,1,left,.9,4); fi  % terminal and arc
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.61 pos4(
          .25[hair_vair,cap_stem],0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61 pos4(
          .25[hair_vair,cap_stem],0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.62 pos5(
          hair_vair,0); pos6(hair_vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.62 pos5(
          hair_vair,0); pos6(hair_vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.62 pos5(hair_vair,0); pos6(
                             hair_vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.62 pos5(hair_vair,0); pos6(
                             hair_vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -Vround+slab
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(slab)> if(EXPR0)<u_:
                         u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.63 ... y4=.3[y5,y3]; top y6=min(y5,slab,top y7l)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> y8-Vround-0.5beak-0.50049
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.63 ... y4=.3[y5,y3]; top y6=min(y5,slab,top y7l)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE2501
>> (x3l-x6l,-y6l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.64 ...p.lft x7; z4l=whatever[z6l,(x3l,bot .58h)]
                                                  ; z5l=whatever[z6l,z4l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4749
>> (x4l-x6l,-y6l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.64 ...z6l,(x3l,bot .58h)]; z5l=whatever[z6l,z4l]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x4l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z4l--
                     z6l--lft.z6l--(lft.x6l,y4l)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.65 ...l z4l--z6l--lft z6l--(lft x6l,y4l)--cycle;
                                                    % erase excess at left
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x6l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z4l--z6l--
                          lft.z6l--(lft.x6l,y4l)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.65 ...l z4l--z6l--lft z6l--(lft x6l,y4l)--cycle;
                                                    % erase excess at left
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z4l--z6l--
                          lft.z6l--(lft.x6l,y4l)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.65 ...l z4l--z6l--lft z6l--(lft x6l,y4l)--cycle;
                                                    % erase excess at left
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x6l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z4l--z6l--lft.z6l--
                                   (lft.x6l,y4l)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.65 ...l z4l--z6l--lft z6l--(lft x6l,y4l)--cycle;
                                                    % erase excess at left
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z4l--z6l--lft.z6l--
                                   (lft.x6l,y4l)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.65 ...l z4l--z6l--lft z6l--(lft x6l,y4l)--cycle;
                                                    % erase excess at left
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x6l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z4l--z6l--lft.z6l--(lft.x6l,y4l)--
                                                  cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.65 ...l z4l--z6l--lft z6l--(lft x6l,y4l)--cycle;
                                                    % erase excess at left
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z2e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.66 filldraw stroke z2e{
                         right}..tension atleast .9 and atleast 1
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.66 filldraw stroke z2e{
                         right}..tension atleast .9 and atleast 1
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.66 filldraw stroke z2e{
                         right}..tension atleast .9 and atleast 1
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.66 filldraw stroke z2e{
                         right}..tension atleast .9 and atleast 1
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.66 filldraw stroke z2e{
                         right}..tension atleast .9 and atleast 1
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [50]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 3"
l.70 cmchar "The numeral 3"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 3"
l.70 cmchar "The numeral 3"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.71 beginchar("3",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.71 beginchar("3",9u#,fig_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.72 italcorr fig_height#*slant-
                                .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.72 italcorr fig_height#*slant-.5u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.73 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.73 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> slab-2vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.75 ...=max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-2vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.75 ...=max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -ess'
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)>u_:
                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.76 ...thickness=max(fine.breadth,vround 2/3vair)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> slab-vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.77 ...s=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.77 ...s=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.78 pickup fine.nib;
                      pos2(top_thickness,90); top y2r=h+o;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.78 pickup fine.nib;
                      pos2(top_thickness,90); top y2r=h+o;
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.78 pickup fine.nib; pos2(
                           top_thickness,90); top y2r=h+o;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.78 pickup fine.nib; pos2(
                           top_thickness,90); top y2r=h+o;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.79 pos3(
          max(fine.breadth,.6[curve,cap_curve]-stem_corr),0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 pos3(
          max(fine.breadth,.6[curve,cap_curve]-stem_corr),0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.81 pos4(
          vair,-90); pos5(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.81 pos4(
          vair,-90); pos5(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.81 pos4(vair,-90); pos5(
                          vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.81 pos4(vair,-90); pos5(
                          vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.82 pos6(
          mid_thickness,90); x2=x6=x8=.5[1.5u,x7];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.82 pos6(
          mid_thickness,90); x2=x6=x8=.5[1.5u,x7];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.83 pos7(
          cap_curve,0); rt x7r=hround(w-.75u); lft x5=min(hround 3u,lft x6)-...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.83 pos7(
          cap_curve,0); rt x7r=hround(w-.75u); lft x5=min(hround 3u,lft x6)-...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5x7-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.5x7-0.00069)> if(EXPR0)<u_:
                                  u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.83 ...ound(w-.75u); lft x5=min(hround 3u,lft x6)
                                                  -eps;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.84 pos8(
          bot_thickness,-90); bot y8r=-o;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.84 pos8(
          bot_thickness,-90); bot y8r=-o;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.88 filldraw stroke pulled_super_arc.e(
                                        2,3)(.5superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.88 filldraw stroke pulled_super_arc.e(
                                        2,3)(.5superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.88 filldraw stroke pulled_super_arc.e(
                                        2,3)(.5superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.88 filldraw stroke pulled_super_arc.e(
                                        2,3)(.5superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.88 filldraw stroke pulled_super_arc.e(
                                        2,3)(.5superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x5r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.90 filldraw z5r--
                   z6l--z6r--z5l---cycle;  % middle tip
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.90 filldraw z5r--
                   z6l--z6r--z5l---cycle;  % middle tip
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x6l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.90 filldraw z5r--z6l--
                        z6r--z5l---cycle;  % middle tip
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.90 filldraw z5r--z6l--
                        z6r--z5l---cycle;  % middle tip
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x6r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.90 filldraw z5r--z6l--z6r--
                             z5l---cycle;  % middle tip
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.90 filldraw z5r--z6l--z6r--
                             z5l---cycle;  % middle tip
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x5l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.90 filldraw z5r--z6l--z6r--z5l---
                                   cycle;  % middle tip
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.91 filldraw stroke pulled_super_arc.e(
                                        6,7)(.5superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.91 filldraw stroke pulled_super_arc.e(
                                        6,7)(.5superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.91 filldraw stroke pulled_super_arc.e(
                                        6,7)(.5superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.91 filldraw stroke pulled_super_arc.e(
                                        6,7)(.5superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.91 filldraw stroke pulled_super_arc.e(
                                        6,7)(.5superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.93 if serifs:
                numeric bulb_diam[];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.101 else: pos1(
                 .5[vair,flare],angle(-8u,h));
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.101 else: pos1(
                 .5[vair,flare],angle(-8u,h));
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y1r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.103  y1r:=good.y y1r+
                       eps; x1l:=good.x x1l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x1l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.103  y1r:=good.y y1r+eps; x1l:=good.x x1l;
                                            
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.104  pos9(
            bot_thickness,angle(-2u,-h));
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.104  pos9(
            bot_thickness,angle(-2u,-h));
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y9r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.106  y9r:=good.y y9r-
                       eps; x9l:=good.x x9l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x9l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.106  y9r:=good.y y9r-eps; x9l:=good.x x9l;
                                            
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              2,1,left,1,4);  % upper terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              2,1,left,1,4);  % upper terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              2,1,left,1,4);  % upper terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              2,1,left,1,4);  % upper terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              2,1,left,1,4);  % upper terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.108  filldraw stroke term.e(
                              8,9,left,1,4); fi  % lower terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.108  filldraw stroke term.e(
                              8,9,left,1,4); fi  % lower terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.108  filldraw stroke term.e(
                              8,9,left,1,4); fi  % lower terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.108  filldraw stroke term.e(
                              8,9,left,1,4); fi  % lower terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.108  filldraw stroke term.e(
                              8,9,left,1,4); fi  % lower terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [51]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 4"
l.111 cmchar "The numeral 4"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 4"
l.111 cmchar "The numeral 4"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.112 beginchar("4",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.112 beginchar("4",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.113 italcorr fig_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.113 italcorr fig_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.114 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.114 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -tiny.breadth+3.05423
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(3.05423)> if(EXPR0)>u_:
                            u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.117 ...d max(tiny.breadth,light_stem-2stem_corr)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.breadth+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.117 ... max(tiny.breadth,light_stem-2stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -tiny.breadth
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)>u_:
                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.118 ...em=max(tiny.breadth,.4[vair,fudged.hair])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.119 pickup crisp.nib;
                        pos5(cap_bar,90); pos6(cap_bar,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.119 pickup crisp.nib;
                        pos5(cap_bar,90); pos6(cap_bar,90);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.119 pickup crisp.nib; pos5(
                             cap_bar,90); pos6(cap_bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 pickup crisp.nib; pos5(
                             cap_bar,90); pos6(cap_bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.119 pickup crisp.nib; pos5(cap_bar,90); pos6(
                                               cap_bar,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 pickup crisp.nib; pos5(cap_bar,90); pos6(
                                               cap_bar,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.121 top y5r=vround(if serifs:
                                5/18[slab,h-light_stem]+1
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5cap_bar+1.55002
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.122  else:.35(h-light_stem) fi+.5cap_bar);
                                            
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.125 x3r+apex_corr=x1r; alpha=diag_ratio(
                                          1,diag_stem,y3-y4l,x3r-x4l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> %CAPSULE6485
>> (-x3l+x4l,0.5cap_bar+1.55002)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.127 x0=x1l; z0=whatever[z3r,z4r]
                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (-0.49982x3l-0.9998,0.5cap_bar+1.55002)
>> pen
! Not implemented: penoffset(unknown pair)of(pen).
<to be read again> 
                   =
l.128 ...; z5''=z5'+penoffset z4-z3 of currentpen=
                                                  whatever[z4l,z3l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,y5')
>> pen
! Not implemented: (unknown pair)+(pen).
<to be read again> 
                   =
l.128 ...; z5''=z5'+penoffset z4-z3 of currentpen=
                                                  whatever[z4l,z3l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE5147
>> (0.49982x3l+0.9998,-0.5cap_bar-1.55002)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.128 ...set z4-z3 of currentpen=whatever[z4l,z3l]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pen
>> (x3l,0)
! Equation cannot be performed (pen=pair).
<to be read again> 
                   ;
l.128 ...et z4-z3 of currentpen=whatever[z4l,z3l];
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.129 fill diag_end(
                    2r,1r,1,.5,3l,4l)---z5''...lft z5'
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.129 fill diag_end(
                    2r,1r,1,.5,3l,4l)---z5''...lft z5'
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.129 fill diag_end(
                    2r,1r,1,.5,3l,4l)---z5''...lft z5'
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z5e--
                           z6e;  % bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z5e--
                           z6e;  % bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z5e--
                           z6e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z5e--
                           z6e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.134 filldraw stroke z5e--
                           z6e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.135 pickup tiny.nib;
                       pos7(light_stem,0); rt x7r=x1r; bot y7=0;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.135 pickup tiny.nib;
                       pos7(light_stem,0); rt x7r=x1r; bot y7=0;
(That was another `errmessage'.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.135 pickup tiny.nib; pos7(
                            light_stem,0); rt x7r=x1r; bot y7=0;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.135 pickup tiny.nib; pos7(
                            light_stem,0); rt x7r=x1r; bot y7=0;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.136 pos2'(
            light_stem,0); x2'=x7;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.136 pos2'(
            light_stem,0); x2'=x7;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z2'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 filldraw stroke z2'e--
                            z7e;  % lower stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 filldraw stroke z2'e--
                            z7e;  % lower stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 filldraw stroke z2'e--
                            z7e;  % lower stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 filldraw stroke z2'e--
                            z7e;  % lower stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.137 filldraw stroke z2'e--
                            z7e;  % lower stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.138 if serifs:
                 dish_serif(7,2',a,1/3,1.75u,
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [52]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 5"
l.142 cmchar "The numeral 5"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 5"
l.142 cmchar "The numeral 5"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.143 beginchar("5",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.143 beginchar("5",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.144 italcorr fig_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.144 italcorr fig_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.145 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.145 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> slab-vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.147 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.147 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.148 light_hair=hround(cap_hair if hefty:
                                           -\\2stem_corr fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.149 pickup tiny.nib;
                       pos5(vair,180); pos6(vair,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.149 pickup tiny.nib;
                       pos5(vair,180); pos6(vair,90);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.149 pickup tiny.nib; pos5(
                            vair,180); pos6(vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.149 pickup tiny.nib; pos5(
                            vair,180); pos6(vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.149 pickup tiny.nib; pos5(vair,180); pos6(
                                            vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.149 pickup tiny.nib; pos5(vair,180); pos6(
                                            vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -y6l+y6r-o+0.00049
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.150 ...=max(vround .61803h+o,top y6r+y5+eps-y6l)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.151 pos3(
           light_hair,0); pos4(light_hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.151 pos3(
           light_hair,0); pos4(light_hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.151 pos3(light_hair,0); pos4(
                               light_hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.151 pos3(light_hair,0); pos4(
                               light_hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.153 top y3=h if not hefty:
                             +\\o fi;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.153 top y3=h if not hefty:
                             +\\o fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z3e--
                           z4e;  % thin stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z3e--
                           z4e;  % thin stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z3e--
                           z4e;  % thin stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z3e--
                           z4e;  % thin stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.154 filldraw stroke z3e--
                           z4e;  % thin stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z5--
                    bot.z5--(x6,bot.y5)--z6{left}..tension0.9and1..{x5-x6,3(...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z5--bot.z5--
                            (x6,bot.y5)--z6{left}..tension0.9and1..{x5-x6,3(...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5x7r+0.5x3+0.25fine+0.50507
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.z5--bot.z5--(x6,bot.y5)--
                                         z6{left}..tension0.9and1..{x5-x6,3(...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5x7r+0.5x3+0.25fine+0.50507
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
<argument> fill.z5--bot.z5--(x6,bot.y5)--z6{
                                            left}..tension0.9and1..{x5-x6,3(...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y6
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
<argument> fill.z5--bot.z5--(x6,bot.y5)--z6{
                                            left}..tension0.9and1..{x5-x6,3(...

erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5x7r+0.5x3-0.25fine-0.50507
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ,
<argument> ...)--z6{left}..tension0.9and1..{x5-x6,
                                                  3(y5-y6)}cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -3y6
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   }
<argument> ...t}..tension0.9and1..{x5-x6,3(y5-y6)}
                                                  cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.158  ..tension .9 and 1..{x5-x6,3(y5-y6)}cycle;
                                                  % erase excess in middle
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z6e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.159 filldraw stroke z6e{
                          left}..tension .9 and 1..{x5-x6,3(y5-y6)}z5e;  % link
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z6e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.159 filldraw stroke z6e{
                          left}..tension .9 and 1..{x5-x6,3(y5-y6)}z5e;  % link
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z6e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.159 filldraw stroke z6e{
                          left}..tension .9 and 1..{x5-x6,3(y5-y6)}z5e;  % link
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.159 filldraw stroke z6e{
                          left}..tension .9 and 1..{x5-x6,3(y5-y6)}z5e;  % link
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.159 filldraw stroke z6e{
                          left}..tension .9 and 1..{x5-x6,3(y5-y6)}z5e;  % link
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.160 pickup fine.nib;
                       pos6'(vair,90); z6'=z6;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.160 pickup fine.nib;
                       pos6'(vair,90); z6'=z6;
(That was another `errmessage'.)

>> pos6'
! Isolated expression.
<to be read again> 
                   (
l.160 pickup fine.nib; pos6'(
                             vair,90); z6'=z6;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.160 pickup fine.nib; pos6'(
                             vair,90); z6'=z6;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.162 filldraw stroke pulled_arc.e(
                                   6',7) & pulled_arc.e(7,8);  % bowl
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.162 filldraw stroke pulled_arc.e(
                                   6',7) & pulled_arc.e(7,8);  % bowl
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.162 filldraw stroke pulled_arc.e(
                                   6',7) & pulled_arc.e(7,8);  % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.162 filldraw stroke pulled_arc.e(
                                   6',7) & pulled_arc.e(7,8);  % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.162 filldraw stroke pulled_arc.e(
                                   6',7) & pulled_arc.e(7,8);  % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.163 if serifs:
                 pos9(hair,-180); y9=.5y5; lft x9r=hround .9u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.165 else: pos9(
                 3/7[bot_thickness,flare],angle(-7u,-h));
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165 else: pos9(
                 3/7[bot_thickness,flare],angle(-7u,-h));
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.lft.x3l+0.50069
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.166  lft x9r=hround(tiny.lft x3l-.75u);
                                          bot y9r=vround .15h-o;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x9l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.167  x9l:=good.x x9l;
                        y9l:=good.y y9l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y9l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.167  x9l:=good.x x9l; y9l:=good.y y9l;
                                        
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.168  filldraw stroke term.e(
                              8,9,left,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.168  filldraw stroke term.e(
                              8,9,left,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.168  filldraw stroke term.e(
                              8,9,left,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.168  filldraw stroke term.e(
                              8,9,left,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.168  filldraw stroke term.e(
                              8,9,left,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.169 if hefty:
                pickup crisp.nib; pos1(slab,90); pos2(hair,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.173  pos1(
            flag_breadth,90); pos2(flag_breadth,60);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.173  pos1(
            flag_breadth,90); pos2(flag_breadth,60);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.173  pos1(flag_breadth,90); pos2(
                                   flag_breadth,60);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.173  pos1(flag_breadth,90); pos2(
                                   flag_breadth,60);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.174  pos0(
            vair,90); top y1r=tiny.top y3; top y2r=vround .95h+o; y0r=y1r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.174  pos0(
            vair,90); top y1r=tiny.top y3; top y2r=vround .95h+o; y0r=y1r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.top.z1r--
                         z1r...{right}z2r--(x2r,top.y1r)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.top.z1r--
                         z1r...{right}z2r--(x2r,top.y1r)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
<argument> fill.top.z1r--z1r...
                               {right}z2r--(x2r,top.y1r)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
<argument> fill.top.z1r--z1r...
                               {right}z2r--(x2r,top.y1r)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5x9r-0.25034
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.top.z1r--z1r...{right}z2r--
                                           (x2r,top.y1r)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.top.z1r--z1r...{right}z2r--
                                           (x2r,top.y1r)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5x9r-0.25034
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> ...r--z1r...{right}z2r--(x2r,top.y1r)--
                                                  cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> ...r--z1r...{right}z2r--(x2r,top.y1r)--
                                                  cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.177   --(x2r,top y1r)--cycle;
                                % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.178  filldraw stroke z1e...
                             {right}z2e...z0e; fi  % flag
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.178  filldraw stroke z1e...
                             {right}z2e...z0e; fi  % flag
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.178  filldraw stroke z1e...
                             {right}z2e...z0e; fi  % flag
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.178  filldraw stroke z1e...
                             {right}z2e...z0e; fi  % flag
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.178  filldraw stroke z1e...
                             {right}z2e...z0e; fi  % flag
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [53]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 6"
l.181 cmchar "The numeral 6"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 6"
l.181 cmchar "The numeral 6"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.182 beginchar("6",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.182 beginchar("6",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.183 italcorr fig_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.183 italcorr fig_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.184 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.184 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> slab-2vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.186 ...max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-2vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.186 ...max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> slab-vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.187 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.187 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.66667curve+0.33333cap_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.188 ...fine.breadth,hround 1/3[curve,cap_curve])
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+0.66667curve+0.33333cap_curve+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.188 ...fine.breadth,hround 1/3[curve,cap_curve])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.5superpull-0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(1.5superpull)> if(EXPR0)<u_:
                                 u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.189 pull=min(.25,1.5superpull)
                                ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.190 pickup fine.nib;
                       pos2(top_thickness,-270);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.190 pickup fine.nib;
                       pos2(top_thickness,-270);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.190 pickup fine.nib; pos2(
                            top_thickness,-270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.190 pickup fine.nib; pos2(
                            top_thickness,-270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.191 pos3(
           side_thickness,-180); pos4(bot_thickness,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.191 pos3(
           side_thickness,-180); pos4(bot_thickness,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.191 pos3(side_thickness,-180); pos4(
                                      bot_thickness,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.191 pos3(side_thickness,-180); pos4(
                                      bot_thickness,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.192 pos5(
           side_thickness,0); pos6(vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.192 pos5(
           side_thickness,0); pos6(vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.192 pos5(side_thickness,0); pos6(
                                   vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.192 pos5(side_thickness,0); pos6(
                                   vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5ess'-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.5ess'-0.00137)> if(EXPR0)>u_:
                                     u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.193 ...5r=hround max(.75u,1.5u-.5side_thickness)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.197 path p; {{interim
                        superness:=more_super; p=pulled_super_arc.l(3,4)(pul...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.197 path p; {{interim
                        superness:=more_super; p=pulled_super_arc.l(3,4)(pul...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path p
>> pulled_super_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
l.197 ...erness:=more_super; p=pulled_super_arc.l(
                                                  3,4)(pull)}};
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.197 ...erness:=more_super; p=pulled_super_arc.l(
                                                  3,4)(pull)}};
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5y4+0.5o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.198 ...t; t=xpart(p intersectiontimes((x3r,y5)--
                                                  (x4,y5)));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5y4+0.5o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.198 ...rt(p intersectiontimes((x3r,y5)--(x4,y5))
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> unknown path p
>> path
! Not implemented: (unknown path)intersectiontimes(path).
<to be read again> 
                   )
l.198 ...t(p intersectiontimes((x3r,y5)--(x4,y5)))
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> path
! Not implemented: xpart(path).
<to be read again> 
                   ;
l.198 ...(p intersectiontimes((x3r,y5)--(x4,y5)));
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> t
>> path
! Equation cannot be performed (numeric=path).
<to be read again> 
                   ;
l.198 ...(p intersectiontimes((x3r,y5)--(x4,y5)));
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.199 pos7(
           thin_join,180); z7l=point t of p;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.199 pos7(
           thin_join,180); z7l=point t of p;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> t
>> unknown path p
! Not implemented: point(unknown numeric)of(unknown path).
<to be read again> 
                   ;
l.199 pos7(thin_join,180); z7l=point t of p;
                                            
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x7l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
l.199 pos7(thin_join,180); z7l=point t of p;
                                            
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y7l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.199 pos7(thin_join,180); z7l=point t of p;
                                            
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> %CAPSULE5513
>> (x6l-x7l,y6l-y7l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.200 (x,y6r)=whatever[z7l,z6l]
                               ; x6r:=min(x,.5[x5r,x6]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -x-0.00005
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.00005)> if(EXPR0)<u_:
                             u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.200 ...whatever[z7l,z6l]; x6r:=min(x,.5[x5r,x6])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.201 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.201 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.201 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.201 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.201 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pulled_super_arc.e
! Isolated expression.
<to be read again> 
                   (
l.202 ...uperness:=more_super; pulled_super_arc.e(
                                                  3,4)(pull)}}
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.202 ...uperness:=more_super; pulled_super_arc.e(
                                                  3,4)(pull)}}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pulled_super_arc.e
! Isolated expression.
<to be read again> 
                   (
l.203  & {{less_tense; pulled_super_arc.e(
                                          4,5)(pull) & pulled_super_arc.e(5,...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.203  & {{less_tense; pulled_super_arc.e(
                                          4,5)(pull) & pulled_super_arc.e(5,...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.205 if serifs:
                 pos1(hair,-360); pos0(flare,-360);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.209 else: pos1(
                 vround .1[top_thickness,flare],90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.209 else: pos1(
                 vround .1[top_thickness,flare],90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.210  top y1r=vround .97h+o; rt x1=hround(x5-.5);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.211  filldraw stroke term.e(
                              2,1,right,.9,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.211  filldraw stroke term.e(
                              2,1,right,.9,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.211  filldraw stroke term.e(
                              2,1,right,.9,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.211  filldraw stroke term.e(
                              2,1,right,.9,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.211  filldraw stroke term.e(
                              2,1,right,.9,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [54]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 7"
l.214 cmchar "The numeral 7"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 7"
l.214 cmchar "The numeral 7"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.215 beginchar("7",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.215 beginchar("7",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.216 italcorr fig_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.216 italcorr fig_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.217 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.217 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.219 if hefty:
                arm_thickness=Vround(slab+2stem_corr); top_shift=0;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> Vround0.4
>> -stem-2.02023
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.221 else: arm_thickness=Vround .4[stem,cap_stem]
                                                  ; top_shift=.5u;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -tiny.breadth-2.02023
! Unknown relation will be considered false.
<to be read again> 
                   :
l.223 if top_hair<tiny.breadth:
                                top_hair:=tiny.breadth; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.224 pickup crisp.nib;
                        pos2(arm_thickness,90); pos1(hair,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.224 pickup crisp.nib;
                        pos2(arm_thickness,90); pos1(hair,180);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.224 pickup crisp.nib; pos2(
                             arm_thickness,90); pos1(hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.224 pickup crisp.nib; pos2(
                             arm_thickness,90); pos1(hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.224 ... crisp.nib; pos2(arm_thickness,90); pos1(
                                                  hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.224 ... crisp.nib; pos2(arm_thickness,90); pos1(
                                                  hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y2l-0.5beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.226 ....75u+.5top_shift); y1=good.y(y2l-beak/2)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.227 arm(
          2,1,a,.3beak_darkness,-beak_jut);  % arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.227 arm(
          2,1,a,.3beak_darkness,-beak_jut);  % arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.228 pos3(
           hair,180); y3=good.y(y2r+beak/6)+eps; z3r=whatever[z1r,z.a0];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.228 pos3(
           hair,180); y3=good.y(y2r+beak/6)+eps; z3r=whatever[z1r,z.a0];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.16667beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.228 pos3(hair,180); y3=good.y(y2r+beak/6)+
                                            eps; z3r=whatever[z1r,z.a0];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> %CAPSULE5099
>> (x.a0,y.a0-y1r)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.228 ...y(y2r+beak/6)+eps; z3r=whatever[z1r,z.a0]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.230 arm(
          2',3,b,beak_darkness,x3r-x.a0);  % upward extension of beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.230 arm(
          2',3,b,beak_darkness,x3r-x.a0);  % upward extension of beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.231 pickup tiny.nib;
                       pos4(top_hair,0); pos6(bot_width,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.231 pickup tiny.nib;
                       pos4(top_hair,0); pos6(bot_width,0);
(That was another `errmessage'.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.231 pickup tiny.nib; pos4(
                            top_hair,0); pos6(bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.231 pickup tiny.nib; pos4(
                            top_hair,0); pos6(bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.231 pickup tiny.nib; pos4(top_hair,0); pos6(
                                              bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.231 pickup tiny.nib; pos4(top_hair,0); pos6(
                                              bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -slab-2.02023
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-slab)> if(EXPR0)>u_:
                          u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.232 bot y4=max(h-arm_thickness,h-slab,bot y2l)
                                                ; rt x4r=crisp.rt x2;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> y1+0.5beak-2.51974
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.232 bot y4=max(h-arm_thickness,h-slab,bot y2l)
                                                ; rt x4r=crisp.rt x2;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5bot_width+0.49634
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.233 lft x6l=hround(3.5u+top_shift-.5bot_width);
                                                 
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.234 if serifs:
                 y6-.5bot_width=-o; filldraw z6l{down}..{up}z6r--cycle;  % bulb
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.236 if hefty:
                erase fill rt z4r--z4r...{down}z6r
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.239 else: pos5(
                 top_hair,0); y5=2/3h; z5=whatever[z4,(.75u,y6)];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.239 else: pos5(
                 top_hair,0); y5=2/3h; z5=whatever[z4,(.75u,y6)];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> %CAPSULE6698
>> (-x4-0.00069,-2.02023)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.239 ...ir,0); y5=2/3h; z5=whatever[z4,(.75u,y6)]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x4r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--
                        z4r--z5r--(rt.x4r,y5)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y4r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--
                        z4r--z5r--(rt.x4r,y5)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x4r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--z4r--
                             z5r--(rt.x4r,y5)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y4r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--z4r--
                             z5r--(rt.x4r,y5)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x5r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--z4r--z5r--
                                  (rt.x4r,y5)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y5r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--z4r--z5r--
                                  (rt.x4r,y5)--cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x4r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<argument> fill.rt.z4r--z4r--z5r--(rt.x4r,y5)--
                                               cycle
erase->...up.interim.default_wt_:=_;cullit;(TEXT0)
                                                  withweight._;cullit;endgroup
<to be read again> 
                   ;
l.240 ...ill rt z4r--z4r--z5r--(rt x4r,y5)--cycle;
                                                    % erase excess at top
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z4e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.241  filldraw stroke z4e---
                             z5e...{down}z6e; fi  % stroke
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z4e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.241  filldraw stroke z4e---
                             z5e...{down}z6e; fi  % stroke
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z4e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.241  filldraw stroke z4e---
                             z5e...{down}z6e; fi  % stroke
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.241  filldraw stroke z4e---
                             z5e...{down}z6e; fi  % stroke
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.241  filldraw stroke z4e---
                             z5e...{down}z6e; fi  % stroke
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [55]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 8"
l.244 cmchar "The numeral 8"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 8"
l.244 cmchar "The numeral 8"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.245 beginchar("8",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.245 beginchar("8",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.246 italcorr fig_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.246 italcorr fig_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.247 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.247 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> slab-2vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.249 ...max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-2vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.249 ...max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> slab-vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.250 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.250 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.252 if hefty:
                mid_thickness=vround 2/3vair; upper_side=hround(stem-3stem_c...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.269 else: pickup fine.nib;
                             theta=90-angle(18u,h); slope:=-h/18u;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.269 else: pickup fine.nib;
                             theta=90-angle(18u,h); slope:=-h/18u;
(That was another `errmessage'.)

>> 0.5hair+0.5stem+3.52711
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.270 ....breadth,hround(.5[hair,stem]-stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5hair-ess'+0.5stem+3.52711
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.270 ....breadth,hround(.5[hair,stem]-stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5hair+0.5stem-2.52711
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.271  lower_side=hround(.5[hair,stem]+stem_corr);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.5hair-1.2ess'+0.5stem-2.52711
! Unknown relation will be considered false.
<to be read again> 
                   :
l.272  if lower_side>1.2upper_side:
                                    upper_side:=lower_side; fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.273  pos1(
            top_thickness,-90); pos6(bot_thickness,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.273  pos1(
            top_thickness,-90); pos6(bot_thickness,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.273  pos1(top_thickness,-90); pos6(
                                     bot_thickness,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.273  pos1(top_thickness,-90); pos6(
                                     bot_thickness,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.274  x1=x6=.5w; top y1l=h+o; bot y6r=-o; pos0(
                                                cap_stem,theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.274  x1=x6=.5w; top y1l=h+o; bot y6r=-o; pos0(
                                                cap_stem,theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.277  ellipse_set(
                   1l,2l,3l,0l); ellipse_set(1r,2r,3r,0r);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.277  ellipse_set(
                   1l,2l,3l,0l); ellipse_set(1r,2r,3r,0r);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.277  ellipse_set(1l,2l,3l,0l); ellipse_set(
                                             1r,2r,3r,0r);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.277  ellipse_set(1l,2l,3l,0l); ellipse_set(
                                             1r,2r,3r,0r);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.278  ellipse_set(
                   6l,5l,4l,0l); ellipse_set(6r,5r,4r,0r);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.278  ellipse_set(
                   6l,5l,4l,0l); ellipse_set(6r,5r,4r,0r);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.278  ellipse_set(6l,5l,4l,0l); ellipse_set(
                                             6r,5r,4r,0r);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.278  ellipse_set(6l,5l,4l,0l); ellipse_set(
                                             6r,5r,4r,0r);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.2071
>> more_super-0.5
! Not implemented: (known numeric)/(unknown numeric).
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.279 ...tau; tau=max(.8,.20710678/(superness-.5))
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> more_super-1.3
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(more_super-0.5)> if(EXPR0)>u_:
                                   u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.279 ...tau; tau=max(.8,.20710678/(superness-.5))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.280  filldraw stroke z1e{
                           left}..tension atleast tau..z2e{down}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.280  filldraw stroke z1e{
                           left}..tension atleast tau..z2e{down}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.280  filldraw stroke z1e{
                           left}..tension atleast tau..z2e{down}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.280  filldraw stroke z1e{
                           left}..tension atleast tau..z2e{down}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.280  filldraw stroke z1e{
                           left}..tension atleast tau..z2e{down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.282  pos7(
            lower_side,180); pos8(upper_side,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.282  pos7(
            lower_side,180); pos8(upper_side,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.282  pos7(lower_side,180); pos8(
                                  upper_side,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.282  pos7(lower_side,180); pos8(
                                  upper_side,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.283  y7=.5[y5l,y5r]; y8=.5[y2l,y2r]; pos9(
                                            vair,90); z9=z0;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.283  y7=.5[y5l,y5r]; y8=.5[y2l,y2r]; pos9(
                                            vair,90); z9=z0;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.284  filldraw stroke z1e{
                           right}..tension atleast tau..z8e{down}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.284  filldraw stroke z1e{
                           right}..tension atleast tau..z8e{down}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.284  filldraw stroke z1e{
                           right}..tension atleast tau..z8e{down}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.284  filldraw stroke z1e{
                           right}..tension atleast tau..z8e{down}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.284  filldraw stroke z1e{
                           right}..tension atleast tau..z8e{down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z6e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.286  filldraw stroke z6e{
                           left}..tension atleast tau..z7e{up}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z6e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.286  filldraw stroke z6e{
                           left}..tension atleast tau..z7e{up}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z6e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.286  filldraw stroke z6e{
                           left}..tension atleast tau..z7e{up}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.286  filldraw stroke z6e{
                           left}..tension atleast tau..z7e{up}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.286  filldraw stroke z6e{
                           left}..tension atleast tau..z7e{up}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [56]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The numeral 9"
l.290 cmchar "The numeral 9"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The numeral 9"
l.290 cmchar "The numeral 9"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.291 beginchar("9",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.291 beginchar("9",9u#,fig_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.292 italcorr fig_height#*slant-
                                 .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.292 italcorr fig_height#*slant-.5u#;
                                      
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.293 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.293 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> slab-2vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.295 ...max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-2vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.295 ...max(fine.breadth,vround(slab-2vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> slab-vair_corr+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.296 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+slab-vair_corr+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.296 ...=max(fine.breadth,vround(slab-vair_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.66667curve+0.33333cap_curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.297 ...fine.breadth,hround 1/3[curve,cap_curve])
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+0.66667curve+0.33333cap_curve+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.297 ...fine.breadth,hround 1/3[curve,cap_curve])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.5superpull-0.25
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(1.5superpull)> if(EXPR0)<u_:
                                 u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.298 pull=min(.25,1.5superpull)
                                ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.299 pickup fine.nib;
                       pos2(bot_thickness,-90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.299 pickup fine.nib;
                       pos2(bot_thickness,-90);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.299 pickup fine.nib; pos2(
                            bot_thickness,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.299 pickup fine.nib; pos2(
                            bot_thickness,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.300 pos3(
           side_thickness,0); pos4(top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.300 pos3(
           side_thickness,0); pos4(top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.300 pos3(side_thickness,0); pos4(
                                   top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.300 pos3(side_thickness,0); pos4(
                                   top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.301 pos5(
           side_thickness,180); pos6(vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.301 pos5(
           side_thickness,180); pos6(vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.301 pos5(side_thickness,180); pos6(
                                     vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.301 pos5(side_thickness,180); pos6(
                                     vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5ess'-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.5ess'-0.00137)> if(EXPR0)>u_:
                                     u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.302 ...5r=hround max(.75u,1.5u-.5side_thickness)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.306 path p; {{interim
                        superness:=more_super; p=pulled_super_arc.l(3,4)(pul...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.306 path p; {{interim
                        superness:=more_super; p=pulled_super_arc.l(3,4)(pul...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path p
>> pulled_super_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
l.306 ...erness:=more_super; p=pulled_super_arc.l(
                                                  3,4)(pull)}};
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.306 ...erness:=more_super; p=pulled_super_arc.l(
                                                  3,4)(pull)}};
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5y4-0.5o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.307 ...t; t=xpart(p intersectiontimes((x3r,y5)--
                                                  (x4,y5)));
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5y4-0.5o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   )
l.307 ...rt(p intersectiontimes((x3r,y5)--(x4,y5))
                                                  );
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> unknown path p
>> path
! Not implemented: (unknown path)intersectiontimes(path).
<to be read again> 
                   )
l.307 ...t(p intersectiontimes((x3r,y5)--(x4,y5)))
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> path
! Not implemented: xpart(path).
<to be read again> 
                   ;
l.307 ...(p intersectiontimes((x3r,y5)--(x4,y5)));
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> t
>> path
! Equation cannot be performed (numeric=path).
<to be read again> 
                   ;
l.307 ...(p intersectiontimes((x3r,y5)--(x4,y5)));
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.308 pos7(
           thin_join,360); z7l=point t of p;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.308 pos7(
           thin_join,360); z7l=point t of p;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> t
>> unknown path p
! Not implemented: point(unknown numeric)of(unknown path).
<to be read again> 
                   ;
l.308 pos7(thin_join,360); z7l=point t of p;
                                            
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x7l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
l.308 pos7(thin_join,360); z7l=point t of p;
                                            
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y7l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.308 pos7(thin_join,360); z7l=point t of p;
                                            
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> %CAPSULE4279
>> (x6l-x7l,y6l-y7l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.309 (x,y6r)=whatever[z7l,z6l]
                               ; x6r:=max(x,.5[x5r,x6]);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -x+0.00005
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.00005)> if(EXPR0)>u_:
                            u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.309 ...whatever[z7l,z6l]; x6r:=max(x,.5[x5r,x6])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.310 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.310 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.310 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.310 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.310 filldraw stroke pulled_super_arc.e(
                                         2,3)(pull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pulled_super_arc.e
! Isolated expression.
<to be read again> 
                   (
l.311 ...uperness:=more_super; pulled_super_arc.e(
                                                  3,4)(pull)}}
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.311 ...uperness:=more_super; pulled_super_arc.e(
                                                  3,4)(pull)}}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pulled_super_arc.e
! Isolated expression.
<to be read again> 
                   (
l.312  & {{less_tense; pulled_super_arc.e(
                                          4,5)(pull) & pulled_super_arc.e(5,...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.312  & {{less_tense; pulled_super_arc.e(
                                          4,5)(pull) & pulled_super_arc.e(5,...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.314 if serifs:
                 pos1(hair,-180); pos0(flare,-180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.318 else: pos1(
                 .1[bot_thickness,flare],-120);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.318 else: pos1(
                 .1[bot_thickness,flare],-120);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.320  filldraw stroke term.e(
                              2,1,left,.9,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.320  filldraw stroke term.e(
                              2,1,left,.9,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.320  filldraw stroke term.e(
                              2,1,left,.9,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.320  filldraw stroke term.e(
                              2,1,left,.9,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.320  filldraw stroke term.e(
                              2,1,left,.9,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [57]) (romanp.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "Dollar sign"
l.9 cmchar "Dollar sign"
                        ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Dollar sign"
l.9 cmchar "Dollar sign"
                        ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.8l_width#-3.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.10 ...9u#,body_height#,body_height#-asc_height#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.10 ...9u#,body_height#,body_height#-asc_height#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#-asc_height#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.10 ...9u#,body_height#,body_height#-asc_height#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> fig_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.11 italcorr fig_height#*slant-
                                .5u#; % same as for digits
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.1l_width#+0.2serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.11 italcorr fig_height#*slant-.5u#;
                                      % same as for digits
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.12 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.12 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> (-0.04578,asc_height)
! Not implemented: angle(unknown pair).
<to be read again> 
                   ;
l.13 ...ric theta; theta=90-angle(50u,asc_height);
                                                   slope:=-asc_height/50u;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 90
>> (-0.04578,asc_height)
! Not implemented: (known numeric)-(unknown pair).
<to be read again> 
                   ;
l.13 ...ric theta; theta=90-angle(50u,asc_height);
                                                   slope:=-asc_height/50u;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> theta
>> (-0.04578,asc_height)
! Equation cannot be performed (numeric=pair).
<to be read again> 
                   ;
l.13 ...ric theta; theta=90-angle(50u,asc_height);
                                                   slope:=-asc_height/50u;
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.14 pickup fine.nib;
                      pos2(slab,-90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.14 pickup fine.nib;
                      pos2(slab,-90);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.14 pickup fine.nib; pos2(
                           slab,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.14 pickup fine.nib; pos2(
                           slab,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.15 pos0(
          cap_stem,theta); pos7(slab,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.15 pos0(
          cap_stem,theta); pos7(slab,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.15 pos0(cap_stem,theta); pos7(
                                slab,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.15 pos0(cap_stem,theta); pos7(
                                slab,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.65slab-0.20709
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
l.18 x3r-x3l=x6r-x6l=hround .35[slab,cap_stem]-
                                               fine;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.19 ellipse_set(
                 2l,3l,4l,0l); ellipse_set(2r,3r,4r,0r); y3=y3r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 ellipse_set(
                 2l,3l,4l,0l); ellipse_set(2r,3r,4r,0r); y3=y3r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.19 ellipse_set(2l,3l,4l,0l); ellipse_set(
                                           2r,3r,4r,0r); y3=y3r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 ellipse_set(2l,3l,4l,0l); ellipse_set(
                                           2r,3r,4r,0r); y3=y3r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.20 ellipse_set(
                 7l,6l,5l,0l); ellipse_set(7r,6r,5r,0r); y6=y6r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.20 ellipse_set(
                 7l,6l,5l,0l); ellipse_set(7r,6r,5r,0r); y6=y6r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.20 ellipse_set(7l,6l,5l,0l); ellipse_set(
                                           7r,6r,5r,0r); y6=y6r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.20 ellipse_set(7l,6l,5l,0l); ellipse_set(
                                           7r,6r,5r,0r); y6=y6r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.21 filldraw stroke super_arc.e(
                                 2,3) & z3e{down}
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.21 filldraw stroke super_arc.e(
                                 2,3) & z3e{down}
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.21 filldraw stroke super_arc.e(
                                 2,3) & z3e{down}
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.21 filldraw stroke super_arc.e(
                                 2,3) & z3e{down}
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.21 filldraw stroke super_arc.e(
                                 2,3) & z3e{down}
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.23 if serifs:
                pos1(hair,0); pos8(hair,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.28 else: pos1(
                .6[slab,flare],-100); pos8(flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.28 else: pos1(
                .6[slab,flare],-100); pos8(flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.28 else: pos1(.6[slab,flare],-100); pos8(
                                           flare,-100);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.28 else: pos1(.6[slab,flare],-100); pos8(
                                           flare,-100);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.04211slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
l.30  top y1l=vround .92asc_height+
                                   oo; bot y8r=vround .1asc_height-oo;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.00458slope+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
l.30 ...sc_height+oo; bot y8r=vround .1asc_height-
                                                  oo;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.31  filldraw stroke term.e(
                             2,1,right,.9,4);  % upper arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.31  filldraw stroke term.e(
                             2,1,right,.9,4);  % upper arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.31  filldraw stroke term.e(
                             2,1,right,.9,4);  % upper arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.31  filldraw stroke term.e(
                             2,1,right,.9,4);  % upper arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.31  filldraw stroke term.e(
                             2,1,right,.9,4);  % upper arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.32  filldraw stroke term.e(
                             7,8,left,1,4); fi  % lower arc and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.32  filldraw stroke term.e(
                             7,8,left,1,4); fi  % lower arc and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.32  filldraw stroke term.e(
                             7,8,left,1,4); fi  % lower arc and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.32  filldraw stroke term.e(
                             7,8,left,1,4); fi  % lower arc and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.32  filldraw stroke term.e(
                             7,8,left,1,4); fi  % lower arc and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.33 pickup crisp.nib;
                       pos12(bar,0); pos11(bar,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.33 pickup crisp.nib;
                       pos12(bar,0); pos11(bar,0);
(That was another `errmessage'.)

>> pos12
! Isolated expression.
<to be read again> 
                   (
l.33 pickup crisp.nib; pos12(
                             bar,0); pos11(bar,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.33 pickup crisp.nib; pos12(
                             bar,0); pos11(bar,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.33 pickup crisp.nib; pos12(bar,0); pos11(
                                           bar,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.33 pickup crisp.nib; pos12(bar,0); pos11(
                                           bar,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5bar+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.34 lft x12l=lft x11l=hround(.5w-.5bar);
                                          top y12=h; bot y11=-d;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z12e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.35 filldraw stroke z12e--
                           z11e;  % vertical crossbar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z12e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.35 filldraw stroke z12e--
                           z11e;  % vertical crossbar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z12e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.35 filldraw stroke z12e--
                           z11e;  % vertical crossbar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.35 filldraw stroke z12e--
                           z11e;  % vertical crossbar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.35 filldraw stroke z12e--
                           z11e;  % vertical crossbar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [36]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Ampersand"
l.38 cmchar "Ampersand"
                       ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Ampersand"
l.38 cmchar "Ampersand"
                       ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2.8l_width#-5.6serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.39 beginchar("&",14u#,asc_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.39 beginchar("&",14u#,asc_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.40 italcorr x_height#*slant-
                              serif_fit# - if serifs: .4u# else: 1.5u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.40 ...rr x_height#*slant-serif_fit# - if serifs:
                                                   .4u# else: 1.5u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.3l_width#-0.4serif_fit#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.40 ...rif_fit# - if serifs: .4u# else: 1.5u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.41 adjust_fit(
                0,serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.41 adjust_fit(
                0,serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.42 pickup tiny.nib;
                      pos2(slab,-90); x2=4u; bot y2r=-o;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.42 pickup tiny.nib;
                      pos2(slab,-90); x2=4u; bot y2r=-o;
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.42 pickup tiny.nib; pos2(
                           slab,-90); x2=4u; bot y2r=-o;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.42 pickup tiny.nib; pos2(
                           slab,-90); x2=4u; bot y2r=-o;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.43 if not hefty:
                  (x,y2l)=whatever[z2r,(w-5u,x_height)]; x2l:=x; fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.43 if not hefty:
                  (x,y2l)=whatever[z2r,(w-5u,x_height)]; x2l:=x; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.44 if serifs:
                pos0(fudged.hair,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.49 else: pickup fine.nib;
                            pos1(.25[slab,flare],-15); rt x1r=hround(w-2u);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.49 else: pickup fine.nib;
                            pos1(.25[slab,flare],-15); rt x1r=hround(w-2u);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.49 else: pickup fine.nib; pos1(
                                 .25[slab,flare],-15); rt x1r=hround(w-2u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.49 else: pickup fine.nib; pos1(
                                 .25[slab,flare],-15); rt x1r=hround(w-2u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x1l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.50 ....75[bar_height,x_height]; x1l:=good.x x1l;
                                                   y1l:=good.y y1l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y1l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.50 ...height]; x1l:=good.x x1l; y1l:=good.y y1l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.52  filldraw stroke term.e(
                             2',1,right,1,4); fi  % short diagonal and terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.52  filldraw stroke term.e(
                             2',1,right,1,4); fi  % short diagonal and terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.52  filldraw stroke term.e(
                             2',1,right,1,4); fi  % short diagonal and terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.52  filldraw stroke term.e(
                             2',1,right,1,4); fi  % short diagonal and terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.52  filldraw stroke term.e(
                             2',1,right,1,4); fi  % short diagonal and terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.53 pickup tiny.nib;
                      numeric slope,theta,reduced_hair;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.53 pickup tiny.nib;
                      numeric slope,theta,reduced_hair;
(That was another `errmessage'.)

>> (-slope,1)
! Not implemented: angle(unknown pair).
<to be read again> 
                   ;
l.54 ...-2vair-slab)/10.5u; theta=angle(-slope,1);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> theta
>> (-slope,1)
! Equation cannot be performed (numeric=pair).
<to be read again> 
                   ;
l.54 ...-2vair-slab)/10.5u; theta=angle(-slope,1);
                                                  
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> hround(fudged.hair.if.hefty:
                                       -2stem_corr.fi)
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.55 ...ound(fudged.hair if hefty:-2stem_corr fi))
                                                  ;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -tiny.breadth
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)>u_:
                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.55 ...ound(fudged.hair if hefty:-2stem_corr fi))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.57 x3l-x3r=curve-tiny; pos6(
                              reduced_hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.57 x3l-x3r=curve-tiny; pos6(
                              reduced_hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.58 pos5(
          vair,theta); y5=.5h;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58 pos5(
          vair,theta); y5=.5h;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.59 ellipse_set(
                 2l,3l,4l,5l); ellipse_set(2r,3r,4r,5r);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.59 ellipse_set(
                 2l,3l,4l,5l); ellipse_set(2r,3r,4r,5r);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.59 ellipse_set(2l,3l,4l,5l); ellipse_set(
                                           2r,3r,4r,5r);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.59 ellipse_set(2l,3l,4l,5l); ellipse_set(
                                           2r,3r,4r,5r);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.60 pos7(
          vair,270); top y7l=h+o; x7=.45[x6r,x8r];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.60 pos7(
          vair,270); top y7l=h+o; x7=.45[x6r,x8r];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.61 pos8(
          fudged.stem,30); x8l=good.x(x8l+3.5u-x8); y8r=y6;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61 pos8(
          fudged.stem,30); x8l=good.x(x8l+3.5u-x8); y8r=y6;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -x8+x8l+0.4968
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.61 ...(fudged.stem,30); x8l=good.x(x8l+3.5u-x8);
                                                   y8r=y6;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> ellipse_set
! Isolated expression.
<to be read again> 
                   (
l.62 ellipse_set(
                 7l,6l,5',5l);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.62 ellipse_set(
                 7l,6l,5',5l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z2e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.63 filldraw stroke z2e{
                         left}...z3e{up}...z4e---z5e...{up}z6e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.63 filldraw stroke z2e{
                         left}...z3e{up}...z4e---z5e...{up}z6e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.63 filldraw stroke z2e{
                         left}...z3e{up}...z4e---z5e...{up}z6e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.63 filldraw stroke z2e{
                         left}...z3e{up}...z4e---z5e...{up}z6e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.63 filldraw stroke z2e{
                         left}...z3e{up}...z4e---z5e...{up}z6e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos10
! Isolated expression.
<to be read again> 
                   (
l.65 pos10(
           slab,90); x10=w-3.5u; bot y10l=-o;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.65 pos10(
           slab,90); x10=w-3.5u; bot y10l=-o;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.66 pos9(
          fudged.stem,angle(z8-z10)-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.66 pos9(
          fudged.stem,angle(z8-z10)-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> (0.49359,-y10+y8)
! Not implemented: angle(unknown pair).
<to be read again> 
                   +
l.67 ...5[z8,z10]+(1.75u,0) rotated(angle(z8-z10)+
                                                  90);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> (0.49359,-y10+y8)
>> 90
! Not implemented: (unknown pair)+(known numeric).
<to be read again> 
                   )
l.67 ...8,z10]+(1.75u,0) rotated(angle(z8-z10)+90)
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> stroke.z8e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.68 filldraw stroke z8e{
                         down}...z9e{z10-z8}...{right}z10e;  % long diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z8e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.68 filldraw stroke z8e{
                         down}...z9e{z10-z8}...{right}z10e;  % long diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z8e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.68 filldraw stroke z8e{
                         down}...z9e{z10-z8}...{right}z10e;  % long diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.68 filldraw stroke z8e{
                         down}...z9e{z10-z8}...{right}z10e;  % long diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.68 filldraw stroke z8e{
                         down}...z9e{z10-z8}...{right}z10e;  % long diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.69 if serifs:
                pickup crisp.nib; pos10'(slab,90); z10'=z10;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.75 else: pickup fine.nib;
                            pos10'(slab,90); z10'=z10;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.75 else: pickup fine.nib;
                            pos10'(slab,90); z10'=z10;
(That was another `errmessage'.)

>> pos10'
! Isolated expression.
<to be read again> 
                   (
l.75 else: pickup fine.nib; pos10'(
                                   slab,90); z10'=z10;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.75 else: pickup fine.nib; pos10'(
                                   slab,90); z10'=z10;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.76  pos11(
            Vround .5[slab,flare],90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.76  pos11(
            Vround .5[slab,flare],90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5tiny.breadth-0.1tiny+0.00035
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.77  rt x11=hround(r-letter_fit-u);
                                     bot y11l=vround .07bar_height-o;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78  filldraw stroke term.e(
                             10',11,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78  filldraw stroke term.e(
                             10',11,right,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78  filldraw stroke term.e(
                             10',11,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78  filldraw stroke term.e(
                             10',11,right,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78  filldraw stroke term.e(
                             10',11,right,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [38]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Question mark"
l.81 cmchar "Question mark"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Question mark"
l.81 cmchar "Question mark"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.7l_width#-3.4serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.82 beginchar("?",8.5u#,asc_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.82 beginchar("?",8.5u#,asc_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.8asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ;
l.83 italcorr .8asc_height#*slant;
                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.83 italcorr .8asc_height#*slant;
                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.84 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.84 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.85 pickup tiny.nib;
                      pos7(dot_size,0); pos8(dot_size,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.85 pickup tiny.nib;
                      pos7(dot_size,0); pos8(dot_size,90);
(That was another `errmessage'.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.85 pickup tiny.nib; pos7(
                           dot_size,0); pos8(dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.85 pickup tiny.nib; pos7(
                           dot_size,0); pos8(dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.85 pickup tiny.nib; pos7(dot_size,0); pos8(
                                             dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.85 pickup tiny.nib; pos7(dot_size,0); pos8(
                                             dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_size+0.50023
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.86 lft x7l=hround(.5w-.25u-.5dot_size);
                                          bot y8l=0; z7=z8; dot(7,8);  % dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.86 ...w-.25u-.5dot_size); bot y8l=0; z7=z8; dot(
                                                  7,8);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.86 ...w-.25u-.5dot_size); bot y8l=0; z7=z8; dot(
                                                  7,8);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.88 bot_width=if hefty:
                        max(hround .8dot_size,fine.breadth) else: hair fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.89 pickup fine.nib;
                      pos2(vair,90); pos3(curve,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.89 pickup fine.nib;
                      pos2(vair,90); pos3(curve,0);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.89 pickup fine.nib; pos2(
                           vair,90); pos3(curve,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.89 pickup fine.nib; pos2(
                           vair,90); pos3(curve,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.89 pickup fine.nib; pos2(vair,90); pos3(
                                          curve,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.89 pickup fine.nib; pos2(vair,90); pos3(
                                          curve,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.90 pos4(
          vair,-90); pos5(bot_width,0); pos6(bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90 pos4(
          vair,-90); pos5(bot_width,0); pos6(bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.90 pos4(vair,-90); pos5(
                          bot_width,0); pos6(bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90 pos4(vair,-90); pos5(
                          bot_width,0); pos6(bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.90 pos4(vair,-90); pos5(bot_width,0); pos6(
                                             bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90 pos4(vair,-90); pos5(bot_width,0); pos6(
                                             bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.93 {{interim
               superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.93 {{interim
               superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.94 filldraw stroke pulled_super_arc.e(
                                        2,3)(superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.94 filldraw stroke pulled_super_arc.e(
                                        2,3)(superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.94 filldraw stroke pulled_super_arc.e(
                                        2,3)(superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.94 filldraw stroke pulled_super_arc.e(
                                        2,3)(superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.94 filldraw stroke pulled_super_arc.e(
                                        2,3)(superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.96 if serifs:
                pos1(hair,180); pos0(flare,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.98 else: pos1(
                Vround 5/7[vair,flare],110);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.98 else: pos1(
                Vround 5/7[vair,flare],110);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.07501y8r+0.6
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.99 ...r=hround u; top y1r=vround .9[y6,top y2r];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.100  filldraw stroke term.e(
                              2,1,left,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.100  filldraw stroke term.e(
                              2,1,left,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.100  filldraw stroke term.e(
                              2,1,left,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.100  filldraw stroke term.e(
                              2,1,left,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.100  filldraw stroke term.e(
                              2,1,left,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [63]
>> iff
! Isolated expression.
<to be read again> 
                   known
l.103 iff known
                spanish_query: cmchar "Spanish open question mark";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   known
l.103 iff known
                spanish_query: cmchar "Spanish open question mark";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.7l_width#-3.4serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.104 ....5u#,asc_height#-desc_depth#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> -desc_depth#+asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.104 ....5u#,asc_height#-desc_depth#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.104 ....5u#,asc_height#-desc_depth#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.105 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.105 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.106 pickup tiny.nib;
                       pos7(dot_size,0); pos8(dot_size,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.106 pickup tiny.nib;
                       pos7(dot_size,0); pos8(dot_size,90);
(That was another `errmessage'.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.106 pickup tiny.nib; pos7(
                            dot_size,0); pos8(dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.106 pickup tiny.nib; pos7(
                            dot_size,0); pos8(dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.106 pickup tiny.nib; pos7(dot_size,0); pos8(
                                              dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.106 pickup tiny.nib; pos7(dot_size,0); pos8(
                                              dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_size+0.50023
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.107 lft x7l=hround(.5w-.25u-.5dot_size);
                                           top y8r=h; z7=z8; dot(7,8);  % dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.107 ...-.25u-.5dot_size); top y8r=h; z7=z8; dot(
                                                  7,8);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.107 ...-.25u-.5dot_size); top y8r=h; z7=z8; dot(
                                                  7,8);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.109 top_width=if hefty:
                         max(hround .8dot_size,fine.breadth) else: hair fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.110 pickup fine.nib;
                       pos2(vair,270); pos3(curve,180);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.110 pickup fine.nib;
                       pos2(vair,270); pos3(curve,180);
(That was another `errmessage'.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.110 pickup fine.nib; pos2(
                            vair,270); pos3(curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.110 pickup fine.nib; pos2(
                            vair,270); pos3(curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.110 pickup fine.nib; pos2(vair,270); pos3(
                                            curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.110 pickup fine.nib; pos2(vair,270); pos3(
                                            curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.111 pos4(
           vair,90); pos5(top_width,180); pos6(top_width,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.111 pos4(
           vair,90); pos5(top_width,180); pos6(top_width,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.111 pos4(vair,90); pos5(
                          top_width,180); pos6(top_width,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.111 pos4(vair,90); pos5(
                          top_width,180); pos6(top_width,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.111 pos4(vair,90); pos5(top_width,180); pos6(
                                               top_width,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.111 pos4(vair,90); pos5(top_width,180); pos6(
                                               top_width,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.114 {{interim
                superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.114 {{interim
                superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.115 filldraw stroke pulled_super_arc.e(
                                         2,3)(superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.115 filldraw stroke pulled_super_arc.e(
                                         2,3)(superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.115 filldraw stroke pulled_super_arc.e(
                                         2,3)(superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.115 filldraw stroke pulled_super_arc.e(
                                         2,3)(superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.115 filldraw stroke pulled_super_arc.e(
                                         2,3)(superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.117 if serifs:
                 pos1(hair,0); pos0(flare,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.119 else: pos1(
                 Vround 5/7[vair,flare],-70);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 else: pos1(
                 Vround 5/7[vair,flare],-70);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.07501y8l+0.4
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.120 ...ound(w-u); bot y1r=vround .9[y6,bot y2r];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121  filldraw stroke term.e(
                              2,1,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121  filldraw stroke term.e(
                              2,1,right,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121  filldraw stroke term.e(
                              2,1,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121  filldraw stroke term.e(
                              2,1,right,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121  filldraw stroke term.e(
                              2,1,right,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [15]) (romspl.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "Dotless letter i"
l.9 cmchar "Dotless letter i"
                             ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Dotless letter i"
l.9 cmchar "Dotless letter i"
                             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> l_width#-2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.10 beginchar(oct"020",5u#,x_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.10 beginchar(oct"020",5u#,x_height#,0)
                                        ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.11 italcorr x_height#*slant-
                              serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.11 ...rr x_height#*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.12 adjust_fit(
                serif_fit#+stem_shift# if monospace:+.25u#fi,serif_fit#-stem...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.12 adjust_fit(
                serif_fit#+stem_shift# if monospace:+.25u#fi,serif_fit#-stem...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.13 pickup tiny.nib;
                      pos1(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.13 pickup tiny.nib;
                      pos1(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.13 pickup tiny.nib; pos1(
                           stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.13 pickup tiny.nib; pos1(
                           stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.13 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.13 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -stem'
! Not implemented: odd(unknown numeric).
<to be read again> 
                   :
l.14 if odd(w-stem'):
                      change_width; fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -stem'
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.14 if odd(w-stem'):
                      change_width; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.5stem'+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.15 lft x1l=hround(.5w-.5stem');
                                  x1=x2;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.16 top y1=x_height if serifs:
                                +min(oo,serif_drop) fi; bot y2=0;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17 filldraw stroke z1e--
                          z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17 filldraw stroke z1e--
                          z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.17 filldraw stroke z1e--
                          z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.18 if serifs:
                sloped_serif.l(1,2,a,1/3,.95jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [16]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Dotless letter j"
l.22 cmchar "Dotless letter j"
                              ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Dotless letter j"
l.22 cmchar "Dotless letter j"
                              ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.1l_width#-2.2serif_fit#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.23 ...char(oct"021",5.5u#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.23 ...char(oct"021",5.5u#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.23 ...char(oct"021",5.5u#,x_height#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.24 italcorr x_height#*slant-
                              serif_fit#+.5stem#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4l_width#-0.2serif_fit#+0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.24 ...rr x_height#*slant-serif_fit#+.5stem#-2u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.25 adjust_fit(
                serif_fit#+2stem_shift# if monospace:+.5u# fi,
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.25 adjust_fit(
                serif_fit#+2stem_shift# if monospace:+.5u# fi,
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.27 pickup tiny.nib;
                      pos1(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.27 pickup tiny.nib;
                      pos1(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.27 pickup tiny.nib; pos1(
                           stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.27 pickup tiny.nib; pos1(
                           stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.27 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.27 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem'+0.49977
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.28 rt x1r=hround(.5w+.25u+.5stem');
                                      x1=x2;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.29 top y1=x_height if serifs:
                                +min(oo,serif_drop) fi; bot y2=-1/3d;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.30 filldraw stroke z1e--
                          z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.31 if serifs:
                sloped_serif.l(1,2,a,1/3,1.1jut,serif_drop);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.37 else: pickup fine.nib;
                            pos2'(stem',0); z2'=z2;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.37 else: pickup fine.nib;
                            pos2'(stem',0); z2'=z2;
(That was another `errmessage'.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.37 else: pickup fine.nib; pos2'(
                                  stem',0); z2'=z2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.37 else: pickup fine.nib; pos2'(
                                  stem',0); z2'=z2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.38  pos6(
           .2[vair,stem'],-90); pos7(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.38  pos6(
           .2[vair,stem'],-90); pos7(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.38  pos6(.2[vair,stem'],-90); pos7(
                                     vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.38  pos6(.2[vair,stem'],-90); pos7(
                                     vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> asc_height
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(asc_height)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.41  (x,y7l)=whatever[z7r,(x1,min(h,asc_height)
                                                )]; x7l:=x;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE6386
>> (x1,0)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.41  (x,y7l)=whatever[z7r,(x1,min(h,asc_height))]
                                                  ; x7l:=x;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4102
>> (x5r-x1,y5r)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.42  z5r=z2'r; (x2'l,y5l)=whatever[z7l,z5r]
                                            ; x5l=x2'l; y5=y5r;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> stroke.z2'e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.44  filldraw stroke z2'e..
                            {down}z5e & super_arc.e(5,6)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z2'e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.44  filldraw stroke z2'e..
                            {down}z5e & super_arc.e(5,6)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z2'e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.44  filldraw stroke z2'e..
                            {down}z5e & super_arc.e(5,6)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.44  filldraw stroke z2'e..
                            {down}z5e & super_arc.e(5,6)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
l.44  filldraw stroke z2'e..
                            {down}z5e & super_arc.e(5,6)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [17]
>> cmchar
! Isolated expression.
<to be read again> 
                   "German letter es-zet (sharp s)"
l.48 cmchar "German letter es-zet (sharp s)"
                                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "German letter es-zet (sharp s)"
l.48 cmchar "German letter es-zet (sharp s)"
                                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -u_+0.03703r_flare-0.33333vair#+curve#+0.5stem#-0.01852
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.49 ...31",4.5u#+max(4.5u#,.5stem#+flare#+curve#)
                                                  ,asc_height#,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE6402
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.49 ....5u#,.5stem#+flare#+curve#),asc_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.49 ....5u#,.5stem#+flare#+curve#),asc_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.50 italcorr asc_height#*slant-
                                u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.4serif_fit#-0.2l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.50 italcorr asc_height#*slant-u#;
                                   
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.51 adjust_fit(
                serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.51 adjust_fit(
                serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.52 pickup tiny.nib;
                      pos1(stem',0); pos2(stem',0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.52 pickup tiny.nib;
                      pos1(stem',0); pos2(stem',0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.52 pickup tiny.nib; pos1(
                           stem',0); pos2(stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.52 pickup tiny.nib; pos1(
                           stem',0); pos2(stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.52 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem',0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.52 pickup tiny.nib; pos1(stem',0); pos2(
                                          stem',0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5stem'+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.53 lft x1l=lft x2l=hround(2.5u-.5stem');
                                           bot y1=0; y2=y4=.5[x_height,y3];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55 filldraw stroke z1e--
                          z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55 filldraw stroke z1e--
                          z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55 filldraw stroke z1e--
                          z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.55 filldraw stroke z1e--
                          z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5stem'+0.5curve+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.56 ...dge=rt x1r; curve'=hround .5[stem',curve];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.57 pickup fine.nib;
                      pos4(curve',0); pos5(vair,-90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.57 pickup fine.nib;
                      pos4(curve',0); pos5(vair,-90);
(That was another `errmessage'.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.57 pickup fine.nib; pos4(
                           curve',0); pos5(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.57 pickup fine.nib; pos4(
                           curve',0); pos5(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.57 pickup fine.nib; pos4(curve',0); pos5(
                                           vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.57 pickup fine.nib; pos4(curve',0); pos5(
                                           vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2'
! Isolated expression.
<to be read again> 
                   (
l.58 pos2'(
           stem',180); z2'=z2; x3=.5[x2,x4]; rt x4r=hround(w-u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58 pos2'(
           stem',180); z2'=z2; x3=.5[x2,x4]; rt x4r=hround(w-u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stem_edge+0.49908
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
min->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu<u_:u_:=uu;fi.endfor....
l.59 ...t; lft x5=min(lft x4l,hround(stem_edge+u))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -x4l+stem_edge+0.49908
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(stem_edge+0.49908)> if(EXPR0)<u_:
                                      u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.59 ...t; lft x5=min(lft x4l,hround(stem_edge+u))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60 filldraw stroke pulled_super_arc.e(
                                        2',3)(.5superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60 filldraw stroke pulled_super_arc.e(
                                        2',3)(.5superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60 filldraw stroke pulled_super_arc.e(
                                        2',3)(.5superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60 filldraw stroke pulled_super_arc.e(
                                        2',3)(.5superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.60 filldraw stroke pulled_super_arc.e(
                                        2',3)(.5superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5'
! Isolated expression.
<to be read again> 
                   (
l.63 pos5'(
           vair,90); z5'=z5; pos6(curve',0); pos7(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.63 pos5'(
           vair,90); z5'=z5; pos6(curve',0); pos7(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.63 pos5'(vair,90); z5'=z5; pos6(
                                  curve',0); pos7(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.63 pos5'(vair,90); z5'=z5; pos6(
                                  curve',0); pos7(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.63 pos5'(vair,90); z5'=z5; pos6(curve',0); pos7(
                                                  vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.63 pos5'(vair,90); z5'=z5; pos6(curve',0); pos7(
                                                  vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.65 if serifs:
                pos8(hair,-180) else: pos8(vair,-110) fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.65 if serifs: pos8(hair,-180) else: pos8(
                                           vair,-110) fi;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.65 if serifs: pos8(hair,-180) else: pos8(
                                           vair,-110) fi;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stem_edge+1.49954
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ,
l.66 lft x8r=min(hround(stem_edge+.5u+1),
                                         lft x8r+x6r-2eps-x8l);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -x8l+x8r-stem_edge-1.49905
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.66 ...und(stem_edge+.5u+1),lft x8r+x6r-2eps-x8l)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.4x6-x8l+0.6stem_edge+0.89925
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.67 x7=max(x8l+eps,.4[lft x8r,x6])
                                   ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.68 filldraw stroke pulled_super_arc.e(
                                        5',6)(.5superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.68 filldraw stroke pulled_super_arc.e(
                                        5',6)(.5superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.68 filldraw stroke pulled_super_arc.e(
                                        5',6)(.5superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.68 filldraw stroke pulled_super_arc.e(
                                        5',6)(.5superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.68 filldraw stroke pulled_super_arc.e(
                                        5',6)(.5superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.70 if serifs:
                pos9(5/7[vair,flare],-180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x8l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.75 else: bot y8r=vround .01h; x8l:=good.x x8l;
                                                 y8l:=good.y(y8l+.5);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y8l+1
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.75 ...01h; x8l:=good.x x8l; y8l:=good.y(y8l+.5);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76  filldraw stroke term.e(
                             7,8,left,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76  filldraw stroke term.e(
                             7,8,left,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76  filldraw stroke term.e(
                             7,8,left,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76  filldraw stroke term.e(
                             7,8,left,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76  filldraw stroke term.e(
                             7,8,left,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [25]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The ligature ae"
l.79 cmchar "The ligature ae"
                             ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The ligature ae"
l.79 cmchar "The ligature ae"
                             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -5.2serif_fit#+2.6l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.80 beginchar(oct"032",13u#,x_height#,0)
                                         ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.80 beginchar(oct"032",13u#,x_height#,0)
                                         ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.01389bh+0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.81 italcorr .5[bar_height#,x_height#]*slant+
                                              .5min(curve#-1.5u#,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.6serif_fit#+0.3l_width#-curve#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)<u_:
                      u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.81 ...ht#,x_height#]*slant+.5min(curve#-1.5u#,0)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.3serif_fit#-0.15l_width#+0.5curve#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.81 ...t#,x_height#]*slant+.5min(curve#-1.5u#,0);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.82 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.82 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.84 if monospace:
                   right_curve=left_curve=fudged.stem;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> curve+6.55423
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.85 ...max(tiny.breadth,hround(curve-2stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -tiny.breadth+curve+6.55423
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(curve+6.55423)> if(EXPR0)>u_:
                                  u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.85 ...max(tiny.breadth,hround(curve-2stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> hround(curve-if.serifs:
                                  6else:8fi\\stem_corr)
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.86 ...d(curve-if serifs:6 else:8 fi\\stem_corr))
                                                  ;fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> curve+24.71692
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.86 ...d(curve-if serifs:6 else:8 fi\\stem_corr))
                                                  ;fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -tiny.breadth+curve+24.71692
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(curve+24.71692)> if(EXPR0)>u_:
                                   u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.86 ...d(curve-if serifs:6 else:8 fi\\stem_corr))
                                                  ;fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.87 pickup tiny.nib;
                      pos11(right_curve,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.87 pickup tiny.nib;
                      pos11(right_curve,0);
(That was another `errmessage'.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.87 pickup tiny.nib; pos11(
                            right_curve,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.87 pickup tiny.nib; pos11(
                            right_curve,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos12
! Isolated expression.
<to be read again> 
                   (
l.88 pos12(
           vair,90); pos13(mfudged.stem,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.88 pos12(
           vair,90); pos13(mfudged.stem,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos13
! Isolated expression.
<to be read again> 
                   (
l.88 pos12(vair,90); pos13(
                           mfudged.stem,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.88 pos12(vair,90); pos13(
                           mfudged.stem,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5tiny.breadth+0.00046
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.5tiny.breadth+0.00092)> if(EXPR0)<u_:
                                            u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.90 rt x11r=hround min(w-.5u,w-u+.5right_curve)
                                                ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5mfudged.stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.91 lft x13r=hround (.5w-.5mfudged.stem);
                                           x12=.55[x13,x11];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.92 {{interim
               superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.92 {{interim
               superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.93  filldraw stroke super_arc.e(
                                  11,12)}};  % right bowl of e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.93  filldraw stroke super_arc.e(
                                  11,12)}};  % right bowl of e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.93  filldraw stroke super_arc.e(
                                  11,12)}};  % right bowl of e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.93  filldraw stroke super_arc.e(
                                  11,12)}};  % right bowl of e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.93  filldraw stroke super_arc.e(
                                  11,12)}};  % right bowl of e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.95 if serifs:
                pos14(vair',270); pos15(mfudged.hair,360);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos14
! Isolated expression.
<to be read again> 
                   (
l.101 else: pos14(
                  vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.101 else: pos14(
                  vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.102  filldraw stroke super_arc.e(
                                   12,13)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.102  filldraw stroke super_arc.e(
                                   12,13)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.102  filldraw stroke super_arc.e(
                                   12,13)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.102  filldraw stroke super_arc.e(
                                   12,13)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.102  filldraw stroke super_arc.e(
                                   12,13)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.104  pickup fine.nib;
                        pos14'(vair,270); z14=z14';
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.104  pickup fine.nib;
                        pos14'(vair,270); z14=z14';
(That was another `errmessage'.)

>> pos14'
! Isolated expression.
<to be read again> 
                   (
l.104  pickup fine.nib; pos14'(
                               vair,270); z14=z14';
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.104  pickup fine.nib; pos14'(
                               vair,270); z14=z14';
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos15
! Isolated expression.
<to be read again> 
                   (
l.105  pos15(
             .5[vair,flare],275); rt x15r=hround(w-.6u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.105  pos15(
             .5[vair,flare],275); rt x15r=hround(w-.6u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -y15+y15r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.106  y15r=good.y(y15r+1/3bar_height-y15);
                                            y15l:=good.y y15l; x15l:=good.x ...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y15l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.106 ...5r+1/3bar_height-y15); y15l:=good.y y15l;
                                                   x15l:=good.x x15l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x15l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.106 ...5); y15l:=good.y y15l; x15l:=good.x x15l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              14',15,right,1,4); fi  % right terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              14',15,right,1,4); fi  % right terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              14',15,right,1,4); fi  % right terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              14',15,right,1,4); fi  % right terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.107  filldraw stroke term.e(
                              14',15,right,1,4); fi  % right terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z10e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 fill stroke z10e--
                        z11'e;  % crossbar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 fill stroke z10e--
                        z11'e;  % crossbar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 fill stroke z10e--
                        z11'e;  % crossbar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.110 pickup fine.nib;
                       top y3r=h+vround 1.5oo;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.110 pickup fine.nib;
                       top y3r=h+vround 1.5oo;
(That was another `errmessage'.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.111 if serifs:
                 pos1(flare,180); pos2(mfudged.hair,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.115 else: pos1(
                 5/7[vair,flare],95); x1l=good.x 1.5u; x1r:=good.x x1r;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.115 else: pos1(
                 5/7[vair,flare],95); x1l=good.x 1.5u; x1r:=good.x x1r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x1r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.115 ...e],95); x1l=good.x 1.5u; x1r:=good.x x1r;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.116  pos3(
            1/8[vair,thin_join],90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.116  pos3(
            1/8[vair,thin_join],90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.118  filldraw stroke term.e(
                              3,1,left,.9,4); fi  % left terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.118  filldraw stroke term.e(
                              3,1,left,.9,4); fi  % left terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.118  filldraw stroke term.e(
                              3,1,left,.9,4); fi  % left terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.118  filldraw stroke term.e(
                              3,1,left,.9,4); fi  % left terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.118  filldraw stroke term.e(
                              3,1,left,.9,4); fi  % left terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.119 pos4(
           mfudged.stem,0); x4=x13; y4=1/3[bar_height,h];
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 pos4(
           mfudged.stem,0); x4=x13; y4=1/3[bar_height,h];
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.120 pos5(
           mfudged.stem,0); x5=x4; y5=min(y4,y13);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.120 pos5(
           mfudged.stem,0); x5=x4; y5=min(y4,y13);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5y14+0.5y12
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.120 pos5(mfudged.stem,0); x5=x4; y5=min(y4,y13)
                                                 ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121 filldraw stroke super_arc.e(
                                  3,4)&z4e--z5e;  % arc and stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121 filldraw stroke super_arc.e(
                                  3,4)&z4e--z5e;  % arc and stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121 filldraw stroke super_arc.e(
                                  3,4)&z4e--z5e;  % arc and stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121 filldraw stroke super_arc.e(
                                  3,4)&z4e--z5e;  % arc and stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.121 filldraw stroke super_arc.e(
                                  3,4)&z4e--z5e;  % arc and stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.122 pos6(
           .6[thin_join,vair],90); x6=x4; bot y6=y10l;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.122 pos6(
           .6[thin_join,vair],90); x6=x4; bot y6=y10l;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.123 pos7(
           left_curve,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.123 pos7(
           left_curve,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5tiny.breadth-0.00092
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.5tiny.breadth-0.00137)> if(EXPR0)>u_:
                                             u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.124 lft x7r=hround max(.5u,1.5u-.5left_curve)
                                               ; y7=1/3[top y8l,top y6r];
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.125 pos8(
           vair,270); x8l=3.75u; bot y8r=-oo;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.125 pos8(
           vair,270); x8l=3.75u; bot y8r=-oo;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.126 pos9(
           .5[vair,fudged.stem],360); x9=x5; y9=.55bar_height;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.126 pos9(
           .5[vair,fudged.stem],360); x9=x5; y9=.55bar_height;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> %CAPSULE1635
>> (x9l+0.00343,y9l-y8l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.127 (x',y8r)=whatever[z8l,z9l]
                                ; x8r:=max(x',x8-u);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x8-x'+0.00092
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(x8+0.00092)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.127 ...y8r)=whatever[z8l,z9l]; x8r:=max(x',x8-u)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.128 {{interim
                superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.128 {{interim
                superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z9e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.129  filldraw stroke z9e{
                           down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; %...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z9e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.129  filldraw stroke z9e{
                           down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; %...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z9e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.129  filldraw stroke z9e{
                           down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; %...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.129  filldraw stroke z9e{
                           down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; %...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.129  filldraw stroke z9e{
                           down}...z8e{left}...{up}z7e&super_arc.e(7,6)}}; %...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [26]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The ligature oe"
l.133 cmchar "The ligature oe"
                              ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The ligature oe"
l.133 cmchar "The ligature oe"
                              ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -5.6serif_fit#+2.8l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.134 beginchar(oct"033",14u#,x_height#,0)
                                          ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.134 beginchar(oct"033",14u#,x_height#,0)
                                          ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.01389bh+0.5x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.135 italcorr .5[bar_height#,x_height#]*slant+
                                               .5min(curve#-1.5u#,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.6serif_fit#+0.3l_width#-curve#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)<u_:
                      u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.135 ...t#,x_height#]*slant+.5min(curve#-1.5u#,0)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.3serif_fit#-0.15l_width#+0.5curve#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.135 ...#,x_height#]*slant+.5min(curve#-1.5u#,0);
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.136 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.136 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.138 if monospace:
                    right_curve=left_curve=fudged.stem;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> curve+6.55423
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.139 ...ax(fine.breadth,hround(curve-2stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -ess'+curve+6.55423
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(curve+6.55423)> if(EXPR0)>u_:
                                  u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.139 ...ax(fine.breadth,hround(curve-2stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> hround(curve-if.serifs:
                                  6else:8fi\\stem_corr)
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.140 ...(curve-if serifs:6 else:8 fi\\stem_corr))
                                                  ;fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> curve+24.71692
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.140 ...(curve-if serifs:6 else:8 fi\\stem_corr))
                                                  ;fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -tiny.breadth+curve+24.71692
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(curve+24.71692)> if(EXPR0)>u_:
                                   u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.140 ...(curve-if serifs:6 else:8 fi\\stem_corr))
                                                  ;fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.141 pickup tiny.nib;
                       pos11(right_curve,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.141 pickup tiny.nib;
                       pos11(right_curve,0);
(That was another `errmessage'.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.141 pickup tiny.nib; pos11(
                             right_curve,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.141 pickup tiny.nib; pos11(
                             right_curve,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos12
! Isolated expression.
<to be read again> 
                   (
l.142 pos12(
            vair,90); pos13(mfudged.stem,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.142 pos12(
            vair,90); pos13(mfudged.stem,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos13
! Isolated expression.
<to be read again> 
                   (
l.142 pos12(vair,90); pos13(
                            mfudged.stem,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.142 pos12(vair,90); pos13(
                            mfudged.stem,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5tiny.breadth+0.00046
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.5tiny.breadth+0.00092)> if(EXPR0)<u_:
                                            u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.144 rt x11r=hround min(w-.5u,w-u+.5right_curve)
                                                 ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -0.5mfudged.stem+0.49954
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.145 lft x13r=hround (.5(w+u)-.5mfudged.stem);
                                                x12=.55[x13,x11];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> {{
! Isolated expression.
<to be read again> 
                   interim
l.146 {{interim
                superness:=more_super;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   interim
l.146 {{interim
                superness:=more_super;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.147  filldraw stroke super_arc.e(
                                   11,12)}};  % right bowl of e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.147  filldraw stroke super_arc.e(
                                   11,12)}};  % right bowl of e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.147  filldraw stroke super_arc.e(
                                   11,12)}};  % right bowl of e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.147  filldraw stroke super_arc.e(
                                   11,12)}};  % right bowl of e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.147  filldraw stroke super_arc.e(
                                   11,12)}};  % right bowl of e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.149 if serifs:
                 pos14(vair',270); pos15(mfudged.hair,360);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> pos14
! Isolated expression.
<to be read again> 
                   (
l.155 else: pos14(
                  vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.155 else: pos14(
                  vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.156  filldraw stroke super_arc.e(
                                   12,13)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.156  filldraw stroke super_arc.e(
                                   12,13)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.156  filldraw stroke super_arc.e(
                                   12,13)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.156  filldraw stroke super_arc.e(
                                   12,13)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.156  filldraw stroke super_arc.e(
                                   12,13)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.158  pickup fine.nib;
                        pos14'(vair,270); z14=z14';
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.158  pickup fine.nib;
                        pos14'(vair,270); z14=z14';
(That was another `errmessage'.)

>> pos14'
! Isolated expression.
<to be read again> 
                   (
l.158  pickup fine.nib; pos14'(
                               vair,270); z14=z14';
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.158  pickup fine.nib; pos14'(
                               vair,270); z14=z14';
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos15
! Isolated expression.
<to be read again> 
                   (
l.159  pos15(
             .5[vair,flare],275); rt x15r=hround(w-.6u);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.159  pos15(
             .5[vair,flare],275); rt x15r=hround(w-.6u);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -y15+y15r+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.160  y15r=good.y(y15r+1/3bar_height-y15);
                                            y15l:=good.y y15l; x15l:=good.x ...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> y15l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.160 ...5r+1/3bar_height-y15); y15l:=good.y y15l;
                                                   x15l:=good.x x15l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x15l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.160 ...5); y15l:=good.y y15l; x15l:=good.x x15l;
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.161  filldraw stroke term.e(
                              14',15,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.term.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.161  filldraw stroke term.e(
                              14',15,right,1,4); fi  % terminal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.term.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.161  filldraw stroke term.e(
                              14',15,right,1,4); fi  % terminal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.161  filldraw stroke term.e(
                              14',15,right,1,4); fi  % terminal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.161  filldraw stroke term.e(
                              14',15,right,1,4); fi  % terminal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z10e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.163 fill stroke z10e--
                        z11'e;  % crossbar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.163 fill stroke z10e--
                        z11'e;  % crossbar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.163 fill stroke z10e--
                        z11'e;  % crossbar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.164 pickup fine.nib;
                       pos1(vair,90); pos3(vair,-90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.164 pickup fine.nib;
                       pos1(vair,90); pos3(vair,-90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.164 pickup fine.nib; pos1(
                            vair,90); pos3(vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 pickup fine.nib; pos1(
                            vair,90); pos3(vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.164 pickup fine.nib; pos1(vair,90); pos3(
                                           vair,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 pickup fine.nib; pos1(vair,90); pos3(
                                           vair,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.165 pos2(
           left_curve,180); pos4(mfudged.stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165 pos2(
           left_curve,180); pos4(mfudged.stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.165 pos2(left_curve,180); pos4(
                                 mfudged.stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165 pos2(left_curve,180); pos4(
                                 mfudged.stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5curve-0.00069
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(-0.5curve-0.00114)> if(EXPR0)>u_:
                                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.166 lft x2r=hround max(.5u,1.25u-.5curve)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.169 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3); % left half of ...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.169 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3); % left half of ...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.169 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3); % left half of ...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.169 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3); % left half of ...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.169 filldraw stroke pulled_arc.e(
                                   1,2) & pulled_arc.e(2,3); % left half of ...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.pulled_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.170 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1); % right half of...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.170 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1); % right half of...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.170 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1); % right half of...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.170 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1); % right half of...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.170 filldraw stroke pulled_arc.e(
                                   3,4) & pulled_arc.e(4,1); % right half of...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [27]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Scandinavian letter o/slash"
l.173 cmchar "Scandinavian letter o/slash"
                                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Scandinavian letter o/slash"
l.173 cmchar "Scandinavian letter o/slash"
                                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -3.6serif_fit#+1.8l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.174 ...u#,x_height#+.5desc_depth#,.5desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.5desc_depth#+x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.174 ...u#,x_height#+.5desc_depth#,.5desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.5desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.174 ...u#,x_height#+.5desc_depth#,.5desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.175 italcorr h#*slant-
                        u#-max(.5fudge*stem#,.75u#)+.5vair#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5fudge
>> stem#
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.175 italcorr h#*slant-u#-max(.5fudge*stem#,
                                             .75u#)+.5vair#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.3serif_fit#+0.15l_width#-stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.175 ...corr h#*slant-u#-max(.5fudge*stem#,.75u#)
                                                  +.5vair#;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.4serif_fit#+0.5vair#-0.2l_width#-stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.175 ...lant-u#-max(.5fudge*stem#,.75u#)+.5vair#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.176 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.176 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> pulled_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.183 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.186 pickup crisp.nib;
                        pos5(vair,theta); pos6(vair,theta);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.186 pickup crisp.nib;
                        pos5(vair,theta); pos6(vair,theta);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.186 pickup crisp.nib; pos5(
                             vair,theta); pos6(vair,theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.186 pickup crisp.nib; pos5(
                             vair,theta); pos6(vair,theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.186 pickup crisp.nib; pos5(vair,theta); pos6(
                                               vair,theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.186 pickup crisp.nib; pos5(vair,theta); pos6(
                                               vair,theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187 filldraw stroke z5e--
                           z6e;  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187 filldraw stroke z5e--
                           z6e;  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187 filldraw stroke z5e--
                           z6e;  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187 filldraw stroke z5e--
                           z6e;  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.187 filldraw stroke z5e--
                           z6e;  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [28]) (romspu.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "The ligature AE"
l.9 cmchar "The ligature AE"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The ligature AE"
l.9 cmchar "The ligature AE"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -6.4serif_fit#+3.2l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.10 beginchar(oct"035",16u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.10 beginchar(oct"035",16u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.11 italcorr cap_height#*slant-
                                beak_jut#-.5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#-beak_jut#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.11 italcorr cap_height#*slant-beak_jut#-.5u#;
                                               
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.12 adjust_fit(
                cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.12 adjust_fit(
                cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.9mfudged.cap_stem+0.1mfudged.hair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.14 ...,hround .9[mfudged.hair,mfudged.cap_stem])
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.9mfudged.cap_stem+0.1mfudged.hair-tiny.breadth+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.14 ...,hround .9[mfudged.hair,mfudged.cap_stem])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.15 pickup tiny.nib;
                      pos1(mid_stem,0); pos2(mid_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.15 pickup tiny.nib;
                      pos1(mid_stem,0); pos2(mid_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos1(
                           mid_stem,0); pos2(mid_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos1(
                           mid_stem,0); pos2(mid_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos1(mid_stem,0); pos2(
                                             mid_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos1(mid_stem,0); pos2(
                                             mid_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
>> hefty
! Not implemented: (unknown numeric)or(unknown numeric).
<to be read again> 
                   :
l.16 lft x1l=lft x2l=hround(if monospace or hefty:
                                                  .55 else:.5 fi\\w-.75u);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.16 lft x1l=lft x2l=hround(if monospace or hefty:
                                                  .55 else:.5 fi\\w-.75u);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18 filldraw stroke z1e--
                          z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18 filldraw stroke z1e--
                          z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.18 filldraw stroke z1e--
                          z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.19 pickup crisp.nib;
                       pos3(slab,90); pos4(mfudged.hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.19 pickup crisp.nib;
                       pos3(slab,90); pos4(mfudged.hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.19 pickup crisp.nib; pos3(
                            slab,90); pos4(mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 pickup crisp.nib; pos3(
                            slab,90); pos4(mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.19 pickup crisp.nib; pos3(slab,90); pos4(
                                           mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 pickup crisp.nib; pos3(slab,90); pos4(
                                           mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y3l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.20 ...; rt x4r=hround(w-u); y4=good.y(y3l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.21 arm(
         3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.21 arm(
         3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.22 pos5(
          cap_bar,-90); pos6(mfudged.hair,0); x5=x1;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.22 pos5(
          cap_bar,-90); pos6(mfudged.hair,0); x5=x1;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.22 pos5(cap_bar,-90); pos6(
                             mfudged.hair,0); x5=x1;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.22 pos5(cap_bar,-90); pos6(
                             mfudged.hair,0); x5=x1;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.23 top y5l=vround(if hefty:
                             .52 else:.48 fi\\[y2,y1]+.5cap_bar);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5cap_bar+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.23 ...hefty:.52 else:.48 fi\\[y2,y1]+.5cap_bar);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.24 pos0(
          cap_bar,90); pos7(mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.24 pos0(
          cap_bar,90); pos7(mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.24 pos0(cap_bar,90); pos7(
                            mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.24 pos0(cap_bar,90); pos7(
                            mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
>> hefty
! Not implemented: (unknown numeric)and(unknown numeric).
<to be read again> 
                   )
l.26 if serifs and not(monospace and hefty)
                                           : rt x6r=hround(w-3.65u+.5mfudged...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.26 if serifs and not(monospace and hefty):
                                             rt x6r=hround(w-3.65u+.5mfudged...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
>> hefty
! Not implemented: (unknown numeric)and(unknown numeric).
<to be read again> 
                   :
l.26 if serifs and not(monospace and hefty):
                                             rt x6r=hround(w-3.65u+.5mfudged...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.26 if serifs and not(monospace and hefty):
                                             rt x6r=hround(w-3.65u+.5mfudged...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.29 arm(
         5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm a...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.29 arm(
         5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm a...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.29 arm(5,6,f,beak_darkness,0); arm(
                                     0,7,g,beak_darkness,0);  % middle arm a...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.29 arm(5,6,f,beak_darkness,0); arm(
                                     0,7,g,beak_darkness,0);  % middle arm a...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.30 pos8(
          slab if not serifs:+2stem_corr fi,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.30 pos8(
          slab if not serifs:+2stem_corr fi,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.31 pos9(
          mfudged.hair,0); bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+eps;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.31 pos9(
          mfudged.hair,0); bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+eps;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y8l+1.16667beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.31 ... bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.32 arm(
         8,9,h,beak_darkness,1.5beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.32 arm(
         8,9,h,beak_darkness,1.5beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.33 left_stem=if monospace:
                            fudged.hair else: cap_hair fi if hefty: -3stem_c...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.33 ...ce:fudged.hair else: cap_hair fi if hefty:
                                                   -3stem_corr fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.35 x12=x1l-apex_corr-if monospace:
                                    2 fi\\u; y12=h;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.36 alpha=diag_ratio(
                      1,.5left_stem,y12-y11,x12-x11l);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> diag_end
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   (
l.38 fill diag_end(
                   12l,11l,1,1,11r,12r)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   (
l.38 fill diag_end(
                   12l,11l,1,1,11r,12r)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.38 fill diag_end(
                   12l,11l,1,1,11r,12r)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x10
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.41 fill z10--
               (x1,y10)--(x1,h)--z12--cycle;  % link
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.41 fill z10--(x1,y10)--
                         (x1,h)--z12--cycle;  % link
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.41 fill z10--(x1,y10)--(x1,h)--
                                 z12--cycle;  % link
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> (x8-x3,0)
! Not implemented: angle(unknown pair).
<to be read again> 
                   )
l.42 penpos13(whatever,angle(z2-z1))
                                    ; z13=whatever[z11,z12];
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> (x8-x3,0)
! Improper transformation argument.
<to be read again> 
                   ;
penpos->...y(SUFFIX2)l)=((EXPR3),0)rotated(EXPR4);
                                                  x(SUFFIX2)=0.5(x(SUFFIX2)l...
l.42 penpos13(whatever,angle(z2-z1))
                                    ; z13=whatever[z11,z12];
The expression shown above has the wrong type,
so I can't transform anything using it.
Proceed, and I'll omit the transformation.

! Redundant equation.
<to be read again> 
                   ;
l.43 ...ap_band,90); x14=x0; y13l=y14l; y13r=y14r;
                                                  
I already knew that this equation was true.
But perhaps no harm has been done; let's continue.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.44 if hefty:
               y14r=.4h; else: y14=y0; fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x13l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(l)> path_(SUFFIX0):=z13(SUFFIX0)--
                                       z14(SUFFIX0); ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.45 penstroke z13e--z14e;
                           % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(l)> ...(SUFFIX0):=z13(SUFFIX0)--z14(SUFFIX0);
                                                   ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.45 penstroke z13e--z14e;
                           % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x13r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(r)> path_(SUFFIX0):=z13(SUFFIX0)--
                                       z14(SUFFIX0); ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.45 penstroke z13e--z14e;
                           % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
<for(r)> ...(SUFFIX0):=z13(SUFFIX0)--z14(SUFFIX0);
                                                   ENDFOR
penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.45 penstroke z13e--z14e;
                           % bar line
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.46 if serifs:
                numeric inner_jut; pickup tiny.nib;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [29]
>> cmchar
! Isolated expression.
<to be read again> 
                   "The ligature OE"
l.55 cmchar "The ligature OE"
                             ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "The ligature OE"
l.55 cmchar "The ligature OE"
                             ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -7.2serif_fit#+3.6l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.56 beginchar(oct"036",18u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.56 beginchar(oct"036",18u#,cap_height#,0)
                                           ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.57 italcorr cap_height#*slant-
                                beak_jut#-.5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#-beak_jut#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.57 italcorr cap_height#*slant-beak_jut#-.5u#;
                                               
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.58 adjust_fit(
                cap_serif_fit#,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.58 adjust_fit(
                cap_serif_fit#,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.8mfudged.cap_stem+0.2mfudged.hair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.60 ...,hround .8[mfudged.hair,mfudged.cap_stem])
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.8mfudged.cap_stem+0.2mfudged.hair-tiny.breadth+0.5
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.60 ...,hround .8[mfudged.hair,mfudged.cap_stem])
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.61 pickup tiny.nib;
                      pos1(light_stem,0); pos2(light_stem,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.61 pickup tiny.nib;
                      pos1(light_stem,0); pos2(light_stem,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.61 pickup tiny.nib; pos1(
                           light_stem,0); pos2(light_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61 pickup tiny.nib; pos1(
                           light_stem,0); pos2(light_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.61 pickup tiny.nib; pos1(light_stem,0); pos2(
                                               light_stem,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.61 pickup tiny.nib; pos1(light_stem,0); pos2(
                                               light_stem,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.63 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.63 filldraw stroke z1e--
                          z2e; % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.63 filldraw stroke z1e--
                          z2e; % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.63 filldraw stroke z1e--
                          z2e; % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.63 filldraw stroke z1e--
                          z2e; % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.64 pickup crisp.nib;
                       pos3(slab,90); pos4(mfudged.hair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.64 pickup crisp.nib;
                       pos3(slab,90); pos4(mfudged.hair,0);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos3(
                            slab,90); pos4(mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos3(
                            slab,90); pos4(mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos3(slab,90); pos4(
                                           mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos3(slab,90); pos4(
                                           mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y3l-beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   -
l.65 ...; rt x4r=hround(w-u); y4=good.y(y3l-beak)-
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.66 arm(
         3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.66 arm(
         3,4,e,beak_darkness,beak_jut);  % upper arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.67 pos5(
          cap_bar,-90); pos6(mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.67 pos5(
          cap_bar,-90); pos6(mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.67 pos5(cap_bar,-90); pos6(
                             mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.67 pos5(cap_bar,-90); pos6(
                             mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5cap_bar+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.68 top y5l=vround(.52[y2,y1]+.5cap_bar);
                                           x5=x1;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.69 pos0(
          cap_bar,90); pos7(mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.69 pos0(
          cap_bar,90); pos7(mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.69 pos0(cap_bar,90); pos7(
                            mfudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.69 pos0(cap_bar,90); pos7(
                            mfudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
>> hefty
! Not implemented: (unknown numeric)and(unknown numeric).
<to be read again> 
                   )
l.71 if serifs and not(monospace and hefty)
                                           : rt x6r=hround(w-3.4u+.5mfudged....
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Not implemented: not(unknown numeric).
<to be read again> 
                   :
l.71 if serifs and not(monospace and hefty):
                                             rt x6r=hround(w-3.4u+.5mfudged....
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
>> hefty
! Not implemented: (unknown numeric)and(unknown numeric).
<to be read again> 
                   :
l.71 if serifs and not(monospace and hefty):
                                             rt x6r=hround(w-3.4u+.5mfudged....
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.71 if serifs and not(monospace and hefty):
                                             rt x6r=hround(w-3.4u+.5mfudged....
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.74 arm(
         5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm a...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.74 arm(
         5,6,f,beak_darkness,0); arm(0,7,g,beak_darkness,0);  % middle arm a...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> arm
! Isolated expression.
<to be read again> 
                   (
l.74 arm(5,6,f,beak_darkness,0); arm(
                                     0,7,g,beak_darkness,0);  % middle arm a...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.74 arm(5,6,f,beak_darkness,0); arm(
                                     0,7,g,beak_darkness,0);  % middle arm a...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.75 pos8(
          slab if not serifs:+2stem_corr fi,-90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.75 pos8(
          slab if not serifs:+2stem_corr fi,-90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.76 pos9(
          mfudged.hair,0); bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+eps;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.76 pos9(
          mfudged.hair,0); bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+eps;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y8l+1.16667beak+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   +
l.76 ... bot y8r=0; x8=x2; y9=good.y(y8l+7/6beak)+
                                                  eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> arm
! Isolated expression.
<to be read again> 
                   (
l.77 arm(
         8,9,h,beak_darkness,1.5beak_jut);  % lower arm and beak
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.77 arm(
         8,9,h,beak_darkness,1.5beak_jut);  % lower arm and beak
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.79 if monospace:
                   penpos12(fudged.cap_stem,180);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> cap_curve+3.52711
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ,
l.81 else: penpos12(hround(cap_curve-stem_corr),
                                                180); fi
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path path_.l
>> super_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=super_arc(SUFFIX0)(
                                            11,12)&super_arc(SUFFIX0)(12,13)...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=super_arc(SUFFIX0)(
                                            11,12)&super_arc(SUFFIX0)(12,13)...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> super_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=super_arc(SUFFIX0)(
                                            11,12)&super_arc(SUFFIX0)(12,13)...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=super_arc(SUFFIX0)(
                                            11,12)&super_arc(SUFFIX0)(12,13)...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.84 ...e super_arc.e(11,12) & super_arc.e(12,13);
                                                    % left half of bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.85 fill z13r{
               right}..{right}(x2,0)--(x1,h){left}..{left}z11r
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x8
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.85 fill z13r{right}..{right}(x2,0)--
                                      (x1,h){left}..{left}z11r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
l.85 fill z13r{right}..{right}(x2,0)--(x1,h){
                                             left}..{left}z11r
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.86  --
        z11l{right}...{z14-z11l}(.82[x11l,x14],.82[y14,y11l])
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
l.86  --z11l{
             right}...{z14-z11l}(.82[x11l,x14],.82[y14,y11l])
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   }
l.86  --z11l{right}...{z14-z11l}
                                (.82[x11l,x14],.82[y14,y11l])
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.82o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.87  ...
         z14---z15...{z13l-z15}(.82[x13l,x15],.82[y15,y13l])
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   }
l.87  ...z14---z15...{z13l-z15}
                               (.82[x13l,x15],.82[y15,y13l])
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.82o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.88  ...
         {left}z13l--cycle;  % right half of bowl
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.88  ...{left}z13l--
                     cycle;  % right half of bowl
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.89 if serifs:
                serif(1,2,a,1/3,.5cap_jut);  % upper serif
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [30]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Scandinavian letter O/slash"
l.93 cmchar "Scandinavian letter O/slash"
                                         ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Scandinavian letter O/slash"
l.93 cmchar "Scandinavian letter O/slash"
                                         ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -5.6serif_fit#+2.8l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.94 ...cap_height#+.25desc_depth#,.25desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.25desc_depth#+cap_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.94 ...cap_height#+.25desc_depth#,.25desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.25desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.94 ...cap_height#+.25desc_depth#,.25desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7cap_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.95 italcorr .7cap_height#*slant-
                                  .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.95 italcorr .7cap_height#*slant-.5u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.96 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.96 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.99 if monospace:
                   x2r=hround 1.5u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> unknown path path_.l
>> pulled_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.105 ...d_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.108 pickup crisp.nib;
                        pos5(vair',theta); pos6(vair',theta);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.108 pickup crisp.nib;
                        pos5(vair',theta); pos6(vair',theta);
(That was another `errmessage'.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.108 pickup crisp.nib; pos5(
                             vair',theta); pos6(vair',theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.108 pickup crisp.nib; pos5(
                             vair',theta); pos6(vair',theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.108 pickup crisp.nib; pos5(vair',theta); pos6(
                                                vair',theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.108 pickup crisp.nib; pos5(vair',theta); pos6(
                                                vair',theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z5e--
                           z6e;  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z5e--
                           z6e;  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z5e--
                           z6e;  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z5e--
                           z6e;  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.109 filldraw stroke z5e--
                           z6e;  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [31]) (punct.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "Exclamation point"
l.11 cmchar "Exclamation point"
                               ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Exclamation point"
l.11 cmchar "Exclamation point"
                               ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -2serif_fit#+l_width#+width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.12 beginchar("!",5u#+width_adj#,asc_height#,0)
                                                ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.12 beginchar("!",5u#+width_adj#,asc_height#,0)
                                                ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.13 italcorr asc_height#*slant-
                                2u#-.5width_adj#+.5dot_size#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.8serif_fit#-0.4l_width#+0.01389dot_diam-0.5width_adj#+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.13 ...eight#*slant-2u#-.5width_adj#+.5dot_size#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.14 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.14 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.15 pickup tiny.nib;
                      pos3(dot_size,0); pos4(dot_size,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.15 pickup tiny.nib;
                      pos3(dot_size,0); pos4(dot_size,90);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos3(
                           dot_size,0); pos4(dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos3(
                           dot_size,0); pos4(dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos3(dot_size,0); pos4(
                                             dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.15 pickup tiny.nib; pos3(dot_size,0); pos4(
                                             dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_size+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.16 lft x3l=hround(.5w-.5dot_size);
                                     bot y4l=0; z3=z4; dot(3,4);  % dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.16 ...nd(.5w-.5dot_size); bot y4l=0; z3=z4; dot(
                                                  3,4);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.16 ...nd(.5w-.5dot_size); bot y4l=0; z3=z4; dot(
                                                  3,4);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.18 bot_width=if hefty:
                        max(hround .8dot_size,fine.breadth) else: hair fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.19 pickup fine.nib;
                      pos1(dot_size,0); pos2(bot_width,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.19 pickup fine.nib;
                      pos1(dot_size,0); pos2(bot_width,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.19 pickup fine.nib; pos1(
                           dot_size,0); pos2(bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 pickup fine.nib; pos1(
                           dot_size,0); pos2(bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.19 pickup fine.nib; pos1(dot_size,0); pos2(
                                             bot_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 pickup fine.nib; pos1(dot_size,0); pos2(
                                             bot_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> square_dots
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.21 if square_dots:
                     top y1=h;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.24  filldraw z1r...
                     z0...z1l---z2l--z2r---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.24  filldraw z1r...
                     z0...z1l---z2l--z2r---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.24  filldraw z1r...z0...
                          z1l---z2l--z2r---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.24  filldraw z1r...z0...
                          z1l---z2l--z2r---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.24  filldraw z1r...z0...z1l---
                                z2l--z2r---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.24  filldraw z1r...z0...z1l---
                                z2l--z2r---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x2l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.24  filldraw z1r...z0...z1l---z2l--
                                     z2r---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y2l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.24  filldraw z1r...z0...z1l---z2l--
                                     z2r---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x2r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.24  filldraw z1r...z0...z1l---z2l--z2r---
                                           cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y2r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.24  filldraw z1r...z0...z1l---z2l--z2r---
                                           cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [33]
>> iff
! Isolated expression.
<to be read again> 
                   known
l.27 iff known
               spanish_shriek: cmchar "Spanish open exclamation point";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   known
l.27 iff known
               spanish_shriek: cmchar "Spanish open exclamation point";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -2serif_fit#+l_width#+width_adj#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.28 ..._adj#,asc_height#-desc_depth#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> -desc_depth#+asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.28 ..._adj#,asc_height#-desc_depth#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.28 ..._adj#,asc_height#-desc_depth#,desc_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.29 italcorr h#*slant-
                       2u#-.5width_adj#+.5dot_size#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.8serif_fit#-0.4l_width#+0.01389dot_diam-0.5width_adj#+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.29 ...orr h#*slant-2u#-.5width_adj#+.5dot_size#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.30 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.30 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.31 pickup tiny.nib;
                      pos3(dot_size,0); pos4(dot_size,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.31 pickup tiny.nib;
                      pos3(dot_size,0); pos4(dot_size,90);
(That was another `errmessage'.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.31 pickup tiny.nib; pos3(
                           dot_size,0); pos4(dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.31 pickup tiny.nib; pos3(
                           dot_size,0); pos4(dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.31 pickup tiny.nib; pos3(dot_size,0); pos4(
                                             dot_size,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.31 pickup tiny.nib; pos3(dot_size,0); pos4(
                                             dot_size,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_size+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.32 lft x3l=hround(.5w-.5dot_size);
                                     top y4r=h; z3=z4; dot(3,4);  % dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.32 ...nd(.5w-.5dot_size); top y4r=h; z3=z4; dot(
                                                  3,4);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.32 ...nd(.5w-.5dot_size); top y4r=h; z3=z4; dot(
                                                  3,4);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.34 top_width=if hefty:
                        max(hround .8dot_size,fine.breadth) else: hair fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.35 pickup fine.nib;
                      pos1(dot_size,0); pos2(top_width,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.35 pickup fine.nib;
                      pos1(dot_size,0); pos2(top_width,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.35 pickup fine.nib; pos1(
                           dot_size,0); pos2(top_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.35 pickup fine.nib; pos1(
                           dot_size,0); pos2(top_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.35 pickup fine.nib; pos1(dot_size,0); pos2(
                                             top_width,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.35 pickup fine.nib; pos1(dot_size,0); pos2(
                                             top_width,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> square_dots
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.37 if square_dots:
                     bot y1=-d;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x1l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.40  filldraw z1l...
                     z0...z1r---z2r--z2l---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.40  filldraw z1l...
                     z0...z1r---z2r--z2l---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.40  filldraw z1l...z0...
                          z1r---z2r--z2l---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -o
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
...->..
       tension.atleast1..
l.40  filldraw z1l...z0...
                          z1r---z2r--z2l---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.40  filldraw z1l...z0...z1r---
                                z2r--z2l---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.40  filldraw z1l...z0...z1r---
                                z2r--z2l---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x2r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40  filldraw z1l...z0...z1r---z2r--
                                     z2l---cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y2r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.40  filldraw z1l...z0...z1r---z2r--
                                     z2l---cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x2l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.40  filldraw z1l...z0...z1r---z2r--z2l---
                                           cycle; fi  % stem and bulb
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y2l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
l.40  filldraw z1l...z0...z1r---z2r--z2l---
                                           cycle; fi  % stem and bulb
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [14]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Hash mark (number sign)"
l.43 cmchar "Hash mark (number sign)"
                                     ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Hash mark (number sign)"
l.43 cmchar "Hash mark (number sign)"
                                     ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.44 if monospace:
                   compute_spread(.6x_height#,.7x_height#);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> compute_spread
! Isolated expression.
<to be read again> 
                   (
l.45 else: compute_spread(
                          .45x_height#,.55x_height#); fi
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.45 else: compute_spread(
                          .45x_height#,.55x_height#); fi
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -6serif_fit#+3l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.46 beginchar("#",15u#,asc_height#,asc_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.46 beginchar("#",15u#,asc_height#,asc_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.46 beginchar("#",15u#,asc_height#,asc_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.5rule_thickness#+0.5spread#+math_axis#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.47 ..._axis#+.5(spread#+rule_thickness#))*slant-
                                                  .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.47 ...#+.5(spread#+rule_thickness#))*slant-.5u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.48 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.48 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rule.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.49 pickup rule.nib;
                      lft x1=hround u-eps; x3=x1; x2=x4=w-x1;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.49 pickup rule.nib;
                      lft x1=hround u-eps; x3=x1; x2=x4=w-x1;
(That was another `errmessage'.)

>> y1
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.51 draw z1--
              z2;  % upper bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.51 draw z1--z2;
                   % upper bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.52 draw z3--
              z4;  % lower bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.52 draw z3--z4;
                   % lower bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.54 x8=good.x if monospace:
                             .6 else: .5 fi\\w;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

 [35]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Per cent sign"
l.64 cmchar "Per cent sign"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Per cent sign"
l.64 cmchar "Per cent sign"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 2fudge
>> hair#+stem#
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.65 ...char("%",9u#+max(6u#,2fudge*(hair#+stem#))
                                                  ,
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hair#-u_+stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.65 ...char("%",9u#+max(6u#,2fudge*(hair#+stem#))
                                                  ,
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> %CAPSULE7304
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.66   body_height#,body_height#-asc_height#)
                                             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.66   body_height#,body_height#-asc_height#)
                                             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#-asc_height#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.66   body_height#,body_height#-asc_height#)
                                             ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.67 italcorr if hefty:
                        .4asc_height#*slant-.5u# else: h#*slant-u# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.67 ...: .4asc_height#*slant-.5u# else: h#*slant-
                                                  u# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.39998serif_fit#-0.2l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.67 ...c_height#*slant-.5u# else: h#*slant-u# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.68 adjust_fit(
                0,0); pickup fine.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.68 adjust_fit(
                0,0); pickup fine.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.68 adjust_fit(0,0); pickup fine.nib;
                                      
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.68 adjust_fit(0,0); pickup fine.nib;
                                      
(That was another `errmessage'.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> hround(fudged.hair.if.hefty:
                                       -2stem_corr.fi)
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.71 ...ound(fudged.hair if hefty:-2stem_corr fi))
                                                  ;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -ess'
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)>u_:
                      u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.71 ...ound(fudged.hair if hefty:-2stem_corr fi))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.72 pos1(
          vair,90); pos2(left_curve,180); pos3(vair,270); pos4(right_curve,3...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.72 pos1(
          vair,90); pos2(left_curve,180); pos3(vair,270); pos4(right_curve,3...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.72 pos1(vair,90); pos2(
                         left_curve,180); pos3(vair,270); pos4(right_curve,3...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.72 pos1(vair,90); pos2(
                         left_curve,180); pos3(vair,270); pos4(right_curve,3...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.72 pos1(vair,90); pos2(left_curve,180); pos3(
                                               vair,270); pos4(right_curve,3...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.72 pos1(vair,90); pos2(left_curve,180); pos3(
                                               vair,270); pos4(right_curve,3...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.72 ...os2(left_curve,180); pos3(vair,270); pos4(
                                                  right_curve,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.72 ...os2(left_curve,180); pos3(vair,270); pos4(
                                                  right_curve,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.74 bot y3r=floor(if monospace:
                                 .7 else: .5 fi\\ asc_height);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5asc_height
! Not implemented: floor(unknown numeric).
<to be read again> 
                   ;
l.74 ...f monospace: .7 else: .5 fi\\ asc_height);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76 filldraw stroke pulled_super_arc.e(
                                        1,2)(superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76 filldraw stroke pulled_super_arc.e(
                                        1,2)(superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76 filldraw stroke pulled_super_arc.e(
                                        1,2)(superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76 filldraw stroke pulled_super_arc.e(
                                        1,2)(superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.76 filldraw stroke pulled_super_arc.e(
                                        1,2)(superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78 filldraw stroke super_arc.e(
                                 3,4) & super_arc.e(4,1); % right half of up...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78 filldraw stroke super_arc.e(
                                 3,4) & super_arc.e(4,1); % right half of up...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78 filldraw stroke super_arc.e(
                                 3,4) & super_arc.e(4,1); % right half of up...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78 filldraw stroke super_arc.e(
                                 3,4) & super_arc.e(4,1); % right half of up...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.78 filldraw stroke super_arc.e(
                                 3,4) & super_arc.e(4,1); % right half of up...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.79 pos5(
          vair,90); pos6(left_curve,180); pos7(vair,270); pos8(right_curve,3...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 pos5(
          vair,90); pos6(left_curve,180); pos7(vair,270); pos8(right_curve,3...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.79 pos5(vair,90); pos6(
                         left_curve,180); pos7(vair,270); pos8(right_curve,3...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 pos5(vair,90); pos6(
                         left_curve,180); pos7(vair,270); pos8(right_curve,3...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.79 pos5(vair,90); pos6(left_curve,180); pos7(
                                               vair,270); pos8(right_curve,3...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 pos5(vair,90); pos6(left_curve,180); pos7(
                                               vair,270); pos8(right_curve,3...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.79 ...os6(left_curve,180); pos7(vair,270); pos8(
                                                  right_curve,360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 ...os6(left_curve,180); pos7(vair,270); pos8(
                                                  right_curve,360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.81 top y5r=vround(if monospace:
                                  .3 else: .5 fi\\ asc_height);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.5asc_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.81 ...f monospace: .3 else: .5 fi\\ asc_height);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.83 filldraw stroke pulled_super_arc.e(
                                        5,6)(superpull)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.pulled_super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.83 filldraw stroke pulled_super_arc.e(
                                        5,6)(superpull)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.pulled_super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.83 filldraw stroke pulled_super_arc.e(
                                        5,6)(superpull)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.83 filldraw stroke pulled_super_arc.e(
                                        5,6)(superpull)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.83 filldraw stroke pulled_super_arc.e(
                                        5,6)(superpull)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.85 filldraw stroke super_arc.e(
                                 7,8) & super_arc.e(8,5); % right half of lo...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.85 filldraw stroke super_arc.e(
                                 7,8) & super_arc.e(8,5); % right half of lo...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.85 filldraw stroke super_arc.e(
                                 7,8) & super_arc.e(8,5); % right half of lo...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.85 filldraw stroke super_arc.e(
                                 7,8) & super_arc.e(8,5); % right half of lo...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.85 filldraw stroke super_arc.e(
                                 7,8) & super_arc.e(8,5); % right half of lo...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rule.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.86 pickup rule.nib;
                      top y9=h; bot y10=-d;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.86 pickup rule.nib;
                      top y9=h; bot y10=-d;
(That was another `errmessage'.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.87 if hefty:
               x9=good.x(x5-eps); x10=good.x(x1+eps);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.90  pickup fine.nib;
                       pos9(rule_thickness,angle(z9-z10)+90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.90  pickup fine.nib;
                       pos9(rule_thickness,angle(z9-z10)+90);
(That was another `errmessage'.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.90  pickup fine.nib; pos9(
                            rule_thickness,angle(z9-z10)+90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.90  pickup fine.nib; pos9(
                            rule_thickness,angle(z9-z10)+90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.91  pos11(
            vair,angle(z1r-z4r)-90); pos12(vair,angle(z9-z10)+90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.91  pos11(
            vair,angle(z1r-z4r)-90); pos12(vair,angle(z9-z10)+90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos12
! Isolated expression.
<to be read again> 
                   (
l.91  pos11(vair,angle(z1r-z4r)-90); pos12(
                                           vair,angle(z9-z10)+90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.91  pos11(vair,angle(z1r-z4r)-90); pos12(
                                           vair,angle(z9-z10)+90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path p
>> super_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
l.92  path p; p=super_arc.r(
                            1,4); z11r=point 2/3 of p; z12r=z9r;
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
l.92  path p; p=super_arc.r(
                            1,4); z11r=point 2/3 of p; z12r=z9r;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.66667
>> unknown path p
! Not implemented: point(known numeric)of(unknown path).
<to be read again> 
                   ;
l.92 ...; p=super_arc.r(1,4); z11r=point 2/3 of p;
                                                   z12r=z9r;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> x11r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ;
l.92 ...; p=super_arc.r(1,4); z11r=point 2/3 of p;
                                                   z12r=z9r;
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y11r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.92 ...; p=super_arc.r(1,4); z11r=point 2/3 of p;
                                                   z12r=z9r;
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> stroke.z11e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.93  filldraw stroke z11e{
                           direction 2/3 of p}...{z9-z10}z12e; fi  % link
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z11e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.93  filldraw stroke z11e{
                           direction 2/3 of p}...{z9-z10}z12e; fi  % link
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z11e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.93  filldraw stroke z11e{
                           direction 2/3 of p}...{z9-z10}z12e; fi  % link
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.93  filldraw stroke z11e{
                           direction 2/3 of p}...{z9-z10}z12e; fi  % link
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.93  filldraw stroke z11e{
                           direction 2/3 of p}...{z9-z10}z12e; fi  % link
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [37]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Apostrophe"
l.96 cmchar "Apostrophe"
                        ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Apostrophe"
l.96 cmchar "Apostrophe"
                        ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -1.9999serif_fit#+0.99998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.97 beginchar("'",5u#,asc_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.97 beginchar("'",5u#,asc_height#,0)
                                     ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.98 italcorr asc_height#*slant+
                                .5dot_size#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.79996serif_fit#-0.4l_width#+0.01389dot_diam+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.98 italcorr asc_height#*slant+.5dot_size#-2u#;
                                                
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.99 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.99 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_size+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.100 x1-.5dot_size=hround(.5w-.5dot_size);
                                            y1+.5dot_size=h;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.101 if monospace:
                    comma(1,a,dot_size,.28u,vround 1.5comma_depth);  % large...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> comma
! Isolated expression.
<to be read again> 
                   (
l.102 else: comma(
                  1,a,dot_size,.25u,comma_depth); fi  % comma with increased...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.102 else: comma(
                  1,a,dot_size,.25u,comma_depth); fi  % comma with increased...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [39]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Left parenthesis"
l.105 cmchar "Left parenthesis"
                               ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Left parenthesis"
l.105 cmchar "Left parenthesis"
                               ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.106 beginchar("(",7u# if monospace:
                                      -u# fi,body_height#,paren_depth#);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -2.79985serif_fit#+1.39998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.106 ...ospace: -u# fi,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.106 ...ospace: -u# fi,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> paren_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.106 ...ospace: -u# fi,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.107 italcorr body_height#*slant-
                                  .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.107 italcorr body_height#*slant-.5u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.108 adjust_fit(
                 0,0); pickup fine.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.108 adjust_fit(
                 0,0); pickup fine.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.108 adjust_fit(0,0); pickup fine.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.108 adjust_fit(0,0); pickup fine.nib;
                                       
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.109 pos1(
           vair,0); pos2(.75[hair,stem],0); pos3(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.109 pos1(
           vair,0); pos2(.75[hair,stem],0); pos3(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.109 pos1(vair,0); pos2(
                         .75[hair,stem],0); pos3(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.109 pos1(vair,0); pos2(
                         .75[hair,stem],0); pos3(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.109 pos1(vair,0); pos2(.75[hair,stem],0); pos3(
                                                 vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.109 pos1(vair,0); pos2(.75[hair,stem],0); pos3(
                                                 vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.110 ...(w-u); lft x2l=hround(x1-4u if monospace:
                                                   +4/3u fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x1+0.50366
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.110 ...x2l=hround(x1-4u if monospace: +4/3u fi);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.112 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.112 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.112 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.112 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.112 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [40]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Right parenthesis"
l.116 cmchar "Right parenthesis"
                                ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Right parenthesis"
l.116 cmchar "Right parenthesis"
                                ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.117 beginchar(")",7u# if monospace:
                                      -u# fi,body_height#,paren_depth#);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -2.79985serif_fit#+1.39998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.117 ...ospace: -u# fi,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.117 ...ospace: -u# fi,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> paren_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.117 ...ospace: -u# fi,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> math_axis#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.118 italcorr math_axis#*slant-
                                .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.118 italcorr math_axis#*slant-.5u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.119 adjust_fit(
                 0,0); pickup fine.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.119 adjust_fit(
                 0,0); pickup fine.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.119 adjust_fit(0,0); pickup fine.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.119 adjust_fit(0,0); pickup fine.nib;
                                       
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.120 pos1(
           vair,0); pos2(.75[hair,stem],0); pos3(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.120 pos1(
           vair,0); pos2(.75[hair,stem],0); pos3(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.120 pos1(vair,0); pos2(
                         .75[hair,stem],0); pos3(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.120 pos1(vair,0); pos2(
                         .75[hair,stem],0); pos3(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.120 pos1(vair,0); pos2(.75[hair,stem],0); pos3(
                                                 vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.120 pos1(vair,0); pos2(.75[hair,stem],0); pos3(
                                                 vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.121 ...ound u; rt x2r=hround(x1+4u if monospace:
                                                   -4/3u fi);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> x1+0.49634
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.121 ...x2r=hround(x1+4u if monospace: -4/3u fi);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.123 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.123 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.123 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.123 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.123 filldraw stroke z1e{
                          3(x2e-x1e),y2-y1}...z2e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [41]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Asterisk"
l.127 cmchar "Asterisk"
                       ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Asterisk"
l.127 cmchar "Asterisk"
                       ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> low_asterisk
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.129   if low_asterisk:
                        math_axis#+.5x_height# else: body_height# fi,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -3.59981serif_fit#+1.79997l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.129 ...xis#+.5x_height# else: body_height# fi,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.129 ...xis#+.5x_height# else: body_height# fi,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.130 italcorr h#*slant-
                        .75u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.29999serif_fit#-0.15l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.130 italcorr h#*slant-.75u#;
                              
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.131 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.131 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.3thin_join+0.7stem+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.132 ...are; ast_flare=hround .7[thin_join,stem];
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-150)> ...0+0.5(0,-thin_join)rotated.theta---
                                                  z[(EXPR0)]+0.5(-ast_flare,...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(-150)> ...st_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(-150)> ...st_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-150)> ...st_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-150)> ...st_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(-150)> ...-z0+0.5(0,thin_join)rotated.theta--
                                                  cycle; ENDFOR
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! angle(0,0) is taken as zero.
<for(-90)> ...ic.theta;theta=angle(z[(EXPR0)]-z0);
                                                  fill.z0+0.5(0,-thin_join)r...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
The `angle' between two identical points is undefined.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-90)> ...z0+0.5(0,-thin_join)rotated.theta---
                                                  z[(EXPR0)]+0.5(-ast_flare,...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(-90)> ...ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(-90)> ...ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-90)> ...ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-90)> ...ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(-90)> ...--z0+0.5(0,thin_join)rotated.theta--
                                                  cycle; ENDFOR
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-30)> ...z0+0.5(0,-thin_join)rotated.theta---
                                                  z[(EXPR0)]+0.5(-ast_flare,...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(-30)> ...ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(-30)> ...ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-30)> ...ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(-30)> ...ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(-30)> ...--z0+0.5(0,thin_join)rotated.theta--
                                                  cycle; ENDFOR
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(30)> ....z0+0.5(0,-thin_join)rotated.theta---
                                                  z[(EXPR0)]+0.5(-ast_flare,...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(30)> ...-ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(30)> ...-ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(30)> ...-ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(30)> ...-ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(30)> ...---z0+0.5(0,thin_join)rotated.theta--
                                                  cycle; ENDFOR
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

! angle(0,0) is taken as zero.
<for(90)> ...ric.theta;theta=angle(z[(EXPR0)]-z0);
                                                  fill.z0+0.5(0,-thin_join)r...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
The `angle' between two identical points is undefined.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(90)> ....z0+0.5(0,-thin_join)rotated.theta---
                                                  z[(EXPR0)]+0.5(-ast_flare,...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(90)> ...-ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(90)> ...-ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(90)> ...-ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(90)> ...-ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(90)> ...---z0+0.5(0,thin_join)rotated.theta--
                                                  cycle; ENDFOR
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(150)> ...z0+0.5(0,-thin_join)rotated.theta---
                                                  z[(EXPR0)]+0.5(-ast_flare,...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(150)> ...ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
<for(150)> ...ast_flare,-ast_flare)rotated.theta..
                                                  z[(EXPR0)]..z[(EXPR0)]+0.5...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.15001thin_join-0.35stem-0.24702
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(150)> ...ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.15001thin_join+0.35stem+0.25
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ..
---->..
       tension.infinity..
<for(150)> ...ast_flare,ast_flare)rotated.theta---
                                                  z0+0.5(0,thin_join)rotated...
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5thin_join
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
<for(150)> ...--z0+0.5(0,thin_join)rotated.theta--
                                                  cycle; ENDFOR
l.139 ...(0,thin_join)rotated theta--cycle; endfor
                                                    % diagonal at angle |d|
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [42]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Plus sign"
l.142 cmchar "Plus sign"
                        ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Plus sign"
l.142 cmchar "Plus sign"
                        ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> beginarithchar
! Isolated expression.
<to be read again> 
                   (
l.143 beginarithchar(
                     "+"); pickup rule.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.143 beginarithchar(
                     "+"); pickup rule.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rule.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.143 beginarithchar("+"); pickup rule.nib;
                                           
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.143 beginarithchar("+"); pickup rule.nib;
                                           
(That was another `errmessage'.)

>> y2
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.146 draw z1--z2;
                    % stem
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5y2+0.00024
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.147 draw z3--
               z4;  % crossbar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5y2+0.00024
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.147 draw z3--z4;
                    % crossbar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [42]
! Extra `endgroup'.
endchar->...makebox(screenrule);showit;fi.endgroup
                                                  
l.148 labels(1,2,3,4); endchar
                              ;
I'm not currently working on a `begingroup',
so I had better not try to end anything.

>> cmchar
! Isolated expression.
<to be read again> 
                   "Comma"
l.150 cmchar "Comma"
                    ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Comma"
l.150 cmchar "Comma"
                    ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.151 numeric dot_diam#; dot_diam#=if monospace:
                                                 5/4 fi\\ dot_size#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> dot_diam+0.00012
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.152 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.152 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -1.9999serif_fit#+0.99998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.153 beginchar(",",5u#,dot_diam#,comma_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.02777dot_diam-0.01389
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.153 beginchar(",",5u#,dot_diam#,comma_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> comma_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.153 beginchar(",",5u#,dot_diam#,comma_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.154 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.154 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_diam+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.155 x1-.5dot_diam=hround(.5w-.5dot_diam);
                                            y1-.5dot_diam=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> comma
! Isolated expression.
<to be read again> 
                   (
l.156 comma(
            1,a,dot_diam,.2u,comma_depth);  % dot and tail
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.156 comma(
            1,a,dot_diam,.2u,comma_depth);  % dot and tail
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [44]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Period"
l.159 cmchar "Period"
                     ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Period"
l.159 cmchar "Period"
                     ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.160 numeric dot_diam#; dot_diam#=if monospace:
                                                 5/4 fi\\ dot_size#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> dot_diam+0.00012
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.161 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.161 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -1.9999serif_fit#+0.99998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.162 beginchar(".",5u#,dot_diam#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.02777dot_diam-0.01389
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.162 beginchar(".",5u#,dot_diam#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.163 adjust_fit(
                 0,0); pickup fine.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.163 adjust_fit(
                 0,0); pickup fine.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.163 adjust_fit(0,0); pickup fine.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.163 adjust_fit(0,0); pickup fine.nib;
                                       
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.164 pos1(
           dot_diam,0); pos2(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 pos1(
           dot_diam,0); pos2(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.164 pos1(dot_diam,0); pos2(
                             dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.164 pos1(dot_diam,0); pos2(
                             dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_diam+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.165 lft x1l=hround(.5w-.5dot_diam);
                                      bot y2l=0; z1=z2; dot(1,2);  % dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.165 ...d(.5w-.5dot_diam); bot y2l=0; z1=z2; dot(
                                                  1,2);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.165 ...d(.5w-.5dot_diam); bot y2l=0; z1=z2; dot(
                                                  1,2);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [46]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Virgule (slash)"
l.168 cmchar "Virgule (slash)"
                              ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Virgule (slash)"
l.168 cmchar "Virgule (slash)"
                              ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -3.59981serif_fit#+1.79997l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.169 beginchar("/",9u#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.169 beginchar("/",9u#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> paren_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.169 beginchar("/",9u#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.170 italcorr body_height#*slant-
                                  .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.170 italcorr body_height#*slant-.5u#;
                                       
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.171 adjust_fit(
                 0,0); pickup rule.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.171 adjust_fit(
                 0,0); pickup rule.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rule.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.171 adjust_fit(0,0); pickup rule.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.171 adjust_fit(0,0); pickup rule.nib;
                                       
(That was another `errmessage'.)

 [47]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Colon"
l.177 cmchar "Colon"
                    ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Colon"
l.177 cmchar "Colon"
                    ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.178 numeric dot_diam#; dot_diam#=if monospace:
                                                 5/4 fi\\ dot_size#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> dot_diam+0.00012
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.179 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.179 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -1.9999serif_fit#+0.99998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.180 beginchar(":",5u#,x_height#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.180 beginchar(":",5u#,x_height#,0)
                                    ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.181 italcorr x_height#*slant+
                               .5dot_diam#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.01389dot_diam+0.79996serif_fit#-0.4l_width#+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.181 italcorr x_height#*slant+.5dot_diam#-2u#;
                                               
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.182 adjust_fit(
                 0,0); pickup fine.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.182 adjust_fit(
                 0,0); pickup fine.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.182 adjust_fit(0,0); pickup fine.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.182 adjust_fit(0,0); pickup fine.nib;
                                       
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.183 pos1(
           dot_diam,0); pos2(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.183 pos1(
           dot_diam,0); pos2(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.183 pos1(dot_diam,0); pos2(
                             dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.183 pos1(dot_diam,0); pos2(
                             dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_diam+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.184 lft x1l=hround(.5w-.5dot_diam);
                                      top y2r=h; z1=z2; dot(1,2);  % upper dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.184 ...d(.5w-.5dot_diam); top y2r=h; z1=z2; dot(
                                                  1,2);  % upper dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.184 ...d(.5w-.5dot_diam); top y2r=h; z1=z2; dot(
                                                  1,2);  % upper dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.185 pos3(
           dot_diam,0); pos4(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.185 pos3(
           dot_diam,0); pos4(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.185 pos3(dot_diam,0); pos4(
                             dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.185 pos3(dot_diam,0); pos4(
                             dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> dot
! Isolated expression.
<to be read again> 
                   (
l.186 x3=x1; bot y4l=0; z3=z4; dot(
                                   3,4);  % lower dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.186 x3=x1; bot y4l=0; z3=z4; dot(
                                   3,4);  % lower dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [58]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Semicolon"
l.189 cmchar "Semicolon"
                        ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Semicolon"
l.189 cmchar "Semicolon"
                        ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.190 numeric dot_diam#; dot_diam#=if monospace:
                                                 5/4 fi\\ dot_size#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> dot_diam+0.00012
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.191 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.191 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -1.9999serif_fit#+0.99998l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.192 beginchar(";",5u#,x_height#,comma_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.192 beginchar(";",5u#,x_height#,comma_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> comma_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.192 beginchar(";",5u#,x_height#,comma_depth#)
                                               ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.193 italcorr x_height#*slant+
                               .5dot_diam#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.01389dot_diam+0.79996serif_fit#-0.4l_width#+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.193 italcorr x_height#*slant+.5dot_diam#-2u#;
                                               
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.194 adjust_fit(
                 0,0); pickup fine.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.194 adjust_fit(
                 0,0); pickup fine.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.194 adjust_fit(0,0); pickup fine.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.194 adjust_fit(0,0); pickup fine.nib;
                                       
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.195 pos1(
           dot_diam,0); pos2(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.195 pos1(
           dot_diam,0); pos2(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.195 pos1(dot_diam,0); pos2(
                             dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.195 pos1(dot_diam,0); pos2(
                             dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_diam+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.196 lft x1l=hround(.5w-.5dot_diam);
                                      top y2r=h; z1=z2; dot(1,2);  % upper dot
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.196 ...d(.5w-.5dot_diam); top y2r=h; z1=z2; dot(
                                                  1,2);  % upper dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.196 ...d(.5w-.5dot_diam); top y2r=h; z1=z2; dot(
                                                  1,2);  % upper dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_diam+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.197 x3-.5dot_diam=hround(.5w-.5dot_diam);
                                            y3-.5dot_diam=0;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> comma
! Isolated expression.
<to be read again> 
                   (
l.198 comma(
            3,a,dot_diam,.05u,comma_depth);  % lower dot and tail
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.198 comma(
            3,a,dot_diam,.05u,comma_depth);  % lower dot and tail
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [59]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Equals sign"
l.201 cmchar "Equals sign"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Equals sign"
l.201 cmchar "Equals sign"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> compute_spread
! Isolated expression.
<to be read again> 
                   (
l.202 compute_spread(
                     .45x_height#,.55x_height#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.202 compute_spread(
                     .45x_height#,.55x_height#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

! Missing `,' has been inserted.
<to be read again> 
                   (
l.203 beginchar("=",14u#,v_center(
                                  spread#+rule_thickness#));
I've finished reading a macro argument and am about to
read another; the arguments weren't delimited correctly.
You might want to delete some tokens before continuing.

>> -5.5997serif_fit#+2.79996l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.203 ...",14u#,v_center(spread#+rule_thickness#))
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> v_center
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.203 ...",14u#,v_center(spread#+rule_thickness#))
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> rule_thickness#+spread#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.203 ...",14u#,v_center(spread#+rule_thickness#))
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.204 italcorr h#*slant-
                        .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.204 italcorr h#*slant-.5u#;
                             
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.205 adjust_fit(
                 0,0); pickup rule.nib;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.205 adjust_fit(
                 0,0); pickup rule.nib;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> rule.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.205 adjust_fit(0,0); pickup rule.nib;
                                       
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.205 adjust_fit(0,0); pickup rule.nib;
                                       
(That was another `errmessage'.)

>> 0.5(SAVED)y2+0.5spread+0.00024
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.208 draw z1--
               z2;  % upper bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5(SAVED)y2+0.5spread+0.00024
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.208 draw z1--z2;
                    % upper bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5(SAVED)y2-0.5spread+0.00024
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.209 draw z3--
               z4;  % lower bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.5(SAVED)y2-0.5spread+0.00024
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   ;
l.209 draw z3--z4;
                    % lower bar
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [61]
>> cmchar
! Isolated expression.
<to be read again> 
                   "At sign"
l.212 cmchar "At sign"
                      ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "At sign"
l.212 cmchar "At sign"
                      ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -5.5997serif_fit#+2.79996l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.213 beginchar("@",14u#,asc_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.213 beginchar("@",14u#,asc_height#,0)
                                       ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.7asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.214 italcorr .7asc_height#*slant-
                                   .5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.2serif_fit#-0.1l_width#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.214 italcorr .7asc_height#*slant-.5u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.215 adjust_fit(
                 0,if hefty or monospace:-2u# else: 0 fi);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.215 adjust_fit(
                 0,if hefty or monospace:-2u# else: 0 fi);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.216 pickup fine.nib;
                       pos0(fudged.hair,0); pos1(vair,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.216 pickup fine.nib;
                       pos0(fudged.hair,0); pos1(vair,90);
(That was another `errmessage'.)

>> pos0
! Isolated expression.
<to be read again> 
                   (
l.216 pickup fine.nib; pos0(
                            fudged.hair,0); pos1(vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.216 pickup fine.nib; pos0(
                            fudged.hair,0); pos1(vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.216 pickup fine.nib; pos0(fudged.hair,0); pos1(
                                                 vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.216 pickup fine.nib; pos0(fudged.hair,0); pos1(
                                                 vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.217 pos2(
           fudged.stem,180); pos3(vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.217 pos2(
           fudged.stem,180); pos3(vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.217 pos2(fudged.stem,180); pos3(
                                  vair,270);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.217 pos2(fudged.stem,180); pos3(
                                  vair,270);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.218 pos4(
           fudged.stem,-180); pos5(fudged.stem,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.218 pos4(
           fudged.stem,-180); pos5(fudged.stem,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.218 pos4(fudged.stem,-180); pos5(
                                   fudged.stem,-180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.218 pos4(fudged.stem,-180); pos5(
                                   fudged.stem,-180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.219 pos6(
           vair,-90); pos7(fudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.219 pos6(
           vair,-90); pos7(fudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos7
! Isolated expression.
<to be read again> 
                   (
l.219 pos6(vair,-90); pos7(
                           fudged.hair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.219 pos6(vair,-90); pos7(
                           fudged.hair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos8
! Isolated expression.
<to be read again> 
                   (
l.220 pos8(
           vair,90); pos9(fudged.hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.220 pos8(
           vair,90); pos9(fudged.hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos9
! Isolated expression.
<to be read again> 
                   (
l.220 pos8(vair,90); pos9(
                          fudged.hair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.220 pos8(vair,90); pos9(
                          fudged.hair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos10
! Isolated expression.
<to be read again> 
                   (
l.221 pos10(
            vair,270); pos11(.5[vair,flare],360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.221 pos10(
            vair,270); pos11(.5[vair,flare],360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos11
! Isolated expression.
<to be read again> 
                   (
l.221 pos10(vair,270); pos11(
                             .5[vair,flare],360);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.221 pos10(vair,270); pos11(
                             .5[vair,flare],360);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.2y10+0.8y8+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.225 top y1r=vround(.8[y10,y8]+.5vair);
                                         bot y3r=vround(.2[y10,y8]-.5vair);
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.8y10+0.2y8+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.225 ...vair); bot y3r=vround(.2[y10,y8]-.5vair);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.9y10+0.1y8
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.y->begingroup.vround((EXPR2)+pen_top)-
                                           pen_top.endgroup
<to be read again> 
                   ;
l.226 ...l,x7l]; y6=y3; y11=good.y(.1[y10,y8]-.5);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> hefty
>> monospace
! Not implemented: (unknown numeric)or(unknown numeric).
<to be read again> 
                   :
l.228 if hefty or monospace:
                             lft x2r=hround(5u-.5fudged.stem);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.228 if hefty or monospace:
                             lft x2r=hround(5u-.5fudged.stem);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.231 filldraw stroke super_arc.e(
                                  1,2) & super_arc.e(2,3);  % left inner bowl
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.231 filldraw stroke super_arc.e(
                                  1,2) & super_arc.e(2,3);  % left inner bowl
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.231 filldraw stroke super_arc.e(
                                  1,2) & super_arc.e(2,3);  % left inner bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.231 filldraw stroke super_arc.e(
                                  1,2) & super_arc.e(2,3);  % left inner bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.231 filldraw stroke super_arc.e(
                                  1,2) & super_arc.e(2,3);  % left inner bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.232 filldraw stroke super_arc.e(
                                  3,0) & super_arc.e(0,1);  % right inner bowl
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.232 filldraw stroke super_arc.e(
                                  3,0) & super_arc.e(0,1);  % right inner bowl
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.232 filldraw stroke super_arc.e(
                                  3,0) & super_arc.e(0,1);  % right inner bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.232 filldraw stroke super_arc.e(
                                  3,0) & super_arc.e(0,1);  % right inner bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.232 filldraw stroke super_arc.e(
                                  3,0) & super_arc.e(0,1);  % right inner bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.super_arc.e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.233 filldraw stroke super_arc.e(
                                  8,9) & super_arc.e(9,10)
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.super_arc.e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.233 filldraw stroke super_arc.e(
                                  8,9) & super_arc.e(9,10)
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.super_arc.e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.233 filldraw stroke super_arc.e(
                                  8,9) & super_arc.e(9,10)
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.233 filldraw stroke super_arc.e(
                                  8,9) & super_arc.e(9,10)
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   (
l.233 filldraw stroke super_arc.e(
                                  8,9) & super_arc.e(9,10)
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
>> monospace
! Not implemented: (unknown numeric)or(unknown numeric).
<to be read again> 
                   :
l.235 if hefty or monospace:
                             {{interim superness:=hein_super;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.235 if hefty or monospace:
                             {{interim superness:=hein_super;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> %CAPSULE7982
>> (0.66667x7l-0.66667x5l,y7l-y6l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.237 else: (x,y6r)=whatever[z6l,z7l]
                                     ; x6r:=x;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> stroke.z4e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.238  filldraw stroke z4e---
                             z5e...z6e{right}...{up}z7e
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z4e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.238  filldraw stroke z4e---
                             z5e...z6e{right}...{up}z7e
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z4e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.238  filldraw stroke z4e---
                             z5e...z6e{right}...{up}z7e
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.238  filldraw stroke z4e---
                             z5e...z6e{right}...{up}z7e
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   ..
---->..
       tension.infinity..
l.238  filldraw stroke z4e---
                             z5e...z6e{right}...{up}z7e
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [64]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Left bracket"
l.242 cmchar "Left bracket"
                           ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Left bracket"
l.242 cmchar "Left bracket"
                           ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> 4.5u#+0.5if.hefty:
                             stem#else:rule_thickness#fi
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.243 ....5if hefty:stem# else:rule_thickness# fi)
                                                  ;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.1u_+0.5rule_thickness#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.243 ....5if hefty:stem# else:rule_thickness# fi)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.244 beginchar("[",wd#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.244 beginchar("[",wd#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> paren_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.244 beginchar("[",wd#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ;
l.245 italcorr body_height#*slant;
                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.245 italcorr body_height#*slant;
                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.246 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.246 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.248 if hefty:
                top_thickness=vair;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.251 pickup crisp.nib;
                        pos1(side_thickness,0); pos2(side_thickness,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.251 pickup crisp.nib;
                        pos1(side_thickness,0); pos2(side_thickness,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.251 pickup crisp.nib; pos1(
                             side_thickness,0); pos2(side_thickness,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.251 pickup crisp.nib; pos1(
                             side_thickness,0); pos2(side_thickness,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.251 ... crisp.nib; pos1(side_thickness,0); pos2(
                                                  side_thickness,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.251 ... crisp.nib; pos1(side_thickness,0); pos2(
                                                  side_thickness,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5top_thickness+0.49771
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
l.252 ...1l=lft x2l=hround(2.5u-.5side_thickness)-
                                                  1-eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253 filldraw stroke z1e--
                           z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253 filldraw stroke z1e--
                           z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.253 filldraw stroke z1e--
                           z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.254 pos3(
           top_thickness,90); pos4(top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.254 pos3(
           top_thickness,90); pos4(top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.254 pos3(top_thickness,90); pos4(
                                   top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.254 pos3(top_thickness,90); pos4(
                                   top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.255 pos5(
           top_thickness,90); pos6(top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255 pos5(
           top_thickness,90); pos6(top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.255 pos5(top_thickness,90); pos6(
                                   top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.255 pos5(top_thickness,90); pos6(
                                   top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257 filldraw stroke z3e--
                           z4e;  % upper bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257 filldraw stroke z3e--
                           z4e;  % upper bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257 filldraw stroke z3e--
                           z4e;  % upper bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257 filldraw stroke z3e--
                           z4e;  % upper bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.257 filldraw stroke z3e--
                           z4e;  % upper bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.258 filldraw stroke z5e--
                           z6e;  % lower bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.258 filldraw stroke z5e--
                           z6e;  % lower bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.258 filldraw stroke z5e--
                           z6e;  % lower bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.258 filldraw stroke z5e--
                           z6e;  % lower bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.258 filldraw stroke z5e--
                           z6e;  % lower bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [91]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Right bracket"
l.261 cmchar "Right bracket"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Right bracket"
l.261 cmchar "Right bracket"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
<argument> 4.5u#+0.5if.hefty:
                             stem#else:rule_thickness#fi
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.262 ....5if hefty:stem# else:rule_thickness# fi)
                                                  ;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.1u_+0.5rule_thickness#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.262 ....5if hefty:stem# else:rule_thickness# fi)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.263 beginchar("]",wd#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.263 beginchar("]",wd#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> paren_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.263 beginchar("]",wd#,body_height#,paren_depth#)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> body_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.264 italcorr body_height#*slant-
                                  2u#+.5if hefty:stem# else:rule_thickness# fi;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.264 italcorr body_height#*slant-2u#+.5if hefty:
                                                 stem# else:rule_thickness# fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.4wd#+0.5rule_thickness#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.264 ....5if hefty:stem# else:rule_thickness# fi;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.265 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.265 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> hefty
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.267 if hefty:
                top_thickness=vair;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.270 pickup crisp.nib;
                        pos1(side_thickness,0); pos2(side_thickness,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.270 pickup crisp.nib;
                        pos1(side_thickness,0); pos2(side_thickness,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.270 pickup crisp.nib; pos1(
                             side_thickness,0); pos2(side_thickness,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.270 pickup crisp.nib; pos1(
                             side_thickness,0); pos2(side_thickness,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.270 ... crisp.nib; pos1(side_thickness,0); pos2(
                                                  side_thickness,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.270 ... crisp.nib; pos1(side_thickness,0); pos2(
                                                  side_thickness,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.5rule_thickness+0.50229
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   +
l.271 ...r=rt x2r=hround(w-2.5u+.5side_thickness)+
                                                  1+eps;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272 filldraw stroke z1e--
                           z2e;  % stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272 filldraw stroke z1e--
                           z2e;  % stem
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272 filldraw stroke z1e--
                           z2e;  % stem
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.272 filldraw stroke z1e--
                           z2e;  % stem
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.273 pos3(
           top_thickness,90); pos4(top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.273 pos3(
           top_thickness,90); pos4(top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.273 pos3(top_thickness,90); pos4(
                                   top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.273 pos3(top_thickness,90); pos4(
                                   top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.274 pos5(
           top_thickness,90); pos6(top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.274 pos5(
           top_thickness,90); pos6(top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos6
! Isolated expression.
<to be read again> 
                   (
l.274 pos5(top_thickness,90); pos6(
                                   top_thickness,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.274 pos5(top_thickness,90); pos6(
                                   top_thickness,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.276 filldraw stroke z3e--
                           z4e;  % upper bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.276 filldraw stroke z3e--
                           z4e;  % upper bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.276 filldraw stroke z3e--
                           z4e;  % upper bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.276 filldraw stroke z3e--
                           z4e;  % upper bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.276 filldraw stroke z3e--
                           z4e;  % upper bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z5e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.277 filldraw stroke z5e--
                           z6e;  % lower bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z5e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.277 filldraw stroke z5e--
                           z6e;  % lower bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z5e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.277 filldraw stroke z5e--
                           z6e;  % lower bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.277 filldraw stroke z5e--
                           z6e;  % lower bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.277 filldraw stroke z5e--
                           z6e;  % lower bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [93]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Reverse apostrophe"
l.280 cmchar "Reverse apostrophe"
                                 ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Reverse apostrophe"
l.280 cmchar "Reverse apostrophe"
                                 ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.99998wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.281 beginchar("`",5u#,asc_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.281 beginchar("`",5u#,asc_height#,0)
                                      ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.282 italcorr asc_height#*slant+
                                 .5dot_size#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.4wd#+0.01389dot_diam+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.282 italcorr asc_height#*slant+.5dot_size#-2u#;
                                                 
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.283 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.283 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5dot_size+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.284 x1-.5dot_size=hround(.5w-.5dot_size);
                                            y1+.5dot_size=h-comma_depth;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.285 if monospace:
                    ammoc(1,a,dot_size,.28u,vround 1.5comma_depth);  % large...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> ammoc
! Isolated expression.
<to be read again> 
                   (
l.286 else: ammoc(
                  1,a,dot_size,.25u,comma_depth); fi  % normal ammoc
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.286 else: ammoc(
                  1,a,dot_size,.25u,comma_depth); fi  % normal ammoc
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [96]) (accent.mf
>> cmchar
! Isolated expression.
<to be read again> 
                   "Grave accent"
l.11 cmchar "Grave accent"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Grave accent"
l.11 cmchar "Grave accent"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -asc_height#+2x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2x_height#)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.12 ...r(oct"022",9u#,min(asc_height#,2x_height#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.12 ...ct"022",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.12 ...ct"022",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.13 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.13 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.14 if serifs:
                pickup crisp.nib; x1-.5stem=hround 2u; x2=2/3[x1,w-x1];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.19 else: pickup fine.nib;
                            pos1(stem,0); pos2(vair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.19 else: pickup fine.nib;
                            pos1(stem,0); pos2(vair,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.19 else: pickup fine.nib; pos1(
                                 stem,0); pos2(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 else: pickup fine.nib; pos1(
                                 stem,0); pos2(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.19 else: pickup fine.nib; pos1(stem,0); pos2(
                                               vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.19 else: pickup fine.nib; pos1(stem,0); pos2(
                                               vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.22  filldraw stroke z1e--
                           z2e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.22  filldraw stroke z1e--
                           z2e; fi  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.22  filldraw stroke z1e--
                           z2e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.22  filldraw stroke z1e--
                           z2e; fi  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.22  filldraw stroke z1e--
                           z2e; fi  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [18]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Acute accent"
l.25 cmchar "Acute accent"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Acute accent"
l.25 cmchar "Acute accent"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -asc_height#+2x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2x_height#)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.26 ...r(oct"023",9u#,min(asc_height#,2x_height#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.26 ...ct"023",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.26 ...ct"023",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.27 italcorr h#*slant-
                       if serifs: 1.5 fi u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.27 italcorr h#*slant-if serifs:
                                  1.5 fi u#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.2wd#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.27 italcorr h#*slant-if serifs: 1.5 fi u#;
                                            
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.28 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.28 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.29 if serifs:
                pickup crisp.nib; x1+.5stem=hround(w-2u); x2=2/3[x1,w-x1];
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.34 else: pickup fine.nib;
                            pos1(stem,0); pos2(vair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.34 else: pickup fine.nib;
                            pos1(stem,0); pos2(vair,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.34 else: pickup fine.nib; pos1(
                                 stem,0); pos2(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.34 else: pickup fine.nib; pos1(
                                 stem,0); pos2(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.34 else: pickup fine.nib; pos1(stem,0); pos2(
                                               vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.34 else: pickup fine.nib; pos1(stem,0); pos2(
                                               vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.37  filldraw stroke z1e--
                           z2e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.37  filldraw stroke z1e--
                           z2e; fi  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.37  filldraw stroke z1e--
                           z2e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.37  filldraw stroke z1e--
                           z2e; fi  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.37  filldraw stroke z1e--
                           z2e; fi  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [19]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Hachek (check) accent"
l.40 cmchar "Hachek (check) accent"
                                   ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Hachek (check) accent"
l.40 cmchar "Hachek (check) accent"
                                   ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -asc_height#+2x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2x_height#)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.41 ...,.75[x_height#,min(asc_height#,2x_height#)
                                                  ],0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.41 ...[x_height#,min(asc_height#,2x_height#)],0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.75asc_height#+0.25x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.41 ...[x_height#,min(asc_height#,2x_height#)],0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> -asc_height
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0)> if(EXPR0)<u_:
                      u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.42 h':=vround min(asc_height,2x_height)
                                         ; % height of circumflex being inve...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> asc_height+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.42 h':=vround min(asc_height,2x_height);
                                           % height of circumflex being inve...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.43 if serifs:
                italcorr h#*slant+.5hair#-1.75u#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.50 else: italcorr h#*slant-
                             .5stem#+.5vair#-.75u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.15wd#+0.5vair#-0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.50 ...: italcorr h#*slant-.5stem#+.5vair#-.75u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.51  adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.51  adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.52  pickup fine.nib;
                       pos1(vair,0); pos3(vair,0); x1=w-x3;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.52  pickup fine.nib;
                       pos1(vair,0); pos3(vair,0); x1=w-x3;
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.52  pickup fine.nib; pos1(
                            vair,0); pos3(vair,0); x1=w-x3;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.52  pickup fine.nib; pos1(
                            vair,0); pos3(vair,0); x1=w-x3;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.52  pickup fine.nib; pos1(vair,0); pos3(
                                          vair,0); x1=w-x3;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.52  pickup fine.nib; pos1(vair,0); pos3(
                                          vair,0); x1=w-x3;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.53  pos2(
           stem,0); bot y2=vround(1/12[x_height,h']+o); x2=.5w;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.53  pos2(
           stem,0); bot y2=vround(1/12[x_height,h']+o); x2=.5w;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.08333asc_height+o+0.54167
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.53 ...em,0); bot y2=vround(1/12[x_height,h']+o);
                                                   x2=.5w;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> x2r+0.50298
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.54 ...=h+o; lft x1l=hround(rt x2r-3.25u-.5vair);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> %CAPSULE7162
>> (-x1r+x1l-0.50298,y2r-y1r)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.55  z0=whatever[z1r,z2r]
                          =whatever[z2l,z3l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE4685
>> (x3l-x2l,y3l-y2l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.55  z0=whatever[z1r,z2r]=whatever[z2l,z3l]
                                            ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.8x2l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.56  y4l=y4r=y2; x4l=good.x .2[x2l,x2];
                                         x4r=w-x4l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.8x2l+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--
                    z1l--z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.08333asc_height+o+0.54167
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--
                    z1l--z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--
                         z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--
                         z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--
                              z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--
                              z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l-0.50298
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--
                                  z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y0
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--
                                  z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l-0.50298
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--z3l--
                                       z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y0
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--z3l--
                                       z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--z3l--z3r--
                                            z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--z3l--z3r--
                                            z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.8x2l-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--z3l--z3r--z4r--
                                                 cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> 0.08333asc_height+o+0.54167
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.57  filldraw z4l--z1l--z1r--z0--z3l--z3r--z4r--
                                                 cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [20]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Breve accent"
l.60 cmchar "Breve accent"
                          ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Breve accent"
l.60 cmchar "Breve accent"
                          ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -asc_height#+2x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2x_height#)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.61 ...r(oct"025",9u#,min(asc_height#,2x_height#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.61 ...ct"025",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.61 ...ct"025",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.62 italcorr h#*slant+
                       .5vair#-1.5u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.3wd#+0.5vair#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.62 italcorr h#*slant+.5vair#-1.5u#;
                                     
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.63 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.63 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.64 pickup crisp.nib;
                       pos1(vair,-180); pos3(vair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.64 pickup crisp.nib;
                       pos1(vair,-180); pos3(vair,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos1(
                            vair,-180); pos3(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos1(
                            vair,-180); pos3(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos1(vair,-180); pos3(
                                             vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.64 pickup crisp.nib; pos1(vair,-180); pos3(
                                             vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Vround1
>> 3stem
! Not implemented: (unknown numeric)/(unknown numeric).
<to be read again> 
                   ;
l.66 ...ness; mid_thickness=Vround 1/3[vair,stem];
                                                  
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.67 pos2(
          mid_thickness,-90); x2=.5w;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.67 pos2(
          mid_thickness,-90); x2=.5w;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.5mid_thickness-tiny
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.68 ...+o+tiny,1/3[x_height,h]+o-.5mid_thickness)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> tiny+o+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.68 ...o+tiny,1/3[x_height,h]+o-.5mid_thickness);
                                                  
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.69 filldraw stroke z1e{
                         down}...z2e{right}...{up}z3e;  % stroke
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.69 filldraw stroke z1e{
                         down}...z2e{right}...{up}z3e;  % stroke
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.69 filldraw stroke z1e{
                         down}...z2e{right}...{up}z3e;  % stroke
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.69 filldraw stroke z1e{
                         down}...z2e{right}...{up}z3e;  % stroke
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.69 filldraw stroke z1e{
                         down}...z2e{right}...{up}z3e;  % stroke
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [21]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Macron (bar) accent"
l.72 cmchar "Macron (bar) accent"
                                 ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Macron (bar) accent"
l.72 cmchar "Macron (bar) accent"
                                 ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.74 ...[x_height#,asc_height#]+macron_breadth#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.8vair#+0.4asc_height#+0.2stem#+0.6x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.74 ...[x_height#,asc_height#]+macron_breadth#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.75 italcorr h#*slant-
                       .75u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.15wd#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.75 italcorr h#*slant-.75u#;
                             
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.76 adjust_fit(
                0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.76 adjust_fit(
                0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> Vround0.2
>> 0.33333mid_thickness
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ]
l.77 ...adth; macron_breadth:=Vround .2[vair,stem]
                                                  ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.78 pickup if serifs:
                       crisp.nib else: fine.nib fi;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.78 ...up if serifs: crisp.nib else: fine.nib fi;
                                                  
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.78 ...up if serifs: crisp.nib else: fine.nib fi;
                                                  
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.79 pos1(
          macron_breadth,90); pos2(macron_breadth,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 pos1(
          macron_breadth,90); pos2(macron_breadth,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.79 pos1(macron_breadth,90); pos2(
                                   macron_breadth,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.79 pos1(macron_breadth,90); pos2(
                                   macron_breadth,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81 filldraw stroke z1e--
                          z2e;  % bar
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81 filldraw stroke z1e--
                          z2e;  % bar
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81 filldraw stroke z1e--
                          z2e;  % bar
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81 filldraw stroke z1e--
                          z2e;  % bar
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.81 filldraw stroke z1e--
                          z2e;  % bar
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [22]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Scandinavian circle accent"
l.84 cmchar "Scandinavian circle accent"
                                        ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Scandinavian circle accent"
l.84 cmchar "Scandinavian circle accent"
                                        ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.33333asc_height#-1.33333x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   ,
l.85 ...27",13u#+4/3(asc_height#-x_height#)*slant,
                                                  asc_height#,0);
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 2.59996wd#+slant
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.85 ...sc_height#-x_height#)*slant,asc_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.85 ...sc_height#-x_height#)*slant,asc_height#,0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.86 adjust_fit(
                cap_serif_fit#,cap_serif_fit#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.86 adjust_fit(
                cap_serif_fit#,cap_serif_fit#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -hair+0.49908
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.49908)> if(EXPR0)<u_:
                            u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.88 circ_hair=hround min(hair,u+.5)
                                    ; circ_vair=vround min(vair,(h-x_height)...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> hair+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.88 circ_hair=hround min(hair,u+.5);
                                      circ_vair=vround min(vair,(h-x_height)...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> -0.5hair+0.25137
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.91 x2r=hround(.5w-1.5u-.5circ_hair);
                                      
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> unknown path path_.l
>> pulled_arc.l
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(l)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.r
>> pulled_arc.r
! Equation cannot be performed (unknown path=numeric).
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm sorry, but I don't know how to make such things equal.
(See the two expressions just above the error message.)

! Extra tokens will be flushed.
<to be read again> 
                   (
<for(r)> path_(SUFFIX0):=pulled_arc(SUFFIX0)(
                                             1,2)&pulled_arc(SUFFIX0)(2,3)&p...

penstroke->...ffixes.e=l,r:path_.e:=(TEXT0);endfor
                                                  .if.cycle.path_.l:cyclestr...
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> unknown path path_.l
>> (0,0,1,0,0,1)
! Not implemented: (unknown path)transformed(transform).
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
penstroke->..._.l:cyclestroke_.else:fill.path_.l--
                                                  reverse.path_.r--cycle.fi
<to be read again> 
                   ;
l.95 ...ed_arc.e(3,4) & pulled_arc.e(4,1) & cycle;
                                                    % bowl
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [23]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Cedilla accent"
l.98 cmchar "Cedilla accent"
                            ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Cedilla accent"
l.98 cmchar "Cedilla accent"
                            ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 1.59998wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.99 beginchar(oct"030",8u#,0,.875desc_depth#)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> 0.875desc_depth#
! Internal quantity `chardp' must receive a known value.
<to be read again> 
                   ;
beginchar->...R1);charht:=(EXPR2);chardp:=(EXPR3);
                                                  w:=hround(charwd*hppp);h:=...
l.99 beginchar(oct"030",8u#,0,.875desc_depth#)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.100 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.100 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.102 if serifs:
                 pickup crisp.nib; pos1(stem,0); pos2(stem,0);
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.108 else: pickup fine.nib;
                             pos1(vair,0); top y1=-o-2;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.108 else: pickup fine.nib;
                             pos1(vair,0); top y1=-o-2;
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.108 else: pickup fine.nib; pos1(
                                  vair,0); top y1=-o-2;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.108 else: pickup fine.nib; pos1(
                                  vair,0); top y1=-o-2;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.109  pos2(
            .5[vair,stem],0); bot y2=-d-o; x2=x1-1.25u;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.109  pos2(
            .5[vair,stem],0); bot y2=-d-o; x2=x1-1.25u;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.110  filldraw stroke z1e--
                            z2e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.110  filldraw stroke z1e--
                            z2e; fi  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.110  filldraw stroke z1e--
                            z2e; fi  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.110  filldraw stroke z1e--
                            z2e; fi  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.110  filldraw stroke z1e--
                            z2e; fi  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [24]
>> iff.ligs
! Unknown relation will be considered false.
<to be read again> 
                   :
l.113 iff ligs>0:
                  cmchar "Cross for Polish l and L";
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> false
! Isolated expression.
<to be read again> 
                   :
l.113 iff ligs>0:
                  cmchar "Cross for Polish l and L";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   :
l.113 iff ligs>0:
                  cmchar "Cross for Polish l and L";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.2wd#-0.5cap_stem#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.59999wd#)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.117 ...:=cap_serif_fit#+max(2u#+.5cap_stem#,3u#)
                                                  ; fi  % center of `L' stem
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> -2letter_fit#-l_width#
! Improper kern.
<to be read again> 
                   ,
l.118 ...ct"040": "l" kern -l_width#-2letter_fit#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -2letter_fit#-0.5l_width#-0.4wd#-0.5cap_stem#-cap_serif_fit#
! Improper kern.
<to be read again> 
                   ;
l.119  "L" kern -.5l_width#-L_stem#-2letter_fit#;
                                                 
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> l_width#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.120 beginchar(oct"040",l_width#,x_height#,0)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> x_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.120 beginchar(oct"040",l_width#,x_height#,0)
                                              ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.121 adjust_fit(
                 stem_shift#,-stem_shift#);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.121 adjust_fit(
                 stem_shift#,-stem_shift#);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> crisp.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.122 pickup crisp.nib;
                        x2-x1=max(4u,2.8u+stem); .5[x1,x2]=.5w;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.122 pickup crisp.nib;
                        x2-x1=max(4u,2.8u+stem); .5[x1,x2]=.5w;
(That was another `errmessage'.)

>> 0.33333mid_thickness+0.0011
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(0.33333mid_thickness-0.00256)> if(EXPR0)>u_:
                                                 u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.122 pickup crisp.nib; x2-x1=max(4u,2.8u+stem)
                                               ; .5[x1,x2]=.5w;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> (-0.00366,-bar)
! Not implemented: angle(unknown pair).
<to be read again> 
                   +
l.124 numeric theta; theta=angle(z2-z1)+
                                        90;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> (-0.00366,-bar)
>> 90
! Not implemented: (unknown pair)+(known numeric).
<to be read again> 
                   ;
l.124 numeric theta; theta=angle(z2-z1)+90;
                                           
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.125 pos1(
           bar,theta); pos2(bar,theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.125 pos1(
           bar,theta); pos2(bar,theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.125 pos1(bar,theta); pos2(
                            bar,theta);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.125 pos1(bar,theta); pos2(
                            bar,theta);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126 filldraw stroke z1e--
                           z2e;  % diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126 filldraw stroke z1e--
                           z2e;  % diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126 filldraw stroke z1e--
                           z2e;  % diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126 filldraw stroke z1e--
                           z2e;  % diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.126 filldraw stroke z1e--
                           z2e;  % diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [32]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Circumflex (hat) accent"
l.129 cmchar "Circumflex (hat) accent"
                                      ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Circumflex (hat) accent"
l.129 cmchar "Circumflex (hat) accent"
                                      ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -asc_height#+2x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2x_height#)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.130 ...(oct"136",9u#,min(asc_height#,2x_height#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.130 ...t"136",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.130 ...t"136",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.131 if serifs:
                 italcorr .5[x_height#,h#]*slant+.5hair#-1.75u#;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.66667h#+0.33333x_height#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.137 else: italcorr 2/3[x_height#,h#]*slant-
                                             .5stem#+.5vair#-.75u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.15wd#+0.5vair#-0.5stem#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.137 ..._height#,h#]*slant-.5stem#+.5vair#-.75u#;
                                                  
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.138  adjust_fit(
                  0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.138  adjust_fit(
                  0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.139  pickup fine.nib;
                        pos1(vair,0); pos3(vair,0); x1=w-x3;
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.139  pickup fine.nib;
                        pos1(vair,0); pos3(vair,0); x1=w-x3;
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.139  pickup fine.nib; pos1(
                             vair,0); pos3(vair,0); x1=w-x3;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.139  pickup fine.nib; pos1(
                             vair,0); pos3(vair,0); x1=w-x3;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.139  pickup fine.nib; pos1(vair,0); pos3(
                                           vair,0); x1=w-x3;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.139  pickup fine.nib; pos1(vair,0); pos3(
                                           vair,0); x1=w-x3;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.140  pos2(
            stem,0); top y2=h; x2=.5w; bot y1=bot y3=vround 2/3[h,x_height]-...
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.140  pos2(
            stem,0); top y2=h; x2=.5w; bot y1=bot y3=vround 2/3[h,x_height]-...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> x2r+0.50298
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
l.141  lft x1l=hround(rt x2r-3.25u-.5vair);
                                            % same slope as in the acute accent
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> %CAPSULE7842
>> (-x1r+x1l-0.50298,y2r-y1r)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.142  z0=whatever[z1r,z2r]
                           =whatever[z2l,z3l];
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> %CAPSULE6766
>> (x3l-x2l,y3l-y2l)
! Not implemented: (unknown numeric)*(unknown pair).
<to be read again> 
                   ]
l.142  z0=whatever[z1r,z2r]=whatever[z2l,z3l]
                                             ;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.8x2l+0.5
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   -
good.x->begingroup.hround((EXPR2)+pen_lft)-
                                           pen_lft.endgroup
<to be read again> 
                   ;
l.143  y4l=y4r=y2; x4l=good.x .2[x2l,x2];
                                          x4r=w-x4l;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> 0.8x2l+0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--
                     z1l--z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--
                          z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1l
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--
                          z1r--z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--
                               z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y1r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--
                               z0--z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l-0.50298
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--
                                   z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y0
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--
                                   z3l--z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x1l-0.50298
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--z3l--
                                        z3r--z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y0
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--z3l--
                                        z3r--z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> x3r
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--z3l--z3r--
                                             z4r--cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> y3r
! Undefined y coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--z3l--z3r--
                                             z4r--cycle; fi  % diagonals
I need a `known' y value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

>> -0.8x2l-0.5
! Undefined x coordinate has been replaced by 0.
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.144  filldraw z4l--z1l--z1r--z0--z3l--z3r--z4r--
                                                  cycle; fi  % diagonals
I need a `known' x value for this part of the path.
The value I found (see above) was no good;
so I'll try to keep going by using zero instead.
(Chapter 27 of The METAFONTbook explains that
you might want to type `I ???' now.)

 [94]
>> iff.ligs
! Unknown relation will be considered false.
<to be read again> 
                   :
l.147 iff ligs>0:
                  cmchar "Dot accent";
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> false
! Isolated expression.
<to be read again> 
                   :
l.147 iff ligs>0:
                  cmchar "Dot accent";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   :
l.147 iff ligs>0:
                  cmchar "Dot accent";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -0.02777dot_diam+cap_curve#+0.01389
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(cap_curve#)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.148 ...iam#; dot_diam#=max(dot_size#,cap_curve#)
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.01389dot_diam-asc_height#+1.42857x_height#-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.149 ...in(asc_height#,10/7x_height#+.5dot_diam#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.99998wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.149 ...asc_height#,10/7x_height#+.5dot_diam#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.149 ...asc_height#,10/7x_height#+.5dot_diam#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> dot_diam+0.00012
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   ;
<for(dot_diam)> ...round((SUFFIX0)#*hppp+blacker);
                                                  if(SUFFIX0)<=0:(SUFFIX0):=...

define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.150 define_whole_blacker_pixels(dot_diam)
                                           ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_diam
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_diam)> ...#*hppp+blacker);if(SUFFIX0)<=0:
                                                  (SUFFIX0):=1;fi ENDFOR
define_whole_blacker_pixels->...<=0:$:=1;fi.endfor
                                                  
l.150 define_whole_blacker_pixels(dot_diam)
                                           ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.151 italcorr h#*slant+
                        .5dot_diam#-2u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.01389dot_diam-0.4wd#+slant-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.151 italcorr h#*slant+.5dot_diam#-2u#;
                                        
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.152 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.152 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.153 pickup tiny.nib;
                       pos1(dot_diam,0); pos2(dot_diam,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.153 pickup tiny.nib;
                       pos1(dot_diam,0); pos2(dot_diam,90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.153 pickup tiny.nib; pos1(
                            dot_diam,0); pos2(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.153 pickup tiny.nib; pos1(
                            dot_diam,0); pos2(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.153 pickup tiny.nib; pos1(dot_diam,0); pos2(
                                              dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.153 pickup tiny.nib; pos1(dot_diam,0); pos2(
                                              dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y2l-o
! Unknown relation will be considered false.
<to be read again> 
                   :
l.155 if bot y2l<x_height+o+slab:
                                  y2l:=min(y2r-eps,x_height+o+slab+.5tiny); fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.156 y1=.5[y2l,y2r]; dot(
                          1,2);  % dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.156 y1=.5[y2l,y2r]; dot(
                          1,2);  % dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [95]
>> iff.ligs
! Unknown relation will be considered false.
<to be read again> 
                   :
l.159 iff ligs>0:
                  cmchar "Long Hungarian umlaut accent";
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> false
! Isolated expression.
<to be read again> 
                   :
l.159 iff ligs>0:
                  cmchar "Long Hungarian umlaut accent";
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   :
l.159 iff ligs>0:
                  cmchar "Long Hungarian umlaut accent";
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -asc_height#+2x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(2x_height#)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.160 ...(oct"175",9u#,min(asc_height#,2x_height#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.160 ...t"175",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.160 ...t"175",9u#,min(asc_height#,2x_height#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.161 italcorr h#*slant-
                        u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.2wd#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.161 italcorr h#*slant-u#;
                           
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.162 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.162 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.164 if serifs:
                 pickup crisp.nib; x3+.5stem=hround(w-1.5u); x2=2.5u;
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.171 else: pickup fine.nib;
                             pos1(stem,0); pos2(vair,0);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.171 else: pickup fine.nib;
                             pos1(stem,0); pos2(vair,0);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.171 else: pickup fine.nib; pos1(
                                  stem,0); pos2(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.171 else: pickup fine.nib; pos1(
                                  stem,0); pos2(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.171 else: pickup fine.nib; pos1(stem,0); pos2(
                                                vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.171 else: pickup fine.nib; pos1(stem,0); pos2(
                                                vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.172  pos3(
            stem,0); pos4(vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.172  pos3(
            stem,0); pos4(vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.172  pos3(stem,0); pos4(
                          vair,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.172  pos3(stem,0); pos4(
                          vair,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.175  filldraw stroke z1e--
                            z2e;  % left diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.175  filldraw stroke z1e--
                            z2e;  % left diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.175  filldraw stroke z1e--
                            z2e;  % left diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.175  filldraw stroke z1e--
                            z2e;  % left diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.175  filldraw stroke z1e--
                            z2e;  % left diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z3e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176  filldraw stroke z3e--
                            z4e; fi  % right diagonal
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z3e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176  filldraw stroke z3e--
                            z4e; fi  % right diagonal
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z3e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176  filldraw stroke z3e--
                            z4e; fi  % right diagonal
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176  filldraw stroke z3e--
                            z4e; fi  % right diagonal
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
--->{
     curl1}..{curl1}
l.176  filldraw stroke z3e--
                            z4e; fi  % right diagonal
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [125]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Tilde (squiggle) accent"
l.179 cmchar "Tilde (squiggle) accent"
                                      ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Tilde (squiggle) accent"
l.179 cmchar "Tilde (squiggle) accent"
                                      ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> 0.01389dot_diam-asc_height#+1.42857x_height#-0.00694
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.180 ...in(asc_height#,10/7x_height#+.5dot_size#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.180 ...asc_height#,10/7x_height#+.5dot_size#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.180 ...asc_height#,10/7x_height#+.5dot_size#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   -
l.181 italcorr h#*slant-
                        u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> -0.2wd#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.181 italcorr h#*slant-u#;
                           
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.182 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.182 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.183 if serifs:
                 numeric theta; theta=angle(1/6(6u-vair),1/4(h-x_height));
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> fine.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.193 else: pickup fine.nib;
                             pos1(vair,180); pos2(vair,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.193 else: pickup fine.nib;
                             pos1(vair,180); pos2(vair,90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.193 else: pickup fine.nib; pos1(
                                  vair,180); pos2(vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.193 else: pickup fine.nib; pos1(
                                  vair,180); pos2(vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.193 else: pickup fine.nib; pos1(vair,180); pos2(
                                                  vair,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.193 else: pickup fine.nib; pos1(vair,180); pos2(
                                                  vair,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.194  pos3(
            .5[vair,slab],90); pos4(vair,90); pos5(vair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.194  pos3(
            .5[vair,slab],90); pos4(vair,90); pos5(vair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos4
! Isolated expression.
<to be read again> 
                   (
l.194  pos3(.5[vair,slab],90); pos4(
                                    vair,90); pos5(vair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.194  pos3(.5[vair,slab],90); pos4(
                                    vair,90); pos5(vair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos5
! Isolated expression.
<to be read again> 
                   (
l.194 ...3(.5[vair,slab],90); pos4(vair,90); pos5(
                                                  vair,180);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.194 ...3(.5[vair,slab],90); pos4(vair,90); pos5(
                                                  vair,180);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> stroke.z1e
! Not implemented: turningnumber(unknown numeric).
<to be read again> 
                   <=
counterclockwise->...:=0;if.turningnumber(EXPR2)<=
                                                  0:reverse.fi.fi(EXPR2)endg...
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.198  filldraw stroke z1e{
                           up}...z2e{right}..z3e..{right}z4e...{up}z5e; fi %...
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> stroke.z1e
! Unknown relation will be considered false.
<to be read again> 
                   :
counterclockwise->...0;if.turningnumber(EXPR2)<=0:
                                                  reverse.fi.fi(EXPR2)endgroup
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.198  filldraw stroke z1e{
                           up}...z2e{right}..z3e..{right}z4e...{up}z5e; fi %...
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> stroke.z1e
>> (0,0,1,0,0,1)
! Not implemented: (unknown numeric)transformed(transform).
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.198  filldraw stroke z1e{
                           up}...z2e{right}..z3e..{right}z4e...{up}z5e; fi %...
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> (0,0,1,0,0,1)
! Improper `addto'.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.198  filldraw stroke z1e{
                           up}...z2e{right}..z3e..{right}z4e...{up}z5e; fi %...
This expression should have been a known path.
So I'll not change anything just now.

! Extra tokens will be flushed.
<to be read again> 
                   withpen
filldraw->fill.counterclockwise(EXPR0)withpen
                                             .currentpen
<to be read again> 
                   {
l.198  filldraw stroke z1e{
                           up}...z2e{right}..z3e..{right}z4e...{up}z5e; fi %...
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [126]
>> cmchar
! Isolated expression.
<to be read again> 
                   "Umlaut (double dot) accent"
l.201 cmchar "Umlaut (double dot) accent"
                                         ;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   "Umlaut (double dot) accent"
l.201 cmchar "Umlaut (double dot) accent"
                                         ;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> -dot_size#+cap_curve#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(cap_curve#)> if(EXPR0)>u_:
                               u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.203 dot_diam#=max(dot_size#,cap_curve#)
                                         ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 0.5dot_size#-asc_height#+1.42857x_height#
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(linearform)> if(EXPR0)<u_:
                               u_:=(EXPR0);fi ENDFOR
min->...);for.uu=(TEXT3):if.uu<u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.204 ...in(asc_height#,10/7x_height#+.5dot_diam#)
                                                  ,0);
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> 1.79997wd#
! Internal quantity `charwd' must receive a known value.
<to be read again> 
                   ;
beginchar->...byte(EXPR0)else:0fi;charwd:=(EXPR1);
                                                  charht:=(EXPR2);chardp:=(E...
l.204 ...asc_height#,10/7x_height#+.5dot_diam#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> asc_height#
! Internal quantity `charht' must receive a known value.
<to be read again> 
                   ;
beginchar->...0fi;charwd:=(EXPR1);charht:=(EXPR2);
                                                  chardp:=(EXPR3);w:=hround(...
l.204 ...asc_height#,10/7x_height#+.5dot_diam#),0)
                                                  ;
I can't set an internal quantity to anything but a known
numeric value, so I'll have to ignore this assignment.

>> -dot_size+cap_curve
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(cap_curve)> if(EXPR0)>u_:
                              u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
<argument> hround(max(dot_size,cap_curve)
                                         -2stem_corr)
max->...ngroup.save.u_;setu_(EXPR2);for.uu=(TEXT3)
                                                  :if.uu>u_:u_:=uu;fi.endfor...
l.205 ...ound(max(dot_size,cap_curve)-2stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> dot_size+6.55423
! Not implemented: floor(unknown numeric).
<to be read again> 
                   endgroup
<to be read again> 
                   :
max->...group.save.u_;setu_(EXPR2);for.uu=(TEXT3):
                                                  if.uu>u_:u_:=uu;fi.endfor....
l.205 ...ound(max(dot_size,cap_curve)-2stem_corr))
                                                  ;
I'm afraid I don't know how to apply that operation to that
particular type. Continue, and I'll simply return the
argument (shown above) as the result of the operation.

>> dot_size-tiny.breadth+6.55423
! Unknown relation will be considered false.
<to be read again> 
                   :
<for(dot_size+6.55423)> if(EXPR0)>u_:
                                     u_:=(EXPR0);fi ENDFOR
max->...);for.uu=(TEXT3):if.uu>u_:u_:=uu;fi.endfor
                                                  .u_.endgroup
l.205 ...ound(max(dot_size,cap_curve)-2stem_corr))
                                                  ;
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> h#
>> slant
! Not implemented: (unknown numeric)*(unknown numeric).
<to be read again> 
                   +
l.206 italcorr h#*slant+
                        .5dot_diam#-2.25u#;
I'm afraid I don't know how to apply that operation to that
combination of types. Continue, and I'll return the second
argument (see above) as the result of the operation.

>> 0.5dot_size#-0.45wd#+slant
! Unknown relation will be considered false.
<to be read again> 
                   :
italcorr->if(EXPR0)>0:
                      charic:=(EXPR0)fi
<to be read again> 
                   ;
l.206 italcorr h#*slant+.5dot_diam#-2.25u#;
                                           
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> adjust_fit
! Isolated expression.
<to be read again> 
                   (
l.207 adjust_fit(
                 0,0);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.207 adjust_fit(
                 0,0);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> tiny.nib
! Improper subscript has been replaced by zero.
numeric_pickup_->if.unknown.pen_[(EXPR0)]
                                         :errmessage"Unknown pen";clearpen.e...
<to be read again> 
                   ;
l.208 pickup tiny.nib;
                       pos1(dot_diam,0); pos2(dot_diam,90);
A bracketed subscript must have a known numeric value;
unfortunately, what I found was the value that appears just
above this error message. So I'll try a zero subscript.

! Unknown pen.
<to be read again> 
                   ;
numeric_pickup_->...PR0)]:errmessage"Unknown pen";
                                                  clearpen.else:currentpen:=...
<to be read again> 
                   ;
l.208 pickup tiny.nib;
                       pos1(dot_diam,0); pos2(dot_diam,90);
(That was another `errmessage'.)

>> pos1
! Isolated expression.
<to be read again> 
                   (
l.208 pickup tiny.nib; pos1(
                            dot_diam,0); pos2(dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.208 pickup tiny.nib; pos1(
                            dot_diam,0); pos2(dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos2
! Isolated expression.
<to be read again> 
                   (
l.208 pickup tiny.nib; pos1(dot_diam,0); pos2(
                                              dot_diam,90);
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.208 pickup tiny.nib; pos1(dot_diam,0); pos2(
                                              dot_diam,90);
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> y2l-o
! Unknown relation will be considered false.
<to be read again> 
                   :
l.210 if bot y2l<x_height+o+slab:
                                  y2l:=min(y2r-eps,x_height+o+slab+.5tiny); fi
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> dot
! Isolated expression.
<to be read again> 
                   (
l.211 y1=.5[y2l,y2r]; dot(
                          1,2);  % left dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.211 y1=.5[y2l,y2r]; dot(
                          1,2);  % left dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> pos3
! Isolated expression.
<to be read again> 
                   (
l.212 pos3(
           dot_diam,0); penpos4(y2r-y2l,90); y3=y4=y1; x3=x4=w-x1;
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.212 pos3(
           dot_diam,0); penpos4(y2r-y2l,90); y3=y4=y1; x3=x4=w-x1;
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

>> dot
! Isolated expression.
<to be read again> 
                   (
l.213 dot(
          3,4);  % right dot
I couldn't find an `=' or `:=' after the
expression that is shown above this error message,
so I guess I'll just ignore it and carry on.

! Extra tokens will be flushed.
<to be read again> 
                   (
l.213 dot(
          3,4);  % right dot
I've just read as much of that statement as I could fathom,
so a semicolon should have been next. It's very puzzling...
but I'll try to get myself back together, by ignoring
everything up to the next `;'. Please insert a semicolon
now in front of anything that you don't want me to delete.
(See Chapter 27 of The METAFONTbook for an example.)

 [127])
>> ligs-1
! Unknown relation will be considered false.
<to be read again> 
                   :
l.23 if ligs>1:
                input romlig; fi  % letter ligatures
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> ligs
! Unknown relation will be considered false.
<to be read again> 
                   :
l.24 if ligs>0:
                input comlig; fi  % ligatures common with italic text
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> ligs-1
! Unknown relation will be considered false.
<to be read again> 
                   :
l.25 if ligs<=1:
                 input romsub; fi  % substitutes for ligatures
Oh dear. I can't decide if the expression above is positive,
negative, or zero. So this comparison test won't be `true'.

>> slant
! Improper font parameter.
<to be read again> 
                   ;
l.29 font_slant slant;
                       font_x_height x_height#;
I'm zeroing this one. Proceed, with fingers crossed.

>> x_height#
! Improper font parameter.
<to be read again> 
                   ;
l.29 font_slant slant; font_x_height x_height#;
                                               
I'm zeroing this one. Proceed, with fingers crossed.

>> monospace
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.30 if monospace:
                   font_normal_space 9u#; % no stretching or shrinking
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 2letter_fit#+1.19998wd#
! Improper font parameter.
<to be read again> 
                   ;
l.33 else: font_normal_space 6u#+2letter_fit#;
                                              
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.59999wd#
! Improper font parameter.
<to be read again> 
                   ;
l.34  font_normal_stretch 3u#;
                               font_normal_shrink 2u#;
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.4wd#
! Improper font parameter.
<to be read again> 
                   ;
l.34 ...ormal_stretch 3u#; font_normal_shrink 2u#;
                                                  
I'm zeroing this one. Proceed, with fingers crossed.

>> 4letter_fit#+3.59995wd#
! Improper font parameter.
<to be read again> 
                   ;
l.35  font_quad 18u#+4letter_fit#;
                                  
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.4wd#
! Improper font parameter.
<to be read again> 
                   ;
l.36  font_extra_space 2u#;
                           
I'm zeroing this one. Proceed, with fingers crossed.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.38  ligtable "k": if serifs:
                               "v": "a" kern -u#, fi\\"w": "e" kern k#,
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.38 ...: "v": "a" kern -u#, fi\\"w": "e" kern k#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.39   "a" kern k#,
                    "o" kern k#, "c" kern k#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.39   "a" kern k#, "o" kern k#,
                                 "c" kern k#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ;
l.39   "a" kern k#, "o" kern k#, "c" kern k#;
                                             
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.40  ligtable "P": "A" kern kk#,
                                 
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.41   "y": "o" kern k#,
                         "e" kern k#, "a" kern k#, "." kern kk#, "," kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.41   "y": "o" kern k#, "e" kern k#,
                                      "a" kern k#, "." kern kk#, "," kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.41   "y": "o" kern k#, "e" kern k#, "a" kern k#,
                                                   "." kern kk#, "," kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.41 ...#, "e" kern k#, "a" kern k#, "." kern kk#,
                                                   "," kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ;
l.41 ..., "a" kern k#, "." kern kk#, "," kern kk#;
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.42  ligtable "F": "V": "W": if serifs:
                                         "o" kern kk#, "e" kern kk#, "u" ker...
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.44    else: "o" kern k#,
                           "e" kern k#, "u" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.44    else: "o" kern k#, "e" kern k#,
                                        "u" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.44 ...se: "o" kern k#, "e" kern k#, "u" kern k#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.45     "r" kern k#,
                      "a" kern k#, "A" kern kk#, fi
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.45     "r" kern k#, "a" kern k#,
                                   "A" kern kk#, fi
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.45     "r" kern k#, "a" kern k#, "A" kern kk#,
                                                 fi
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.46   "K": "X": "O" kern k#,
                              "C" kern k#, "G" kern k#, "Q" kern k#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.46   "K": "X": "O" kern k#, "C" kern k#,
                                           "G" kern k#, "Q" kern k#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.46 ...X": "O" kern k#, "C" kern k#, "G" kern k#,
                                                   "Q" kern k#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ;
l.46 ...k#, "C" kern k#, "G" kern k#, "Q" kern k#;
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.47  ligtable "T": "y" kern if serifs:
                                        k# else: kk# fi,
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.47 ... "T": "y" kern if serifs: k# else: kk# fi,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.48   "Y": "e" kern kk#,
                          "o" kern kk#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.48   "Y": "e" kern kk#, "o" kern kk#,
                                       
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.49    "r" kern kk#,
                      "a" kern kk#, "A" kern kk#, "u" kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.49    "r" kern kk#, "a" kern kk#,
                                    "A" kern kk#, "u" kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.49    "r" kern kk#, "a" kern kk#, "A" kern kk#,
                                                  "u" kern kk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ;
l.49 ... "a" kern kk#, "A" kern kk#, "u" kern kk#;
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.50  ligtable "O": "D": "X" kern k#,
                                      "W" kern k#, "A" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.50  ligtable "O": "D": "X" kern k#, "W" kern k#,
                                                   "A" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.50 ...D": "X" kern k#, "W" kern k#, "A" kern k#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.51    "V" kern k#,
                     "Y" kern k#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ;
l.51    "V" kern k#, "Y" kern k#;
                                 
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.52  if serifs:
                 ligtable "h": "m": "n":
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.55  ligtable "o": "b": "p": "e" kern -k#,
                                            "o" kern -k#, "x" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.55 ..."o": "b": "p": "e" kern -k#, "o" kern -k#,
                                                   "x" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.55 ...: "e" kern -k#, "o" kern -k#, "x" kern k#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.56    "d" kern -k#,
                      "c" kern -k#, "q" kern -k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.56    "d" kern -k#, "c" kern -k#,
                                    "q" kern -k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.56    "d" kern -k#, "c" kern -k#, "q" kern -k#,
                                                 
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.57   "a": if serifs:
                       "v" kern k#, "j" kern u#, else: "r" kern k#, fi
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.57 ..." kern k#, "j" kern u#, else: "r" kern k#,
                                                   fi
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.58   "t": "y" kern k#,
                        
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ;
l.59   "u": "w" kern k#;
                        
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> serifs
! Undefined condition will be treated as `false'.
<to be read again> 
                   :
l.60  ligtable "A": if serifs:
                               "R": fi\\ "t" kern k#,
The expression shown above should have had a definite
true-or-false value. I'm changing it to `false'.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.60 ...ble "A": if serifs: "R": fi\\ "t" kern k#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.61   "C" kern k#,
                    "O" kern k#, "G" kern k#, "U" kern k#, "Q" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.61   "C" kern k#, "O" kern k#,
                                 "G" kern k#, "U" kern k#, "Q" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.61   "C" kern k#, "O" kern k#, "G" kern k#,
                                              "U" kern k#, "Q" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.61 ...k#, "O" kern k#, "G" kern k#, "U" kern k#,
                                                   "Q" kern k#,
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.1wd#
! Improper kern.
<to be read again> 
                   ,
l.61 ...k#, "G" kern k#, "U" kern k#, "Q" kern k#,
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.62   "L": "T" kern kk#,
                          "Y" kern kk#, "V" kern kkk#, "W" kern kkk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.3wd#
! Improper kern.
<to be read again> 
                   ,
l.62   "L": "T" kern kk#, "Y" kern kk#,
                                        "V" kern kkk#, "W" kern kkk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.4wd#
! Improper kern.
<to be read again> 
                   ,
l.62 ..."T" kern kk#, "Y" kern kk#, "V" kern kkk#,
                                                   "W" kern kkk#;
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> -0.4wd#
! Improper kern.
<to be read again> 
                   ;
l.62 ...Y" kern kk#, "V" kern kkk#, "W" kern kkk#;
                                                  
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ;
l.63  ligtable "g": "j" kern -k#;
                                  % logjam
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

>> 0.1wd#
! Improper kern.
<to be read again> 
                   ;
l.64  ligtable "I": "I" kern -k#;
                                  fi % Richard III
The amount of kern should be a known numeric value.
I'm zeroing this one. Proceed, with fingers crossed.

 )
(end occurred when else on line 95 was incomplete)
(end occurred when else on line 105 was incomplete)
(end occurred when else on line 84 was incomplete)
(end occurred when else on line 183 was incomplete)
(end occurred when else on line 65 was incomplete)
(end occurred when else on line 19 was incomplete)
(end occurred when else on line 207 was incomplete)
(end occurred when else on line 57 was incomplete)
(end occurred when else on line 447 was incomplete)
(end occurred when else on line 551 was incomplete)
(end occurred when else on line 446 was incomplete)
(end occurred when else on line 409 was incomplete)
Output written on roman.2602gf (119 characters, 19644 bytes).
